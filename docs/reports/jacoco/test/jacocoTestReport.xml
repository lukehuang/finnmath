<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="finnmath"><sessioninfo id="archlinux-1773e09f" start="1505667629464" dump="1505667646498"/><package name="finnmath/util"><class name="finnmath/util/MathRandom"><method name="&lt;init&gt;" desc="()V" line="54"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveLong" desc="(J)J" line="70"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeLong" desc="(J)J" line="87"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLong" desc="(J)J" line="104"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveLongs" desc="(JI)[J" line="129"><counter type="INSTRUCTION" missed="1" covered="36"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeLongs" desc="(JI)[J" line="156"><counter type="INSTRUCTION" missed="1" covered="36"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLongs" desc="(JI)[J" line="183"><counter type="INSTRUCTION" missed="1" covered="36"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveDecimal" desc="(JI)Ljava/math/BigDecimal;" line="209"><counter type="INSTRUCTION" missed="3" covered="29"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeDecimal" desc="(JI)Ljava/math/BigDecimal;" line="235"><counter type="INSTRUCTION" missed="2" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimal" desc="(JI)Ljava/math/BigDecimal;" line="261"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveDecimal" desc="(JI)Ljava/math/BigDecimal;" line="284"><counter type="INSTRUCTION" missed="5" covered="27"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeDecimal" desc="(JI)Ljava/math/BigDecimal;" line="311"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextInvertibleDecimal" desc="(JI)Ljava/math/BigDecimal;" line="337"><counter type="INSTRUCTION" missed="2" covered="29"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keepDecimalInBound" desc="(Ljava/math/BigDecimal;J)Ljava/math/BigDecimal;" line="344"><counter type="INSTRUCTION" missed="17" covered="30"/><counter type="BRANCH" missed="5" covered="3"/><counter type="LINE" missed="3" covered="7"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveDecimals" desc="(JII)Ljava/util/List;" line="382"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeDecimals" desc="(JII)Ljava/util/List;" line="414"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimals" desc="(JII)Ljava/util/List;" line="446"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveDecimals" desc="(JII)Ljava/util/List;" line="478"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextInvertibleNegativeDecimals" desc="(JII)Ljava/util/List;" line="510"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextInvertibleDecimals" desc="(JII)Ljava/util/List;" line="542"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextPositiveFraction" desc="(J)Lfinnmath/number/Fraction;" line="567"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFraction" desc="(J)Lfinnmath/number/Fraction;" line="588"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFraction" desc="(J)Lfinnmath/number/Fraction;" line="607"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFractions" desc="(JI)Ljava/util/List;" line="632"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFractions" desc="(JI)Ljava/util/List;" line="659"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFractions" desc="(JI)Ljava/util/List;" line="686"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFraction" desc="(J)Lfinnmath/number/Fraction;" line="708"><counter type="INSTRUCTION" missed="1" covered="25"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFraction" desc="(J)Lfinnmath/number/Fraction;" line="727"><counter type="INSTRUCTION" missed="1" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFraction" desc="(J)Lfinnmath/number/Fraction;" line="744"><counter type="INSTRUCTION" missed="1" covered="21"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFractions" desc="(JI)Ljava/util/List;" line="769"><counter type="INSTRUCTION" missed="2" covered="37"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFractions" desc="(JI)Ljava/util/List;" line="796"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextInvertibleFractions" desc="(JI)Ljava/util/List;" line="823"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextSimpleComplexNumber" desc="(J)Lfinnmath/number/SimpleComplexNumber;" line="846"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumber" desc="(J)Lfinnmath/number/SimpleComplexNumber;" line="865"><counter type="INSTRUCTION" missed="1" covered="44"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="893"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="921"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextRealComplexNumber" desc="(JI)Lfinnmath/number/RealComplexNumber;" line="946"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumber" desc="(JI)Lfinnmath/number/RealComplexNumber;" line="968"><counter type="INSTRUCTION" missed="2" covered="51"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumbers" desc="(JII)Ljava/util/List;" line="1000"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumbers" desc="(JII)Ljava/util/List;" line="1032"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextBigIntVector" desc="(JI)Lfinnmath/linear/BigIntVector;" line="1059"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntVectors" desc="(JII)Ljava/util/List;" line="1088"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntMatrix" desc="(JII)Lfinnmath/linear/BigIntMatrix;" line="1119"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntMatrix" desc="(JI)Lfinnmath/linear/BigIntMatrix;" line="1149"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntMatrix" desc="(JI)Lfinnmath/linear/BigIntMatrix;" line="1182"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntMatrix" desc="(JI)Lfinnmath/linear/BigIntMatrix;" line="1216"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntMatrix" desc="(JI)Lfinnmath/linear/BigIntMatrix;" line="1241"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntMatrix" desc="(JI)Lfinnmath/linear/BigIntMatrix;" line="1273"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntMatrix" desc="(JI)Lfinnmath/linear/BigIntMatrix;" line="1308"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntMatrices" desc="(JIII)Ljava/util/List;" line="1354"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1389"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1423"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1457"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntMatrices" desc="(JII)Ljava/util/List;" line="1491"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntMatrices" desc="(JII)Ljava/util/List;" line="1525"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntMatrices" desc="(JII)Ljava/util/List;" line="1559"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalVector" desc="(JII)Lfinnmath/linear/DecimalVector;" line="1590"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalVectors" desc="(JIII)Ljava/util/List;" line="1629"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalMatrix" desc="(JIII)Lfinnmath/linear/DecimalMatrix;" line="1665"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularDecimalMatrix" desc="(JII)Lfinnmath/linear/DecimalMatrix;" line="1700"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularDecimalMatrix" desc="(JII)Lfinnmath/linear/DecimalMatrix;" line="1737"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularDecimalMatrix" desc="(JII)Lfinnmath/linear/DecimalMatrix;" line="1775"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalDecimalMatrix" desc="(JII)Lfinnmath/linear/DecimalMatrix;" line="1804"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricDecimalMatrix" desc="(JII)Lfinnmath/linear/DecimalMatrix;" line="1840"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricDecimalMatrix" desc="(JII)Lfinnmath/linear/DecimalMatrix;" line="1879"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalMatrices" desc="(JIIII)Ljava/util/List;" line="1931"><counter type="INSTRUCTION" missed="0" covered="66"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1972"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2012"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2052"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2092"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2132"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2172"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="2185"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$nextSkewSymmetricDecimalMatrix$23" desc="(IJILfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1883"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricDecimalMatrix$22" desc="(Ljava/lang/Integer;JILfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1884"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricDecimalMatrix$21" desc="(IJILfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1844"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricDecimalMatrix$20" desc="(JILjava/lang/Integer;Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1845"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalDecimalMatrix$19" desc="(ILfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1808"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalDecimalMatrix$18" desc="(Ljava/lang/Integer;Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1809"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularDecimalMatrix$17" desc="(ILfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1741"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularDecimalMatrix$16" desc="(Ljava/lang/Integer;Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1742"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularDecimalMatrix$15" desc="(ILfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1704"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularDecimalMatrix$14" desc="(Ljava/lang/Integer;Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1705"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDecimalMatrix$13" desc="(ILfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1671"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDecimalMatrix$12" desc="(Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="1672"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntMatrix$11" desc="(IJLfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1312"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntMatrix$10" desc="(Ljava/lang/Integer;JLfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1313"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntMatrix$9" desc="(IJLfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1277"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntMatrix$8" desc="(JLjava/lang/Integer;Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1278"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntMatrix$7" desc="(ILfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1245"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntMatrix$6" desc="(Ljava/lang/Integer;Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1246"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntMatrix$5" desc="(ILfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1186"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntMatrix$4" desc="(Ljava/lang/Integer;Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1187"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntMatrix$3" desc="(ILfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1153"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntMatrix$2" desc="(Ljava/lang/Integer;Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1154"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntMatrix$1" desc="(ILfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1124"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntMatrix$0" desc="(Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="1125"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="389" covered="2959"/><counter type="BRANCH" missed="79" covered="391"/><counter type="LINE" missed="59" covered="447"/><counter type="COMPLEXITY" missed="59" covered="273"/><counter type="METHOD" missed="9" covered="88"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/util/SquareRootCalculator"><method name="&lt;init&gt;" desc="()V" line="59"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;)Ljava/math/BigDecimal;" line="77"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="97"><counter type="INSTRUCTION" missed="1" covered="21"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="123"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="152"><counter type="INSTRUCTION" missed="1" covered="39"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;II)Ljava/math/BigDecimal;" line="185"><counter type="INSTRUCTION" missed="0" covered="44"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;" line="218"><counter type="INSTRUCTION" missed="1" covered="41"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;" line="258"><counter type="INSTRUCTION" missed="0" covered="62"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;" line="301"><counter type="INSTRUCTION" missed="1" covered="59"/><counter type="BRANCH" missed="1" covered="11"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrtOfPerfectSquare" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="331"><counter type="INSTRUCTION" missed="1" covered="23"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="perfectSquare" desc="(Ljava/math/BigInteger;)Z" line="352"><counter type="INSTRUCTION" missed="1" covered="36"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="heronsMethod" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="362"><counter type="INSTRUCTION" missed="0" covered="62"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="calculateSuccessor" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="380"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="seedValue" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="389"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scientificNotationForSqrt" desc="(Ljava/math/BigDecimal;)Lfinnmath/number/ScientificNotation;" line="399"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="45"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="9" covered="579"/><counter type="BRANCH" missed="6" covered="62"/><counter type="LINE" missed="2" covered="88"/><counter type="COMPLEXITY" missed="7" covered="43"/><counter type="METHOD" missed="1" covered="15"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="SquareRootCalculator.java"><line nr="45" mi="0" ci="3" mb="0" cb="0"/><line nr="57" mi="0" ci="4" mb="0" cb="0"/><line nr="59" mi="2" ci="0" mb="0" cb="0"/><line nr="60" mi="1" ci="0" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="78" mi="0" ci="11" mb="0" cb="2"/><line nr="79" mi="0" ci="9" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="1" ci="10" mb="1" cb="1"/><line nr="99" mi="0" ci="7" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="11" mb="0" cb="2"/><line nr="126" mi="0" ci="14" mb="0" cb="4"/><line nr="128" mi="0" ci="9" mb="0" cb="0"/><line nr="152" mi="0" ci="4" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="154" mi="1" ci="10" mb="1" cb="1"/><line nr="155" mi="0" ci="14" mb="0" cb="4"/><line nr="157" mi="0" ci="7" mb="0" cb="0"/><line nr="185" mi="0" ci="4" mb="0" cb="0"/><line nr="186" mi="0" ci="11" mb="0" cb="2"/><line nr="187" mi="0" ci="8" mb="0" cb="2"/><line nr="188" mi="0" ci="12" mb="0" cb="4"/><line nr="190" mi="0" ci="9" mb="0" cb="0"/><line nr="218" mi="0" ci="4" mb="0" cb="0"/><line nr="219" mi="1" ci="10" mb="1" cb="1"/><line nr="220" mi="0" ci="8" mb="0" cb="2"/><line nr="221" mi="0" ci="12" mb="0" cb="4"/><line nr="223" mi="0" ci="7" mb="0" cb="0"/><line nr="258" mi="0" ci="4" mb="0" cb="0"/><line nr="259" mi="0" ci="4" mb="0" cb="0"/><line nr="260" mi="0" ci="11" mb="0" cb="2"/><line nr="261" mi="0" ci="14" mb="0" cb="4"/><line nr="263" mi="0" ci="8" mb="0" cb="2"/><line nr="264" mi="0" ci="12" mb="0" cb="4"/><line nr="266" mi="0" ci="9" mb="0" cb="0"/><line nr="301" mi="0" ci="4" mb="0" cb="0"/><line nr="302" mi="0" ci="4" mb="0" cb="0"/><line nr="303" mi="1" ci="10" mb="1" cb="1"/><line nr="304" mi="0" ci="14" mb="0" cb="4"/><line nr="306" mi="0" ci="8" mb="0" cb="2"/><line nr="307" mi="0" ci="12" mb="0" cb="4"/><line nr="309" mi="0" ci="7" mb="0" cb="0"/><line nr="331" mi="0" ci="4" mb="0" cb="0"/><line nr="332" mi="1" ci="10" mb="1" cb="1"/><line nr="333" mi="0" ci="5" mb="0" cb="0"/><line nr="334" mi="0" ci="4" mb="0" cb="0"/><line nr="352" mi="0" ci="4" mb="0" cb="0"/><line nr="353" mi="1" ci="10" mb="1" cb="1"/><line nr="354" mi="0" ci="2" mb="0" cb="0"/><line nr="355" mi="0" ci="12" mb="0" cb="2"/><line nr="356" mi="0" ci="4" mb="0" cb="0"/><line nr="358" mi="0" ci="4" mb="0" cb="0"/><line nr="362" mi="0" ci="6" mb="0" cb="0"/><line nr="363" mi="0" ci="1" mb="0" cb="0"/><line nr="364" mi="0" ci="3" mb="0" cb="0"/><line nr="365" mi="0" ci="5" mb="0" cb="0"/><line nr="366" mi="0" ci="4" mb="0" cb="0"/><line nr="367" mi="0" ci="2" mb="0" cb="0"/><line nr="368" mi="0" ci="8" mb="0" cb="2"/><line nr="369" mi="0" ci="8" mb="0" cb="0"/><line nr="370" mi="0" ci="2" mb="0" cb="0"/><line nr="371" mi="0" ci="4" mb="0" cb="0"/><line nr="372" mi="0" ci="5" mb="0" cb="0"/><line nr="374" mi="0" ci="5" mb="0" cb="0"/><line nr="375" mi="0" ci="7" mb="0" cb="0"/><line nr="376" mi="0" ci="2" mb="0" cb="0"/><line nr="380" mi="0" ci="3" mb="0" cb="0"/><line nr="381" mi="0" ci="5" mb="0" cb="0"/><line nr="382" mi="0" ci="13" mb="0" cb="0"/><line nr="384" mi="0" ci="5" mb="0" cb="0"/><line nr="385" mi="0" ci="2" mb="0" cb="0"/><line nr="389" mi="0" ci="3" mb="0" cb="0"/><line nr="390" mi="0" ci="7" mb="0" cb="0"/><line nr="391" mi="0" ci="6" mb="0" cb="2"/><line nr="392" mi="0" ci="10" mb="0" cb="0"/><line nr="394" mi="0" ci="10" mb="0" cb="0"/><line nr="399" mi="0" ci="5" mb="0" cb="0"/><line nr="400" mi="0" ci="2" mb="0" cb="0"/><line nr="401" mi="0" ci="2" mb="0" cb="0"/><line nr="402" mi="0" ci="5" mb="0" cb="0"/><line nr="403" mi="0" ci="5" mb="0" cb="0"/><line nr="404" mi="0" ci="6" mb="0" cb="2"/><line nr="405" mi="0" ci="3" mb="0" cb="0"/><line nr="406" mi="0" ci="6" mb="0" cb="0"/><line nr="407" mi="0" ci="4" mb="0" cb="0"/><line nr="408" mi="0" ci="5" mb="0" cb="0"/><line nr="409" mi="0" ci="6" mb="0" cb="0"/><line nr="411" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="9" covered="579"/><counter type="BRANCH" missed="6" covered="62"/><counter type="LINE" missed="2" covered="88"/><counter type="COMPLEXITY" missed="7" covered="43"/><counter type="METHOD" missed="1" covered="15"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="MathRandom.java"><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="6" mb="0" cb="0"/><line nr="70" mi="0" ci="10" mb="0" cb="2"/><line nr="71" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="10" mb="0" cb="2"/><line nr="88" mi="0" ci="6" mb="0" cb="0"/><line nr="104" mi="0" ci="10" mb="0" cb="2"/><line nr="105" mi="0" ci="4" mb="0" cb="2"/><line nr="106" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="129" mi="1" ci="9" mb="1" cb="1"/><line nr="130" mi="0" ci="9" mb="0" cb="2"/><line nr="131" mi="0" ci="3" mb="0" cb="0"/><line nr="132" mi="0" ci="7" mb="0" cb="2"/><line nr="133" mi="0" ci="6" mb="0" cb="0"/><line nr="135" mi="0" ci="2" mb="0" cb="0"/><line nr="156" mi="1" ci="9" mb="1" cb="1"/><line nr="157" mi="0" ci="9" mb="0" cb="2"/><line nr="158" mi="0" ci="3" mb="0" cb="0"/><line nr="159" mi="0" ci="7" mb="0" cb="2"/><line nr="160" mi="0" ci="6" mb="0" cb="0"/><line nr="162" mi="0" ci="2" mb="0" cb="0"/><line nr="183" mi="1" ci="9" mb="1" cb="1"/><line nr="184" mi="0" ci="9" mb="0" cb="2"/><line nr="185" mi="0" ci="3" mb="0" cb="0"/><line nr="186" mi="0" ci="7" mb="0" cb="2"/><line nr="187" mi="0" ci="6" mb="0" cb="0"/><line nr="189" mi="0" ci="2" mb="0" cb="0"/><line nr="209" mi="0" ci="10" mb="0" cb="2"/><line nr="210" mi="0" ci="8" mb="0" cb="2"/><line nr="211" mi="0" ci="5" mb="0" cb="0"/><line nr="212" mi="0" ci="4" mb="1" cb="1"/><line nr="213" mi="3" ci="0" mb="0" cb="0"/><line nr="215" mi="0" ci="2" mb="0" cb="0"/><line nr="235" mi="0" ci="10" mb="0" cb="2"/><line nr="236" mi="0" ci="8" mb="0" cb="2"/><line nr="237" mi="0" ci="5" mb="0" cb="0"/><line nr="238" mi="0" ci="4" mb="1" cb="1"/><line nr="239" mi="0" ci="3" mb="0" cb="0"/><line nr="241" mi="2" ci="0" mb="0" cb="0"/><line nr="261" mi="0" ci="10" mb="0" cb="2"/><line nr="262" mi="0" ci="8" mb="0" cb="2"/><line nr="263" mi="0" ci="5" mb="0" cb="0"/><line nr="264" mi="0" ci="8" mb="0" cb="0"/><line nr="284" mi="1" ci="9" mb="1" cb="1"/><line nr="285" mi="1" ci="7" mb="1" cb="1"/><line nr="286" mi="0" ci="5" mb="0" cb="0"/><line nr="287" mi="0" ci="4" mb="1" cb="1"/><line nr="288" mi="3" ci="0" mb="0" cb="0"/><line nr="290" mi="0" ci="2" mb="0" cb="0"/><line nr="311" mi="10" ci="0" mb="2" cb="0"/><line nr="312" mi="8" ci="0" mb="2" cb="0"/><line nr="313" mi="5" ci="0" mb="0" cb="0"/><line nr="314" mi="4" ci="0" mb="2" cb="0"/><line nr="315" mi="3" ci="0" mb="0" cb="0"/><line nr="317" mi="2" ci="0" mb="0" cb="0"/><line nr="337" mi="1" ci="9" mb="1" cb="1"/><line nr="338" mi="1" ci="7" mb="1" cb="1"/><line nr="339" mi="0" ci="5" mb="0" cb="0"/><line nr="340" mi="0" ci="8" mb="0" cb="0"/><line nr="344" mi="0" ci="4" mb="0" cb="0"/><line nr="345" mi="1" ci="9" mb="1" cb="1"/><line nr="346" mi="0" ci="2" mb="0" cb="0"/><line nr="347" mi="0" ci="3" mb="0" cb="0"/><line nr="348" mi="0" ci="5" mb="1" cb="1"/><line nr="349" mi="0" ci="5" mb="1" cb="1"/><line nr="350" mi="5" ci="0" mb="0" cb="0"/><line nr="353" mi="6" ci="0" mb="2" cb="0"/><line nr="354" mi="5" ci="0" mb="0" cb="0"/><line nr="357" mi="0" ci="2" mb="0" cb="0"/><line nr="382" mi="0" ci="10" mb="0" cb="2"/><line nr="383" mi="0" ci="8" mb="0" cb="2"/><line nr="384" mi="0" ci="9" mb="0" cb="2"/><line nr="385" mi="0" ci="5" mb="0" cb="0"/><line nr="386" mi="0" ci="7" mb="0" cb="2"/><line nr="387" mi="0" ci="7" mb="0" cb="0"/><line nr="389" mi="0" ci="2" mb="0" cb="0"/><line nr="414" mi="0" ci="10" mb="0" cb="2"/><line nr="415" mi="0" ci="8" mb="0" cb="2"/><line nr="416" mi="0" ci="9" mb="0" cb="2"/><line nr="417" mi="0" ci="5" mb="0" cb="0"/><line nr="418" mi="0" ci="7" mb="0" cb="2"/><line nr="419" mi="0" ci="7" mb="0" cb="0"/><line nr="421" mi="0" ci="2" mb="0" cb="0"/><line nr="446" mi="0" ci="10" mb="0" cb="2"/><line nr="447" mi="0" ci="8" mb="0" cb="2"/><line nr="448" mi="0" ci="9" mb="0" cb="2"/><line nr="449" mi="0" ci="5" mb="0" cb="0"/><line nr="450" mi="0" ci="7" mb="0" cb="2"/><line nr="451" mi="0" ci="7" mb="0" cb="0"/><line nr="453" mi="0" ci="2" mb="0" cb="0"/><line nr="478" mi="10" ci="0" mb="2" cb="0"/><line nr="479" mi="8" ci="0" mb="2" cb="0"/><line nr="480" mi="9" ci="0" mb="2" cb="0"/><line nr="481" mi="5" ci="0" mb="0" cb="0"/><line nr="482" mi="7" ci="0" mb="2" cb="0"/><line nr="483" mi="7" ci="0" mb="0" cb="0"/><line nr="485" mi="2" ci="0" mb="0" cb="0"/><line nr="510" mi="10" ci="0" mb="2" cb="0"/><line nr="511" mi="8" ci="0" mb="2" cb="0"/><line nr="512" mi="9" ci="0" mb="2" cb="0"/><line nr="513" mi="5" ci="0" mb="0" cb="0"/><line nr="514" mi="7" ci="0" mb="2" cb="0"/><line nr="515" mi="7" ci="0" mb="0" cb="0"/><line nr="517" mi="2" ci="0" mb="0" cb="0"/><line nr="542" mi="10" ci="0" mb="2" cb="0"/><line nr="543" mi="8" ci="0" mb="2" cb="0"/><line nr="544" mi="9" ci="0" mb="2" cb="0"/><line nr="545" mi="5" ci="0" mb="0" cb="0"/><line nr="546" mi="7" ci="0" mb="2" cb="0"/><line nr="547" mi="7" ci="0" mb="0" cb="0"/><line nr="549" mi="2" ci="0" mb="0" cb="0"/><line nr="567" mi="0" ci="10" mb="0" cb="2"/><line nr="568" mi="0" ci="5" mb="0" cb="0"/><line nr="569" mi="0" ci="5" mb="0" cb="0"/><line nr="570" mi="0" ci="6" mb="0" cb="0"/><line nr="588" mi="0" ci="10" mb="0" cb="2"/><line nr="589" mi="0" ci="5" mb="0" cb="0"/><line nr="607" mi="0" ci="10" mb="0" cb="2"/><line nr="608" mi="0" ci="4" mb="0" cb="2"/><line nr="609" mi="0" ci="4" mb="0" cb="0"/><line nr="611" mi="0" ci="4" mb="0" cb="0"/><line nr="632" mi="0" ci="10" mb="0" cb="2"/><line nr="633" mi="0" ci="9" mb="0" cb="2"/><line nr="634" mi="0" ci="5" mb="0" cb="0"/><line nr="635" mi="0" ci="7" mb="0" cb="2"/><line nr="636" mi="0" ci="6" mb="0" cb="0"/><line nr="638" mi="0" ci="2" mb="0" cb="0"/><line nr="659" mi="0" ci="10" mb="0" cb="2"/><line nr="660" mi="0" ci="9" mb="0" cb="2"/><line nr="661" mi="0" ci="5" mb="0" cb="0"/><line nr="662" mi="0" ci="7" mb="0" cb="2"/><line nr="663" mi="0" ci="6" mb="0" cb="0"/><line nr="665" mi="0" ci="2" mb="0" cb="0"/><line nr="686" mi="0" ci="10" mb="0" cb="2"/><line nr="687" mi="0" ci="9" mb="0" cb="2"/><line nr="688" mi="0" ci="5" mb="0" cb="0"/><line nr="689" mi="0" ci="7" mb="0" cb="2"/><line nr="690" mi="0" ci="6" mb="0" cb="0"/><line nr="692" mi="0" ci="2" mb="0" cb="0"/><line nr="708" mi="1" ci="9" mb="1" cb="1"/><line nr="709" mi="0" ci="5" mb="0" cb="0"/><line nr="710" mi="0" ci="5" mb="0" cb="0"/><line nr="711" mi="0" ci="6" mb="0" cb="0"/><line nr="727" mi="1" ci="9" mb="1" cb="1"/><line nr="728" mi="0" ci="5" mb="0" cb="0"/><line nr="744" mi="1" ci="9" mb="1" cb="1"/><line nr="745" mi="0" ci="4" mb="0" cb="2"/><line nr="746" mi="0" ci="4" mb="0" cb="0"/><line nr="748" mi="0" ci="4" mb="0" cb="0"/><line nr="769" mi="1" ci="9" mb="1" cb="1"/><line nr="770" mi="1" ci="8" mb="1" cb="1"/><line nr="771" mi="0" ci="5" mb="0" cb="0"/><line nr="772" mi="0" ci="7" mb="0" cb="2"/><line nr="773" mi="0" ci="6" mb="0" cb="0"/><line nr="775" mi="0" ci="2" mb="0" cb="0"/><line nr="796" mi="10" ci="0" mb="2" cb="0"/><line nr="797" mi="9" ci="0" mb="2" cb="0"/><line nr="798" mi="5" ci="0" mb="0" cb="0"/><line nr="799" mi="7" ci="0" mb="2" cb="0"/><line nr="800" mi="6" ci="0" mb="0" cb="0"/><line nr="802" mi="2" ci="0" mb="0" cb="0"/><line nr="823" mi="10" ci="0" mb="2" cb="0"/><line nr="824" mi="9" ci="0" mb="2" cb="0"/><line nr="825" mi="5" ci="0" mb="0" cb="0"/><line nr="826" mi="7" ci="0" mb="2" cb="0"/><line nr="827" mi="6" ci="0" mb="0" cb="0"/><line nr="829" mi="2" ci="0" mb="0" cb="0"/><line nr="846" mi="0" ci="10" mb="0" cb="2"/><line nr="847" mi="0" ci="5" mb="0" cb="0"/><line nr="848" mi="0" ci="5" mb="0" cb="0"/><line nr="849" mi="0" ci="6" mb="0" cb="0"/><line nr="865" mi="1" ci="9" mb="1" cb="1"/><line nr="866" mi="0" ci="5" mb="0" cb="0"/><line nr="867" mi="0" ci="12" mb="0" cb="2"/><line nr="868" mi="0" ci="4" mb="0" cb="2"/><line nr="869" mi="0" ci="7" mb="0" cb="0"/><line nr="871" mi="0" ci="7" mb="0" cb="0"/><line nr="893" mi="0" ci="10" mb="0" cb="2"/><line nr="894" mi="0" ci="9" mb="0" cb="2"/><line nr="895" mi="0" ci="5" mb="0" cb="0"/><line nr="896" mi="0" ci="7" mb="0" cb="2"/><line nr="897" mi="0" ci="6" mb="0" cb="0"/><line nr="899" mi="0" ci="2" mb="0" cb="0"/><line nr="921" mi="10" ci="0" mb="2" cb="0"/><line nr="922" mi="9" ci="0" mb="2" cb="0"/><line nr="923" mi="5" ci="0" mb="0" cb="0"/><line nr="924" mi="7" ci="0" mb="2" cb="0"/><line nr="925" mi="6" ci="0" mb="0" cb="0"/><line nr="927" mi="2" ci="0" mb="0" cb="0"/><line nr="946" mi="0" ci="10" mb="0" cb="2"/><line nr="947" mi="0" ci="8" mb="0" cb="2"/><line nr="948" mi="0" ci="5" mb="0" cb="0"/><line nr="949" mi="0" ci="5" mb="0" cb="0"/><line nr="950" mi="0" ci="6" mb="0" cb="0"/><line nr="968" mi="1" ci="9" mb="1" cb="1"/><line nr="969" mi="1" ci="7" mb="1" cb="1"/><line nr="970" mi="0" ci="5" mb="0" cb="0"/><line nr="971" mi="0" ci="9" mb="0" cb="2"/><line nr="972" mi="0" ci="5" mb="0" cb="0"/><line nr="973" mi="0" ci="4" mb="0" cb="2"/><line nr="974" mi="0" ci="6" mb="0" cb="0"/><line nr="976" mi="0" ci="6" mb="0" cb="0"/><line nr="1000" mi="0" ci="10" mb="0" cb="2"/><line nr="1001" mi="0" ci="8" mb="0" cb="2"/><line nr="1002" mi="0" ci="9" mb="0" cb="2"/><line nr="1003" mi="0" ci="5" mb="0" cb="0"/><line nr="1004" mi="0" ci="7" mb="0" cb="2"/><line nr="1005" mi="0" ci="7" mb="0" cb="0"/><line nr="1007" mi="0" ci="2" mb="0" cb="0"/><line nr="1032" mi="10" ci="0" mb="2" cb="0"/><line nr="1033" mi="8" ci="0" mb="2" cb="0"/><line nr="1034" mi="9" ci="0" mb="2" cb="0"/><line nr="1035" mi="5" ci="0" mb="0" cb="0"/><line nr="1036" mi="7" ci="0" mb="2" cb="0"/><line nr="1037" mi="7" ci="0" mb="0" cb="0"/><line nr="1039" mi="2" ci="0" mb="0" cb="0"/><line nr="1059" mi="0" ci="10" mb="0" cb="2"/><line nr="1060" mi="0" ci="8" mb="0" cb="2"/><line nr="1061" mi="0" ci="3" mb="0" cb="0"/><line nr="1062" mi="0" ci="7" mb="0" cb="2"/><line nr="1063" mi="0" ci="7" mb="0" cb="0"/><line nr="1065" mi="0" ci="3" mb="0" cb="0"/><line nr="1088" mi="0" ci="10" mb="0" cb="2"/><line nr="1089" mi="0" ci="8" mb="0" cb="2"/><line nr="1090" mi="0" ci="9" mb="0" cb="2"/><line nr="1091" mi="0" ci="5" mb="0" cb="0"/><line nr="1092" mi="0" ci="7" mb="0" cb="2"/><line nr="1093" mi="0" ci="7" mb="0" cb="0"/><line nr="1095" mi="0" ci="2" mb="0" cb="0"/><line nr="1119" mi="0" ci="10" mb="0" cb="2"/><line nr="1120" mi="0" ci="8" mb="0" cb="2"/><line nr="1121" mi="0" ci="8" mb="0" cb="2"/><line nr="1122" mi="0" ci="4" mb="0" cb="0"/><line nr="1123" mi="0" ci="13" mb="0" cb="0"/><line nr="1124" mi="0" ci="13" mb="0" cb="0"/><line nr="1125" mi="0" ci="9" mb="0" cb="0"/><line nr="1126" mi="0" ci="1" mb="0" cb="0"/><line nr="1127" mi="0" ci="1" mb="0" cb="0"/><line nr="1128" mi="0" ci="3" mb="0" cb="0"/><line nr="1149" mi="0" ci="10" mb="0" cb="2"/><line nr="1150" mi="0" ci="8" mb="0" cb="2"/><line nr="1151" mi="0" ci="4" mb="0" cb="0"/><line nr="1152" mi="0" ci="13" mb="0" cb="0"/><line nr="1153" mi="0" ci="13" mb="0" cb="0"/><line nr="1154" mi="0" ci="5" mb="0" cb="2"/><line nr="1155" mi="0" ci="10" mb="0" cb="0"/><line nr="1157" mi="0" ci="6" mb="0" cb="0"/><line nr="1159" mi="0" ci="1" mb="0" cb="0"/><line nr="1160" mi="0" ci="1" mb="0" cb="0"/><line nr="1161" mi="0" ci="3" mb="0" cb="0"/><line nr="1182" mi="0" ci="10" mb="0" cb="2"/><line nr="1183" mi="0" ci="8" mb="0" cb="2"/><line nr="1184" mi="0" ci="4" mb="0" cb="0"/><line nr="1185" mi="0" ci="13" mb="0" cb="0"/><line nr="1186" mi="0" ci="13" mb="0" cb="0"/><line nr="1187" mi="0" ci="5" mb="0" cb="2"/><line nr="1188" mi="0" ci="10" mb="0" cb="0"/><line nr="1190" mi="0" ci="6" mb="0" cb="0"/><line nr="1192" mi="0" ci="1" mb="0" cb="0"/><line nr="1193" mi="0" ci="1" mb="0" cb="0"/><line nr="1194" mi="0" ci="3" mb="0" cb="0"/><line nr="1216" mi="0" ci="10" mb="0" cb="2"/><line nr="1217" mi="0" ci="8" mb="0" cb="2"/><line nr="1218" mi="0" ci="4" mb="0" cb="2"/><line nr="1219" mi="0" ci="5" mb="0" cb="0"/><line nr="1221" mi="0" ci="5" mb="0" cb="0"/><line nr="1241" mi="0" ci="10" mb="0" cb="2"/><line nr="1242" mi="0" ci="8" mb="0" cb="2"/><line nr="1243" mi="0" ci="4" mb="0" cb="0"/><line nr="1244" mi="0" ci="13" mb="0" cb="0"/><line nr="1245" mi="0" ci="13" mb="0" cb="0"/><line nr="1246" mi="0" ci="4" mb="0" cb="2"/><line nr="1247" mi="0" ci="10" mb="0" cb="0"/><line nr="1249" mi="0" ci="6" mb="0" cb="0"/><line nr="1251" mi="0" ci="1" mb="0" cb="0"/><line nr="1252" mi="0" ci="1" mb="0" cb="0"/><line nr="1253" mi="0" ci="3" mb="0" cb="0"/><line nr="1273" mi="0" ci="10" mb="0" cb="2"/><line nr="1274" mi="0" ci="8" mb="0" cb="2"/><line nr="1275" mi="0" ci="4" mb="0" cb="0"/><line nr="1276" mi="0" ci="13" mb="0" cb="0"/><line nr="1277" mi="0" ci="13" mb="0" cb="0"/><line nr="1278" mi="0" ci="5" mb="0" cb="0"/><line nr="1279" mi="0" ci="5" mb="0" cb="2"/><line nr="1280" mi="0" ci="6" mb="0" cb="0"/><line nr="1281" mi="0" ci="6" mb="0" cb="0"/><line nr="1283" mi="0" ci="4" mb="0" cb="2"/><line nr="1284" mi="0" ci="6" mb="0" cb="0"/><line nr="1286" mi="0" ci="1" mb="0" cb="0"/><line nr="1287" mi="0" ci="1" mb="0" cb="0"/><line nr="1288" mi="0" ci="3" mb="0" cb="0"/><line nr="1308" mi="0" ci="10" mb="0" cb="2"/><line nr="1309" mi="0" ci="8" mb="0" cb="2"/><line nr="1310" mi="0" ci="4" mb="0" cb="0"/><line nr="1311" mi="0" ci="13" mb="0" cb="0"/><line nr="1312" mi="0" ci="13" mb="0" cb="0"/><line nr="1313" mi="0" ci="5" mb="0" cb="2"/><line nr="1314" mi="0" ci="5" mb="0" cb="0"/><line nr="1315" mi="0" ci="6" mb="0" cb="0"/><line nr="1316" mi="0" ci="7" mb="0" cb="0"/><line nr="1318" mi="0" ci="4" mb="0" cb="2"/><line nr="1319" mi="0" ci="6" mb="0" cb="0"/><line nr="1321" mi="0" ci="1" mb="0" cb="0"/><line nr="1322" mi="0" ci="1" mb="0" cb="0"/><line nr="1323" mi="0" ci="3" mb="0" cb="0"/><line nr="1354" mi="0" ci="10" mb="0" cb="2"/><line nr="1355" mi="0" ci="8" mb="0" cb="2"/><line nr="1356" mi="0" ci="8" mb="0" cb="2"/><line nr="1357" mi="0" ci="9" mb="0" cb="2"/><line nr="1358" mi="0" ci="5" mb="0" cb="0"/><line nr="1359" mi="0" ci="7" mb="0" cb="2"/><line nr="1360" mi="0" ci="8" mb="0" cb="0"/><line nr="1362" mi="0" ci="2" mb="0" cb="0"/><line nr="1389" mi="0" ci="10" mb="0" cb="2"/><line nr="1390" mi="0" ci="8" mb="0" cb="2"/><line nr="1391" mi="0" ci="9" mb="0" cb="2"/><line nr="1392" mi="0" ci="5" mb="0" cb="0"/><line nr="1393" mi="0" ci="7" mb="0" cb="2"/><line nr="1394" mi="0" ci="7" mb="0" cb="0"/><line nr="1396" mi="0" ci="2" mb="0" cb="0"/><line nr="1423" mi="0" ci="10" mb="0" cb="2"/><line nr="1424" mi="0" ci="8" mb="0" cb="2"/><line nr="1425" mi="0" ci="9" mb="0" cb="2"/><line nr="1426" mi="0" ci="5" mb="0" cb="0"/><line nr="1427" mi="0" ci="7" mb="0" cb="2"/><line nr="1428" mi="0" ci="7" mb="0" cb="0"/><line nr="1430" mi="0" ci="2" mb="0" cb="0"/><line nr="1457" mi="0" ci="10" mb="0" cb="2"/><line nr="1458" mi="0" ci="8" mb="0" cb="2"/><line nr="1459" mi="0" ci="9" mb="0" cb="2"/><line nr="1460" mi="0" ci="5" mb="0" cb="0"/><line nr="1461" mi="0" ci="7" mb="0" cb="2"/><line nr="1462" mi="0" ci="7" mb="0" cb="0"/><line nr="1464" mi="0" ci="2" mb="0" cb="0"/><line nr="1491" mi="0" ci="10" mb="0" cb="2"/><line nr="1492" mi="0" ci="8" mb="0" cb="2"/><line nr="1493" mi="0" ci="9" mb="0" cb="2"/><line nr="1494" mi="0" ci="5" mb="0" cb="0"/><line nr="1495" mi="0" ci="7" mb="0" cb="2"/><line nr="1496" mi="0" ci="7" mb="0" cb="0"/><line nr="1498" mi="0" ci="2" mb="0" cb="0"/><line nr="1525" mi="0" ci="10" mb="0" cb="2"/><line nr="1526" mi="0" ci="8" mb="0" cb="2"/><line nr="1527" mi="0" ci="9" mb="0" cb="2"/><line nr="1528" mi="0" ci="5" mb="0" cb="0"/><line nr="1529" mi="0" ci="7" mb="0" cb="2"/><line nr="1530" mi="0" ci="7" mb="0" cb="0"/><line nr="1532" mi="0" ci="2" mb="0" cb="0"/><line nr="1559" mi="0" ci="10" mb="0" cb="2"/><line nr="1560" mi="0" ci="8" mb="0" cb="2"/><line nr="1561" mi="0" ci="9" mb="0" cb="2"/><line nr="1562" mi="0" ci="5" mb="0" cb="0"/><line nr="1563" mi="0" ci="7" mb="0" cb="2"/><line nr="1564" mi="0" ci="7" mb="0" cb="0"/><line nr="1566" mi="0" ci="2" mb="0" cb="0"/><line nr="1590" mi="0" ci="10" mb="0" cb="2"/><line nr="1591" mi="0" ci="8" mb="0" cb="2"/><line nr="1592" mi="0" ci="8" mb="0" cb="2"/><line nr="1593" mi="0" ci="3" mb="0" cb="0"/><line nr="1594" mi="0" ci="7" mb="0" cb="2"/><line nr="1595" mi="0" ci="7" mb="0" cb="0"/><line nr="1597" mi="0" ci="3" mb="0" cb="0"/><line nr="1629" mi="0" ci="10" mb="0" cb="2"/><line nr="1630" mi="0" ci="8" mb="0" cb="2"/><line nr="1631" mi="0" ci="8" mb="0" cb="2"/><line nr="1632" mi="0" ci="9" mb="0" cb="2"/><line nr="1633" mi="0" ci="5" mb="0" cb="0"/><line nr="1634" mi="0" ci="7" mb="0" cb="2"/><line nr="1635" mi="0" ci="8" mb="0" cb="0"/><line nr="1637" mi="0" ci="2" mb="0" cb="0"/><line nr="1665" mi="0" ci="10" mb="0" cb="2"/><line nr="1666" mi="0" ci="8" mb="0" cb="2"/><line nr="1667" mi="0" ci="8" mb="0" cb="2"/><line nr="1668" mi="0" ci="8" mb="0" cb="2"/><line nr="1669" mi="0" ci="4" mb="0" cb="0"/><line nr="1670" mi="0" ci="14" mb="0" cb="0"/><line nr="1671" mi="0" ci="14" mb="0" cb="0"/><line nr="1672" mi="0" ci="9" mb="0" cb="0"/><line nr="1673" mi="0" ci="1" mb="0" cb="0"/><line nr="1674" mi="0" ci="1" mb="0" cb="0"/><line nr="1675" mi="0" ci="3" mb="0" cb="0"/><line nr="1700" mi="0" ci="10" mb="0" cb="2"/><line nr="1701" mi="0" ci="8" mb="0" cb="2"/><line nr="1702" mi="0" ci="4" mb="0" cb="0"/><line nr="1703" mi="0" ci="14" mb="0" cb="0"/><line nr="1704" mi="0" ci="14" mb="0" cb="0"/><line nr="1705" mi="0" ci="5" mb="0" cb="2"/><line nr="1706" mi="0" ci="10" mb="0" cb="0"/><line nr="1708" mi="0" ci="6" mb="0" cb="0"/><line nr="1710" mi="0" ci="1" mb="0" cb="0"/><line nr="1711" mi="0" ci="1" mb="0" cb="0"/><line nr="1712" mi="0" ci="3" mb="0" cb="0"/><line nr="1737" mi="0" ci="10" mb="0" cb="2"/><line nr="1738" mi="0" ci="8" mb="0" cb="2"/><line nr="1739" mi="0" ci="4" mb="0" cb="0"/><line nr="1740" mi="0" ci="14" mb="0" cb="0"/><line nr="1741" mi="0" ci="14" mb="0" cb="0"/><line nr="1742" mi="0" ci="5" mb="0" cb="2"/><line nr="1743" mi="0" ci="10" mb="0" cb="0"/><line nr="1745" mi="0" ci="6" mb="0" cb="0"/><line nr="1747" mi="0" ci="1" mb="0" cb="0"/><line nr="1748" mi="0" ci="1" mb="0" cb="0"/><line nr="1749" mi="0" ci="3" mb="0" cb="0"/><line nr="1775" mi="0" ci="10" mb="0" cb="2"/><line nr="1776" mi="0" ci="8" mb="0" cb="2"/><line nr="1777" mi="0" ci="4" mb="0" cb="2"/><line nr="1778" mi="0" ci="6" mb="0" cb="0"/><line nr="1780" mi="0" ci="6" mb="0" cb="0"/><line nr="1804" mi="0" ci="10" mb="0" cb="2"/><line nr="1805" mi="0" ci="8" mb="0" cb="2"/><line nr="1806" mi="0" ci="4" mb="0" cb="0"/><line nr="1807" mi="0" ci="14" mb="0" cb="0"/><line nr="1808" mi="0" ci="14" mb="0" cb="0"/><line nr="1809" mi="0" ci="4" mb="0" cb="2"/><line nr="1810" mi="0" ci="10" mb="0" cb="0"/><line nr="1812" mi="0" ci="6" mb="0" cb="0"/><line nr="1814" mi="0" ci="1" mb="0" cb="0"/><line nr="1815" mi="0" ci="1" mb="0" cb="0"/><line nr="1816" mi="0" ci="3" mb="0" cb="0"/><line nr="1840" mi="0" ci="10" mb="0" cb="2"/><line nr="1841" mi="0" ci="8" mb="0" cb="2"/><line nr="1842" mi="0" ci="4" mb="0" cb="0"/><line nr="1843" mi="0" ci="14" mb="0" cb="0"/><line nr="1844" mi="0" ci="14" mb="0" cb="0"/><line nr="1845" mi="0" ci="5" mb="0" cb="0"/><line nr="1846" mi="0" ci="5" mb="0" cb="2"/><line nr="1847" mi="0" ci="6" mb="0" cb="0"/><line nr="1848" mi="0" ci="6" mb="0" cb="0"/><line nr="1850" mi="0" ci="4" mb="0" cb="2"/><line nr="1851" mi="0" ci="6" mb="0" cb="0"/><line nr="1853" mi="0" ci="1" mb="0" cb="0"/><line nr="1854" mi="0" ci="1" mb="0" cb="0"/><line nr="1855" mi="0" ci="3" mb="0" cb="0"/><line nr="1879" mi="0" ci="10" mb="0" cb="2"/><line nr="1880" mi="0" ci="8" mb="0" cb="2"/><line nr="1881" mi="0" ci="4" mb="0" cb="0"/><line nr="1882" mi="0" ci="14" mb="0" cb="0"/><line nr="1883" mi="0" ci="14" mb="0" cb="0"/><line nr="1884" mi="0" ci="5" mb="0" cb="2"/><line nr="1885" mi="0" ci="5" mb="0" cb="0"/><line nr="1886" mi="0" ci="6" mb="0" cb="0"/><line nr="1887" mi="0" ci="7" mb="0" cb="0"/><line nr="1889" mi="0" ci="4" mb="0" cb="2"/><line nr="1890" mi="0" ci="6" mb="0" cb="0"/><line nr="1892" mi="0" ci="1" mb="0" cb="0"/><line nr="1894" mi="0" ci="1" mb="0" cb="0"/><line nr="1895" mi="0" ci="3" mb="0" cb="0"/><line nr="1931" mi="0" ci="10" mb="0" cb="2"/><line nr="1932" mi="0" ci="8" mb="0" cb="2"/><line nr="1933" mi="0" ci="8" mb="0" cb="2"/><line nr="1934" mi="0" ci="8" mb="0" cb="2"/><line nr="1935" mi="0" ci="9" mb="0" cb="2"/><line nr="1936" mi="0" ci="5" mb="0" cb="0"/><line nr="1937" mi="0" ci="7" mb="0" cb="2"/><line nr="1938" mi="0" ci="9" mb="0" cb="0"/><line nr="1940" mi="0" ci="2" mb="0" cb="0"/><line nr="1972" mi="0" ci="10" mb="0" cb="2"/><line nr="1973" mi="0" ci="8" mb="0" cb="2"/><line nr="1974" mi="0" ci="8" mb="0" cb="2"/><line nr="1975" mi="0" ci="9" mb="0" cb="2"/><line nr="1976" mi="0" ci="5" mb="0" cb="0"/><line nr="1977" mi="0" ci="7" mb="0" cb="2"/><line nr="1978" mi="0" ci="8" mb="0" cb="0"/><line nr="1980" mi="0" ci="2" mb="0" cb="0"/><line nr="2012" mi="0" ci="10" mb="0" cb="2"/><line nr="2013" mi="0" ci="8" mb="0" cb="2"/><line nr="2014" mi="0" ci="8" mb="0" cb="2"/><line nr="2015" mi="0" ci="9" mb="0" cb="2"/><line nr="2016" mi="0" ci="5" mb="0" cb="0"/><line nr="2017" mi="0" ci="7" mb="0" cb="2"/><line nr="2018" mi="0" ci="8" mb="0" cb="0"/><line nr="2020" mi="0" ci="2" mb="0" cb="0"/><line nr="2052" mi="0" ci="10" mb="0" cb="2"/><line nr="2053" mi="0" ci="8" mb="0" cb="2"/><line nr="2054" mi="0" ci="8" mb="0" cb="2"/><line nr="2055" mi="0" ci="9" mb="0" cb="2"/><line nr="2056" mi="0" ci="5" mb="0" cb="0"/><line nr="2057" mi="0" ci="7" mb="0" cb="2"/><line nr="2058" mi="0" ci="8" mb="0" cb="0"/><line nr="2060" mi="0" ci="2" mb="0" cb="0"/><line nr="2092" mi="0" ci="10" mb="0" cb="2"/><line nr="2093" mi="0" ci="8" mb="0" cb="2"/><line nr="2094" mi="0" ci="8" mb="0" cb="2"/><line nr="2095" mi="0" ci="9" mb="0" cb="2"/><line nr="2096" mi="0" ci="5" mb="0" cb="0"/><line nr="2097" mi="0" ci="7" mb="0" cb="2"/><line nr="2098" mi="0" ci="8" mb="0" cb="0"/><line nr="2100" mi="0" ci="2" mb="0" cb="0"/><line nr="2132" mi="0" ci="10" mb="0" cb="2"/><line nr="2133" mi="0" ci="8" mb="0" cb="2"/><line nr="2134" mi="0" ci="8" mb="0" cb="2"/><line nr="2135" mi="0" ci="9" mb="0" cb="2"/><line nr="2136" mi="0" ci="5" mb="0" cb="0"/><line nr="2137" mi="0" ci="7" mb="0" cb="2"/><line nr="2138" mi="0" ci="8" mb="0" cb="0"/><line nr="2140" mi="0" ci="2" mb="0" cb="0"/><line nr="2172" mi="0" ci="10" mb="0" cb="2"/><line nr="2173" mi="0" ci="8" mb="0" cb="2"/><line nr="2174" mi="0" ci="8" mb="0" cb="2"/><line nr="2175" mi="0" ci="9" mb="0" cb="2"/><line nr="2176" mi="0" ci="5" mb="0" cb="0"/><line nr="2177" mi="0" ci="7" mb="0" cb="2"/><line nr="2178" mi="0" ci="8" mb="0" cb="0"/><line nr="2180" mi="0" ci="2" mb="0" cb="0"/><line nr="2185" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="389" covered="2959"/><counter type="BRANCH" missed="79" covered="391"/><counter type="LINE" missed="59" covered="447"/><counter type="COMPLEXITY" missed="59" covered="273"/><counter type="METHOD" missed="9" covered="88"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="398" covered="3538"/><counter type="BRANCH" missed="85" covered="453"/><counter type="LINE" missed="61" covered="535"/><counter type="COMPLEXITY" missed="66" covered="316"/><counter type="METHOD" missed="10" covered="103"/><counter type="CLASS" missed="0" covered="2"/></package><package name="finnmath/linear"><class name="finnmath/linear/AbstractVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="46"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="65"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="entries" desc="()Lcom/google/common/collect/ImmutableSet;" line="80"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="92"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="133"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="138"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Lcom/google/common/collect/ImmutableMap;" line="142"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="44"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/AbstractVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="37"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="74"><counter type="INSTRUCTION" missed="1" covered="25"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="81"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMap" desc="()Ljava/util/Map;" line="85"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSize" desc="()I" line="89"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="43"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="3" covered="8"/><counter type="COMPLEXITY" missed="6" covered="2"/><counter type="METHOD" missed="3" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/DecimalVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="41"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lfinnmath/linear/DecimalVector;)Lfinnmath/linear/DecimalVector;" line="57"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lfinnmath/linear/DecimalVector;)Lfinnmath/linear/DecimalVector;" line="79"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dotProduct" desc="(Lfinnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="103"><counter type="INSTRUCTION" missed="50" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lfinnmath/linear/DecimalVector;" line="126"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lfinnmath/linear/DecimalVector;" line="144"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="157"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="171"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="191"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(II)Ljava/math/BigDecimal;" line="217"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;" line="249"><counter type="INSTRUCTION" missed="45" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistancePow2" desc="(Lfinnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="276"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lfinnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="300"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lfinnmath/linear/DecimalVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="330"><counter type="INSTRUCTION" missed="44" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lfinnmath/linear/DecimalVector;II)Ljava/math/BigDecimal;" line="366"><counter type="INSTRUCTION" missed="47" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lfinnmath/linear/DecimalVector;Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;" line="409"><counter type="INSTRUCTION" missed="66" covered="0"/><counter type="BRANCH" missed="12" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="size" desc="()I" line="430"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;" line="443"><counter type="INSTRUCTION" missed="1" covered="13"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="449"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="454"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$2" desc="(Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="129"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;Lfinnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="83"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$0" desc="(Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;Lfinnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="61"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="473" covered="47"/><counter type="BRANCH" missed="63" covered="1"/><counter type="LINE" missed="71" covered="11"/><counter type="COMPLEXITY" missed="50" covered="5"/><counter type="METHOD" missed="18" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/AbstractMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="32"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="40"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getTable" desc="()Lcom/google/common/collect/Table;" line="44"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="11" covered="24"/><counter type="LINE" missed="2" covered="5"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="2" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/BigIntVector$BigIntVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="476"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/math/BigInteger;)Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;" line="495"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;)Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;" line="520"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigInteger;)Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;" line="539"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lfinnmath/linear/BigIntVector;" line="558"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/math/BigInteger;)V" line="559"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="108"/><counter type="BRANCH" missed="3" covered="5"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="3" covered="7"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/BigIntMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="43"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lfinnmath/linear/BigIntMatrix;)Lfinnmath/linear/BigIntMatrix;" line="64"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lfinnmath/linear/BigIntMatrix;)Lfinnmath/linear/BigIntMatrix;" line="96"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lfinnmath/linear/BigIntMatrix;)Lfinnmath/linear/BigIntMatrix;" line="127"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lfinnmath/linear/BigIntVector;)Lfinnmath/linear/BigIntVector;" line="158"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigInteger;" line="175"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lfinnmath/linear/BigIntMatrix;" line="201"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lfinnmath/linear/BigIntMatrix;" line="219"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigInteger;" line="231"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigInteger;" line="260"><counter type="INSTRUCTION" missed="9" covered="126"/><counter type="BRANCH" missed="1" covered="13"/><counter type="LINE" missed="1" covered="16"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigInteger;" line="285"><counter type="INSTRUCTION" missed="0" covered="177"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lfinnmath/linear/BigIntMatrix;" line="304"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lfinnmath/linear/BigIntMatrix;" line="334"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="364"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="386"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="409"><counter type="INSTRUCTION" missed="2" covered="29"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="432"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="447"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="454"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="459"><counter type="INSTRUCTION" missed="2" covered="17"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="342"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="306"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/math/BigInteger;Lcom/google/common/collect/Table$Cell;)V" line="204"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;Lfinnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="163"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;Ljava/lang/Integer;Lfinnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="164"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lfinnmath/linear/BigIntMatrix;Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="133"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="134"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lfinnmath/linear/BigIntMatrix;Lcom/google/common/collect/Table$Cell;)V" line="104"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lfinnmath/linear/BigIntMatrix;Lcom/google/common/collect/Table$Cell;)V" line="71"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="14" covered="1034"/><counter type="BRANCH" missed="4" covered="72"/><counter type="LINE" missed="3" covered="148"/><counter type="COMPLEXITY" missed="4" covered="63"/><counter type="METHOD" missed="0" covered="29"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/DecimalMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lfinnmath/linear/DecimalMatrix;)Lfinnmath/linear/DecimalMatrix;" line="63"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lfinnmath/linear/DecimalMatrix;)Lfinnmath/linear/DecimalMatrix;" line="95"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lfinnmath/linear/DecimalMatrix;)Lfinnmath/linear/DecimalMatrix;" line="126"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lfinnmath/linear/DecimalVector;)Lfinnmath/linear/DecimalVector;" line="157"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigDecimal;" line="174"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lfinnmath/linear/DecimalMatrix;" line="200"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lfinnmath/linear/DecimalMatrix;" line="218"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigDecimal;" line="230"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigDecimal;" line="259"><counter type="INSTRUCTION" missed="9" covered="144"/><counter type="BRANCH" missed="1" covered="13"/><counter type="LINE" missed="1" covered="18"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigDecimal;" line="286"><counter type="INSTRUCTION" missed="0" covered="188"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lfinnmath/linear/DecimalMatrix;" line="306"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lfinnmath/linear/DecimalMatrix;" line="336"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="366"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="388"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="411"><counter type="INSTRUCTION" missed="2" covered="29"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="434"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="449"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="456"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="461"><counter type="INSTRUCTION" missed="2" covered="17"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="344"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="308"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/math/BigDecimal;Lcom/google/common/collect/Table$Cell;)V" line="203"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;Lfinnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="162"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;Ljava/lang/Integer;Lfinnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="163"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lfinnmath/linear/DecimalMatrix;Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="132"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="133"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lfinnmath/linear/DecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="103"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lfinnmath/linear/DecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="70"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="14" covered="1056"/><counter type="BRANCH" missed="4" covered="70"/><counter type="LINE" missed="3" covered="151"/><counter type="COMPLEXITY" missed="4" covered="62"/><counter type="METHOD" missed="0" covered="29"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/AbstractMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="square" desc="()Z" line="86"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="triangular" desc="()Z" line="101"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diagonal" desc="()Z" line="120"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="symmetric" desc="()Z" line="139"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="skewSymmetric" desc="()Z" line="155"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="167"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="179"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Object;" line="203"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cells" desc="()Lcom/google/common/collect/ImmutableSet;" line="221"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="row" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="240"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="column" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="262"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rows" desc="()Lcom/google/common/collect/ImmutableMap;" line="276"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columns" desc="()Lcom/google/common/collect/ImmutableMap;" line="288"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="300"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()J" line="311"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rowSize" desc="()I" line="323"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnSize" desc="()I" line="335"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="340"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/ImmutableTable;" line="344"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="54" covered="147"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="8" covered="25"/><counter type="COMPLEXITY" missed="4" covered="25"/><counter type="METHOD" missed="3" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/DecimalVector$DecimalVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="474"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/math/BigDecimal;)Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;" line="493"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;)Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;" line="518"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigDecimal;)Lfinnmath/linear/DecimalVector$DecimalVectorBuilder;" line="537"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lfinnmath/linear/DecimalVector;" line="556"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/math/BigDecimal;)V" line="557"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="107"/><counter type="BRANCH" missed="3" covered="5"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="3" covered="7"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/BigIntMatrix$BigIntMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="478"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/math/BigInteger;)Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="494"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigInteger;)Lfinnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="506"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lfinnmath/linear/BigIntMatrix;" line="527"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="528"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/math/BigInteger;Ljava/lang/Integer;)V" line="508"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;Ljava/lang/Integer;)V" line="509"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="100"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/DecimalMatrix$DecimalMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="480"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/math/BigDecimal;)Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="484"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigDecimal;)Lfinnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="496"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lfinnmath/linear/DecimalMatrix;" line="517"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="518"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/math/BigDecimal;Ljava/lang/Integer;)V" line="498"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;Ljava/lang/Integer;)V" line="499"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="100"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/linear/BigIntVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lfinnmath/linear/BigIntVector;)Lfinnmath/linear/BigIntVector;" line="58"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lfinnmath/linear/BigIntVector;)Lfinnmath/linear/BigIntVector;" line="81"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lfinnmath/linear/BigIntVector;" line="104"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lfinnmath/linear/BigIntVector;" line="122"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="135"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="149"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="169"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(II)Ljava/math/BigDecimal;" line="195"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;" line="227"><counter type="INSTRUCTION" missed="41" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dotProduct" desc="(Lfinnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="250"><counter type="INSTRUCTION" missed="50" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistancePow2" desc="(Lfinnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="278"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lfinnmath/linear/BigIntVector;)Ljava/math/BigDecimal;" line="302"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lfinnmath/linear/BigIntVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="332"><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lfinnmath/linear/BigIntVector;II)Ljava/math/BigDecimal;" line="368"><counter type="INSTRUCTION" missed="45" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lfinnmath/linear/BigIntVector;Ljava/math/BigDecimal;II)Ljava/math/BigDecimal;" line="411"><counter type="INSTRUCTION" missed="63" covered="0"/><counter type="BRANCH" missed="12" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="size" desc="()I" line="432"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;" line="445"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="451"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="456"><counter type="INSTRUCTION" missed="2" covered="17"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="107"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;Lfinnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="86"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lfinnmath/linear/BigIntVector$BigIntVectorBuilder;Lfinnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="63"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="351" covered="168"/><counter type="BRANCH" missed="55" covered="9"/><counter type="LINE" missed="49" covered="34"/><counter type="COMPLEXITY" missed="39" covered="16"/><counter type="METHOD" missed="11" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="DecimalMatrix.java"><line nr="42" mi="0" ci="3" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="64" mi="0" ci="14" mb="0" cb="2"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="66" mi="0" ci="14" mb="0" cb="2"/><line nr="67" mi="0" ci="4" mb="0" cb="0"/><line nr="68" mi="0" ci="6" mb="0" cb="0"/><line nr="69" mi="0" ci="7" mb="0" cb="0"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="4" mb="0" cb="0"/><line nr="72" mi="0" ci="14" mb="0" cb="0"/><line nr="73" mi="0" ci="1" mb="0" cb="0"/><line nr="74" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="4" mb="0" cb="0"/><line nr="96" mi="0" ci="14" mb="0" cb="2"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="0" ci="14" mb="0" cb="2"/><line nr="99" mi="0" ci="3" mb="0" cb="0"/><line nr="100" mi="0" ci="1" mb="0" cb="0"/><line nr="101" mi="0" ci="6" mb="0" cb="0"/><line nr="102" mi="0" ci="7" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="14" mb="0" cb="0"/><line nr="106" mi="0" ci="1" mb="0" cb="0"/><line nr="107" mi="0" ci="3" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="127" mi="0" ci="14" mb="0" cb="2"/><line nr="128" mi="0" ci="3" mb="0" cb="0"/><line nr="129" mi="0" ci="1" mb="0" cb="0"/><line nr="130" mi="0" ci="8" mb="0" cb="0"/><line nr="131" mi="0" ci="8" mb="0" cb="0"/><line nr="132" mi="0" ci="8" mb="0" cb="0"/><line nr="133" mi="0" ci="5" mb="0" cb="0"/><line nr="134" mi="0" ci="6" mb="0" cb="0"/><line nr="135" mi="0" ci="1" mb="0" cb="0"/><line nr="136" mi="0" ci="1" mb="0" cb="0"/><line nr="137" mi="0" ci="3" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="0" ci="14" mb="0" cb="2"/><line nr="159" mi="0" ci="4" mb="0" cb="0"/><line nr="160" mi="0" ci="6" mb="0" cb="0"/><line nr="161" mi="0" ci="7" mb="0" cb="0"/><line nr="162" mi="0" ci="6" mb="0" cb="0"/><line nr="163" mi="0" ci="9" mb="0" cb="2"/><line nr="164" mi="0" ci="2" mb="0" cb="0"/><line nr="165" mi="0" ci="12" mb="0" cb="0"/><line nr="166" mi="0" ci="1" mb="0" cb="0"/><line nr="167" mi="0" ci="1" mb="0" cb="0"/><line nr="168" mi="0" ci="3" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="4" mb="0" cb="0"/><line nr="176" mi="1" ci="12" mb="1" cb="1"/><line nr="177" mi="0" ci="1" mb="0" cb="0"/><line nr="178" mi="0" ci="2" mb="0" cb="0"/><line nr="179" mi="0" ci="11" mb="0" cb="2"/><line nr="180" mi="0" ci="12" mb="0" cb="0"/><line nr="181" mi="0" ci="1" mb="0" cb="0"/><line nr="182" mi="0" ci="2" mb="0" cb="0"/><line nr="200" mi="0" ci="4" mb="0" cb="0"/><line nr="201" mi="0" ci="10" mb="0" cb="0"/><line nr="202" mi="0" ci="7" mb="0" cb="0"/><line nr="203" mi="0" ci="14" mb="0" cb="0"/><line nr="204" mi="0" ci="1" mb="0" cb="0"/><line nr="205" mi="0" ci="3" mb="0" cb="0"/><line nr="218" mi="0" ci="5" mb="0" cb="0"/><line nr="230" mi="0" ci="10" mb="0" cb="0"/><line nr="231" mi="0" ci="2" mb="0" cb="0"/><line nr="232" mi="0" ci="2" mb="0" cb="0"/><line nr="233" mi="0" ci="12" mb="0" cb="2"/><line nr="234" mi="0" ci="9" mb="0" cb="0"/><line nr="235" mi="0" ci="1" mb="0" cb="0"/><line nr="236" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="15" mb="0" cb="2"/><line nr="260" mi="0" ci="13" mb="0" cb="2"/><line nr="261" mi="0" ci="2" mb="0" cb="0"/><line nr="262" mi="0" ci="10" mb="0" cb="0"/><line nr="263" mi="0" ci="2" mb="0" cb="0"/><line nr="264" mi="0" ci="10" mb="0" cb="0"/><line nr="265" mi="0" ci="3" mb="0" cb="2"/><line nr="266" mi="0" ci="4" mb="0" cb="0"/><line nr="267" mi="0" ci="12" mb="0" cb="2"/><line nr="268" mi="0" ci="7" mb="0" cb="2"/><line nr="269" mi="0" ci="6" mb="0" cb="0"/><line nr="271" mi="0" ci="1" mb="0" cb="0"/><line nr="272" mi="0" ci="5" mb="0" cb="0"/><line nr="274" mi="0" ci="6" mb="0" cb="2"/><line nr="275" mi="0" ci="3" mb="0" cb="0"/><line nr="277" mi="0" ci="6" mb="1" cb="1"/><line nr="278" mi="0" ci="38" mb="0" cb="0"/><line nr="279" mi="0" ci="1" mb="0" cb="0"/><line nr="281" mi="9" ci="0" mb="0" cb="0"/><line nr="286" mi="0" ci="27" mb="0" cb="0"/><line nr="287" mi="0" ci="27" mb="0" cb="0"/><line nr="288" mi="0" ci="27" mb="0" cb="0"/><line nr="289" mi="0" ci="28" mb="0" cb="0"/><line nr="290" mi="0" ci="28" mb="0" cb="0"/><line nr="291" mi="0" ci="28" mb="0" cb="0"/><line nr="292" mi="0" ci="15" mb="0" cb="0"/><line nr="293" mi="0" ci="8" mb="0" cb="0"/><line nr="306" mi="0" ci="10" mb="0" cb="0"/><line nr="307" mi="0" ci="6" mb="0" cb="0"/><line nr="308" mi="0" ci="12" mb="0" cb="0"/><line nr="309" mi="0" ci="1" mb="0" cb="0"/><line nr="310" mi="0" ci="3" mb="0" cb="0"/><line nr="336" mi="0" ci="4" mb="0" cb="0"/><line nr="337" mi="0" ci="4" mb="0" cb="0"/><line nr="338" mi="0" ci="8" mb="0" cb="0"/><line nr="339" mi="0" ci="3" mb="0" cb="0"/><line nr="340" mi="0" ci="8" mb="0" cb="0"/><line nr="341" mi="0" ci="3" mb="0" cb="0"/><line nr="342" mi="0" ci="14" mb="0" cb="0"/><line nr="343" mi="0" ci="8" mb="0" cb="0"/><line nr="344" mi="0" ci="4" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="0" cb="0"/><line nr="346" mi="0" ci="8" mb="0" cb="4"/><line nr="347" mi="0" ci="14" mb="0" cb="2"/><line nr="348" mi="0" ci="14" mb="0" cb="2"/><line nr="349" mi="0" ci="8" mb="0" cb="0"/><line nr="351" mi="0" ci="1" mb="0" cb="0"/><line nr="352" mi="0" ci="3" mb="0" cb="0"/><line nr="366" mi="0" ci="3" mb="0" cb="2"/><line nr="367" mi="0" ci="12" mb="0" cb="2"/><line nr="368" mi="0" ci="15" mb="0" cb="4"/><line nr="369" mi="0" ci="2" mb="0" cb="0"/><line nr="371" mi="0" ci="1" mb="0" cb="0"/><line nr="372" mi="0" ci="2" mb="0" cb="0"/><line nr="374" mi="0" ci="2" mb="0" cb="0"/><line nr="388" mi="0" ci="3" mb="0" cb="2"/><line nr="389" mi="0" ci="12" mb="0" cb="2"/><line nr="390" mi="0" ci="15" mb="0" cb="4"/><line nr="391" mi="0" ci="2" mb="0" cb="0"/><line nr="393" mi="0" ci="1" mb="0" cb="0"/><line nr="394" mi="0" ci="2" mb="0" cb="0"/><line nr="396" mi="0" ci="2" mb="0" cb="0"/><line nr="411" mi="0" ci="3" mb="0" cb="2"/><line nr="412" mi="0" ci="12" mb="0" cb="2"/><line nr="413" mi="0" ci="9" mb="1" cb="1"/><line nr="414" mi="2" ci="0" mb="0" cb="0"/><line nr="416" mi="0" ci="1" mb="0" cb="0"/><line nr="417" mi="0" ci="2" mb="0" cb="0"/><line nr="419" mi="0" ci="2" mb="0" cb="0"/><line nr="434" mi="0" ci="9" mb="0" cb="2"/><line nr="449" mi="0" ci="8" mb="0" cb="2"/><line nr="450" mi="0" ci="8" mb="0" cb="2"/><line nr="451" mi="0" ci="6" mb="0" cb="0"/><line nr="456" mi="0" ci="9" mb="0" cb="0"/><line nr="461" mi="0" ci="3" mb="1" cb="1"/><line nr="462" mi="2" ci="0" mb="0" cb="0"/><line nr="464" mi="0" ci="3" mb="0" cb="2"/><line nr="465" mi="0" ci="2" mb="0" cb="0"/><line nr="467" mi="0" ci="3" mb="0" cb="0"/><line nr="468" mi="0" ci="6" mb="0" cb="0"/><line nr="480" mi="0" ci="4" mb="0" cb="0"/><line nr="481" mi="0" ci="1" mb="0" cb="0"/><line nr="484" mi="0" ci="4" mb="0" cb="0"/><line nr="485" mi="0" ci="4" mb="0" cb="0"/><line nr="486" mi="0" ci="4" mb="0" cb="0"/><line nr="487" mi="0" ci="9" mb="0" cb="0"/><line nr="488" mi="0" ci="3" mb="0" cb="0"/><line nr="489" mi="0" ci="9" mb="0" cb="0"/><line nr="490" mi="0" ci="3" mb="0" cb="0"/><line nr="491" mi="0" ci="7" mb="0" cb="0"/><line nr="492" mi="0" ci="2" mb="0" cb="0"/><line nr="496" mi="0" ci="4" mb="0" cb="0"/><line nr="497" mi="0" ci="7" mb="0" cb="0"/><line nr="498" mi="0" ci="8" mb="0" cb="0"/><line nr="499" mi="0" ci="7" mb="0" cb="0"/><line nr="500" mi="0" ci="1" mb="0" cb="0"/><line nr="501" mi="0" ci="1" mb="0" cb="0"/><line nr="502" mi="0" ci="2" mb="0" cb="0"/><line nr="517" mi="0" ci="5" mb="0" cb="0"/><line nr="518" mi="0" ci="6" mb="0" cb="0"/><line nr="519" mi="0" ci="1" mb="0" cb="0"/><line nr="520" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="14" covered="1156"/><counter type="BRANCH" missed="4" covered="70"/><counter type="LINE" missed="3" covered="173"/><counter type="COMPLEXITY" missed="4" covered="69"/><counter type="METHOD" missed="0" covered="36"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractVector.java"><line nr="46" mi="0" ci="2" mb="0" cb="0"/><line nr="47" mi="0" ci="3" mb="0" cb="0"/><line nr="48" mi="0" ci="1" mb="0" cb="0"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="66" mi="0" ci="10" mb="0" cb="0"/><line nr="67" mi="0" ci="5" mb="0" cb="0"/><line nr="80" mi="0" ci="4" mb="0" cb="0"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="4" ci="0" mb="0" cb="0"/><line nr="138" mi="0" ci="8" mb="0" cb="0"/><line nr="142" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="44"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractMatrixBuilder.java"><line nr="32" mi="0" ci="2" mb="0" cb="0"/><line nr="33" mi="0" ci="8" mb="0" cb="0"/><line nr="34" mi="0" ci="8" mb="0" cb="0"/><line nr="35" mi="0" ci="5" mb="0" cb="0"/><line nr="36" mi="0" ci="1" mb="0" cb="0"/><line nr="40" mi="8" ci="0" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="24"/><counter type="LINE" missed="2" covered="5"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="2" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigIntVector.java"><line nr="42" mi="0" ci="3" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="0"/><line nr="59" mi="0" ci="15" mb="0" cb="2"/><line nr="60" mi="0" ci="1" mb="0" cb="0"/><line nr="61" mi="0" ci="5" mb="0" cb="0"/><line nr="62" mi="0" ci="6" mb="0" cb="0"/><line nr="63" mi="0" ci="9" mb="0" cb="0"/><line nr="64" mi="0" ci="1" mb="0" cb="0"/><line nr="65" mi="0" ci="3" mb="0" cb="0"/><line nr="81" mi="0" ci="4" mb="0" cb="0"/><line nr="82" mi="0" ci="15" mb="0" cb="2"/><line nr="83" mi="0" ci="1" mb="0" cb="0"/><line nr="84" mi="0" ci="5" mb="0" cb="0"/><line nr="85" mi="0" ci="6" mb="0" cb="0"/><line nr="86" mi="0" ci="9" mb="0" cb="0"/><line nr="87" mi="0" ci="1" mb="0" cb="0"/><line nr="88" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="5" mb="0" cb="0"/><line nr="106" mi="0" ci="7" mb="0" cb="0"/><line nr="107" mi="0" ci="6" mb="0" cb="0"/><line nr="108" mi="0" ci="1" mb="0" cb="0"/><line nr="109" mi="0" ci="3" mb="0" cb="0"/><line nr="122" mi="0" ci="5" mb="0" cb="0"/><line nr="135" mi="4" ci="0" mb="0" cb="0"/><line nr="149" mi="4" ci="0" mb="0" cb="0"/><line nr="169" mi="4" ci="0" mb="0" cb="0"/><line nr="170" mi="14" ci="0" mb="4" cb="0"/><line nr="172" mi="5" ci="0" mb="0" cb="0"/><line nr="195" mi="8" ci="0" mb="2" cb="0"/><line nr="196" mi="12" ci="0" mb="4" cb="0"/><line nr="198" mi="6" ci="0" mb="0" cb="0"/><line nr="227" mi="14" ci="0" mb="4" cb="0"/><line nr="229" mi="8" ci="0" mb="2" cb="0"/><line nr="230" mi="12" ci="0" mb="4" cb="0"/><line nr="232" mi="7" ci="0" mb="0" cb="0"/><line nr="250" mi="4" ci="0" mb="0" cb="0"/><line nr="251" mi="15" ci="0" mb="2" cb="0"/><line nr="252" mi="1" ci="0" mb="0" cb="0"/><line nr="253" mi="2" ci="0" mb="0" cb="0"/><line nr="254" mi="12" ci="0" mb="2" cb="0"/><line nr="255" mi="13" ci="0" mb="0" cb="0"/><line nr="256" mi="1" ci="0" mb="0" cb="0"/><line nr="257" mi="2" ci="0" mb="0" cb="0"/><line nr="278" mi="4" ci="0" mb="0" cb="0"/><line nr="279" mi="15" ci="0" mb="2" cb="0"/><line nr="280" mi="1" ci="0" mb="0" cb="0"/><line nr="281" mi="5" ci="0" mb="0" cb="0"/><line nr="302" mi="4" ci="0" mb="0" cb="0"/><line nr="303" mi="15" ci="0" mb="2" cb="0"/><line nr="304" mi="1" ci="0" mb="0" cb="0"/><line nr="305" mi="5" ci="0" mb="0" cb="0"/><line nr="332" mi="4" ci="0" mb="0" cb="0"/><line nr="333" mi="15" ci="0" mb="2" cb="0"/><line nr="334" mi="1" ci="0" mb="0" cb="0"/><line nr="335" mi="4" ci="0" mb="0" cb="0"/><line nr="336" mi="14" ci="0" mb="4" cb="0"/><line nr="338" mi="5" ci="0" mb="0" cb="0"/><line nr="368" mi="4" ci="0" mb="0" cb="0"/><line nr="369" mi="15" ci="0" mb="2" cb="0"/><line nr="370" mi="1" ci="0" mb="0" cb="0"/><line nr="371" mi="8" ci="0" mb="2" cb="0"/><line nr="372" mi="12" ci="0" mb="4" cb="0"/><line nr="374" mi="5" ci="0" mb="0" cb="0"/><line nr="411" mi="4" ci="0" mb="0" cb="0"/><line nr="412" mi="15" ci="0" mb="2" cb="0"/><line nr="413" mi="1" ci="0" mb="0" cb="0"/><line nr="414" mi="4" ci="0" mb="0" cb="0"/><line nr="415" mi="14" ci="0" mb="4" cb="0"/><line nr="417" mi="8" ci="0" mb="2" cb="0"/><line nr="418" mi="12" ci="0" mb="4" cb="0"/><line nr="420" mi="5" ci="0" mb="0" cb="0"/><line nr="432" mi="0" ci="4" mb="0" cb="0"/><line nr="445" mi="0" ci="8" mb="0" cb="2"/><line nr="446" mi="0" ci="7" mb="0" cb="0"/><line nr="451" mi="0" ci="9" mb="0" cb="0"/><line nr="456" mi="0" ci="3" mb="1" cb="1"/><line nr="457" mi="2" ci="0" mb="0" cb="0"/><line nr="459" mi="0" ci="3" mb="0" cb="2"/><line nr="460" mi="0" ci="2" mb="0" cb="0"/><line nr="462" mi="0" ci="3" mb="0" cb="0"/><line nr="463" mi="0" ci="6" mb="0" cb="0"/><line nr="476" mi="0" ci="4" mb="0" cb="0"/><line nr="477" mi="0" ci="1" mb="0" cb="0"/><line nr="495" mi="0" ci="4" mb="0" cb="0"/><line nr="496" mi="0" ci="6" mb="0" cb="0"/><line nr="497" mi="1" ci="13" mb="1" cb="1"/><line nr="498" mi="0" ci="7" mb="0" cb="0"/><line nr="499" mi="0" ci="2" mb="0" cb="0"/><line nr="520" mi="0" ci="4" mb="0" cb="0"/><line nr="521" mi="0" ci="4" mb="0" cb="0"/><line nr="522" mi="1" ci="16" mb="2" cb="2"/><line nr="523" mi="0" ci="6" mb="0" cb="0"/><line nr="524" mi="0" ci="2" mb="0" cb="0"/><line nr="539" mi="0" ci="4" mb="0" cb="0"/><line nr="540" mi="0" ci="8" mb="0" cb="2"/><line nr="541" mi="0" ci="7" mb="0" cb="0"/><line nr="543" mi="0" ci="2" mb="0" cb="0"/><line nr="558" mi="0" ci="5" mb="0" cb="0"/><line nr="559" mi="0" ci="4" mb="0" cb="0"/><line nr="560" mi="0" ci="1" mb="0" cb="0"/><line nr="561" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="353" covered="276"/><counter type="BRANCH" missed="58" covered="14"/><counter type="LINE" missed="49" covered="54"/><counter type="COMPLEXITY" missed="42" covered="23"/><counter type="METHOD" missed="11" covered="18"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractVectorBuilder.java"><line nr="37" mi="0" ci="5" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="1" ci="7" mb="1" cb="1"/><line nr="56" mi="0" ci="3" mb="0" cb="0"/><line nr="57" mi="0" ci="1" mb="0" cb="0"/><line nr="74" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="1" ci="16" mb="2" cb="2"/><line nr="76" mi="0" ci="5" mb="0" cb="0"/><line nr="81" mi="12" ci="0" mb="0" cb="0"/><line nr="85" mi="3" ci="0" mb="0" cb="0"/><line nr="89" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="20" covered="43"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="3" covered="8"/><counter type="COMPLEXITY" missed="6" covered="2"/><counter type="METHOD" missed="3" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractMatrix.java"><line nr="48" mi="0" ci="2" mb="0" cb="0"/><line nr="49" mi="0" ci="3" mb="0" cb="0"/><line nr="50" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="13" mb="0" cb="2"/><line nr="101" mi="0" ci="10" mb="0" cb="4"/><line nr="120" mi="0" ci="10" mb="1" cb="3"/><line nr="139" mi="0" ci="12" mb="0" cb="4"/><line nr="155" mi="0" ci="13" mb="0" cb="4"/><line nr="167" mi="0" ci="4" mb="0" cb="0"/><line nr="179" mi="0" ci="4" mb="0" cb="0"/><line nr="203" mi="0" ci="4" mb="0" cb="0"/><line nr="204" mi="0" ci="4" mb="0" cb="0"/><line nr="205" mi="0" ci="9" mb="0" cb="0"/><line nr="206" mi="0" ci="3" mb="0" cb="0"/><line nr="207" mi="0" ci="9" mb="0" cb="0"/><line nr="208" mi="0" ci="3" mb="0" cb="0"/><line nr="209" mi="0" ci="6" mb="0" cb="0"/><line nr="221" mi="0" ci="4" mb="0" cb="0"/><line nr="240" mi="4" ci="0" mb="0" cb="0"/><line nr="241" mi="9" ci="0" mb="0" cb="0"/><line nr="242" mi="3" ci="0" mb="0" cb="0"/><line nr="243" mi="5" ci="0" mb="0" cb="0"/><line nr="262" mi="9" ci="0" mb="0" cb="0"/><line nr="263" mi="3" ci="0" mb="0" cb="0"/><line nr="264" mi="5" ci="0" mb="0" cb="0"/><line nr="276" mi="0" ci="4" mb="0" cb="0"/><line nr="288" mi="0" ci="4" mb="0" cb="0"/><line nr="300" mi="0" ci="4" mb="0" cb="0"/><line nr="311" mi="16" ci="0" mb="0" cb="0"/><line nr="323" mi="0" ci="5" mb="0" cb="0"/><line nr="335" mi="0" ci="5" mb="0" cb="0"/><line nr="340" mi="0" ci="8" mb="0" cb="0"/><line nr="344" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="54" covered="147"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="8" covered="25"/><counter type="COMPLEXITY" missed="4" covered="25"/><counter type="METHOD" missed="3" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="DecimalVector.java"><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="0" ci="1" mb="0" cb="0"/><line nr="57" mi="15" ci="0" mb="2" cb="0"/><line nr="58" mi="1" ci="0" mb="0" cb="0"/><line nr="59" mi="5" ci="0" mb="0" cb="0"/><line nr="60" mi="6" ci="0" mb="0" cb="0"/><line nr="61" mi="9" ci="0" mb="0" cb="0"/><line nr="62" mi="1" ci="0" mb="0" cb="0"/><line nr="63" mi="3" ci="0" mb="0" cb="0"/><line nr="79" mi="15" ci="0" mb="2" cb="0"/><line nr="80" mi="1" ci="0" mb="0" cb="0"/><line nr="81" mi="5" ci="0" mb="0" cb="0"/><line nr="82" mi="6" ci="0" mb="0" cb="0"/><line nr="83" mi="9" ci="0" mb="0" cb="0"/><line nr="84" mi="1" ci="0" mb="0" cb="0"/><line nr="85" mi="3" ci="0" mb="0" cb="0"/><line nr="103" mi="4" ci="0" mb="0" cb="0"/><line nr="104" mi="15" ci="0" mb="2" cb="0"/><line nr="105" mi="1" ci="0" mb="0" cb="0"/><line nr="106" mi="2" ci="0" mb="0" cb="0"/><line nr="107" mi="12" ci="0" mb="2" cb="0"/><line nr="108" mi="13" ci="0" mb="0" cb="0"/><line nr="109" mi="1" ci="0" mb="0" cb="0"/><line nr="110" mi="2" ci="0" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="127" mi="0" ci="5" mb="0" cb="0"/><line nr="128" mi="0" ci="7" mb="0" cb="0"/><line nr="129" mi="0" ci="6" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><line nr="131" mi="0" ci="3" mb="0" cb="0"/><line nr="144" mi="5" ci="0" mb="0" cb="0"/><line nr="157" mi="4" ci="0" mb="0" cb="0"/><line nr="171" mi="4" ci="0" mb="0" cb="0"/><line nr="191" mi="4" ci="0" mb="0" cb="0"/><line nr="192" mi="14" ci="0" mb="4" cb="0"/><line nr="194" mi="5" ci="0" mb="0" cb="0"/><line nr="217" mi="8" ci="0" mb="2" cb="0"/><line nr="218" mi="12" ci="0" mb="4" cb="0"/><line nr="220" mi="6" ci="0" mb="0" cb="0"/><line nr="249" mi="4" ci="0" mb="0" cb="0"/><line nr="250" mi="14" ci="0" mb="4" cb="0"/><line nr="252" mi="8" ci="0" mb="2" cb="0"/><line nr="253" mi="12" ci="0" mb="4" cb="0"/><line nr="255" mi="7" ci="0" mb="0" cb="0"/><line nr="276" mi="4" ci="0" mb="0" cb="0"/><line nr="277" mi="15" ci="0" mb="2" cb="0"/><line nr="278" mi="1" ci="0" mb="0" cb="0"/><line nr="279" mi="5" ci="0" mb="0" cb="0"/><line nr="300" mi="4" ci="0" mb="0" cb="0"/><line nr="301" mi="15" ci="0" mb="2" cb="0"/><line nr="302" mi="1" ci="0" mb="0" cb="0"/><line nr="303" mi="5" ci="0" mb="0" cb="0"/><line nr="330" mi="4" ci="0" mb="0" cb="0"/><line nr="331" mi="15" ci="0" mb="2" cb="0"/><line nr="332" mi="1" ci="0" mb="0" cb="0"/><line nr="333" mi="4" ci="0" mb="0" cb="0"/><line nr="334" mi="14" ci="0" mb="4" cb="0"/><line nr="336" mi="6" ci="0" mb="0" cb="0"/><line nr="366" mi="4" ci="0" mb="0" cb="0"/><line nr="367" mi="15" ci="0" mb="2" cb="0"/><line nr="368" mi="1" ci="0" mb="0" cb="0"/><line nr="369" mi="8" ci="0" mb="2" cb="0"/><line nr="370" mi="12" ci="0" mb="4" cb="0"/><line nr="372" mi="7" ci="0" mb="0" cb="0"/><line nr="409" mi="4" ci="0" mb="0" cb="0"/><line nr="410" mi="15" ci="0" mb="2" cb="0"/><line nr="411" mi="1" ci="0" mb="0" cb="0"/><line nr="412" mi="4" ci="0" mb="0" cb="0"/><line nr="413" mi="14" ci="0" mb="4" cb="0"/><line nr="415" mi="8" ci="0" mb="2" cb="0"/><line nr="416" mi="12" ci="0" mb="4" cb="0"/><line nr="418" mi="8" ci="0" mb="0" cb="0"/><line nr="430" mi="0" ci="4" mb="0" cb="0"/><line nr="443" mi="1" ci="7" mb="1" cb="1"/><line nr="444" mi="0" ci="6" mb="0" cb="0"/><line nr="449" mi="9" ci="0" mb="0" cb="0"/><line nr="454" mi="3" ci="0" mb="2" cb="0"/><line nr="455" mi="2" ci="0" mb="0" cb="0"/><line nr="457" mi="3" ci="0" mb="2" cb="0"/><line nr="458" mi="2" ci="0" mb="0" cb="0"/><line nr="460" mi="3" ci="0" mb="0" cb="0"/><line nr="461" mi="6" ci="0" mb="0" cb="0"/><line nr="474" mi="0" ci="3" mb="0" cb="0"/><line nr="475" mi="0" ci="1" mb="0" cb="0"/><line nr="493" mi="0" ci="4" mb="0" cb="0"/><line nr="494" mi="0" ci="6" mb="0" cb="0"/><line nr="495" mi="1" ci="13" mb="1" cb="1"/><line nr="496" mi="0" ci="7" mb="0" cb="0"/><line nr="497" mi="0" ci="2" mb="0" cb="0"/><line nr="518" mi="0" ci="4" mb="0" cb="0"/><line nr="519" mi="0" ci="4" mb="0" cb="0"/><line nr="520" mi="1" ci="16" mb="2" cb="2"/><line nr="521" mi="0" ci="6" mb="0" cb="0"/><line nr="522" mi="0" ci="2" mb="0" cb="0"/><line nr="537" mi="0" ci="4" mb="0" cb="0"/><line nr="538" mi="0" ci="8" mb="0" cb="2"/><line nr="539" mi="0" ci="7" mb="0" cb="0"/><line nr="541" mi="0" ci="2" mb="0" cb="0"/><line nr="556" mi="0" ci="5" mb="0" cb="0"/><line nr="557" mi="0" ci="4" mb="0" cb="0"/><line nr="558" mi="0" ci="1" mb="0" cb="0"/><line nr="559" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="475" covered="154"/><counter type="BRANCH" missed="66" covered="6"/><counter type="LINE" missed="71" covered="31"/><counter type="COMPLEXITY" missed="53" covered="12"/><counter type="METHOD" missed="18" covered="11"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigIntMatrix.java"><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="1" mb="0" cb="0"/><line nr="64" mi="0" ci="4" mb="0" cb="0"/><line nr="65" mi="0" ci="14" mb="0" cb="2"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="14" mb="0" cb="2"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="6" mb="0" cb="0"/><line nr="70" mi="0" ci="7" mb="0" cb="0"/><line nr="71" mi="0" ci="4" mb="0" cb="0"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="14" mb="0" cb="0"/><line nr="74" mi="0" ci="1" mb="0" cb="0"/><line nr="75" mi="0" ci="3" mb="0" cb="0"/><line nr="96" mi="0" ci="4" mb="0" cb="0"/><line nr="97" mi="0" ci="14" mb="0" cb="2"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="14" mb="0" cb="2"/><line nr="100" mi="0" ci="3" mb="0" cb="0"/><line nr="101" mi="0" ci="1" mb="0" cb="0"/><line nr="102" mi="0" ci="6" mb="0" cb="0"/><line nr="103" mi="0" ci="7" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="14" mb="0" cb="0"/><line nr="107" mi="0" ci="1" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="127" mi="0" ci="4" mb="0" cb="0"/><line nr="128" mi="0" ci="14" mb="0" cb="2"/><line nr="129" mi="0" ci="3" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><line nr="131" mi="0" ci="8" mb="0" cb="0"/><line nr="132" mi="0" ci="8" mb="0" cb="0"/><line nr="133" mi="0" ci="8" mb="0" cb="0"/><line nr="134" mi="0" ci="5" mb="0" cb="0"/><line nr="135" mi="0" ci="6" mb="0" cb="0"/><line nr="136" mi="0" ci="1" mb="0" cb="0"/><line nr="137" mi="0" ci="1" mb="0" cb="0"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="14" mb="0" cb="2"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="161" mi="0" ci="6" mb="0" cb="0"/><line nr="162" mi="0" ci="7" mb="0" cb="0"/><line nr="163" mi="0" ci="6" mb="0" cb="0"/><line nr="164" mi="0" ci="9" mb="0" cb="2"/><line nr="165" mi="0" ci="2" mb="0" cb="0"/><line nr="166" mi="0" ci="12" mb="0" cb="0"/><line nr="167" mi="0" ci="1" mb="0" cb="0"/><line nr="168" mi="0" ci="1" mb="0" cb="0"/><line nr="169" mi="0" ci="3" mb="0" cb="0"/><line nr="175" mi="0" ci="4" mb="0" cb="0"/><line nr="176" mi="0" ci="4" mb="0" cb="0"/><line nr="177" mi="1" ci="12" mb="1" cb="1"/><line nr="178" mi="0" ci="1" mb="0" cb="0"/><line nr="179" mi="0" ci="2" mb="0" cb="0"/><line nr="180" mi="0" ci="11" mb="0" cb="2"/><line nr="181" mi="0" ci="12" mb="0" cb="0"/><line nr="182" mi="0" ci="1" mb="0" cb="0"/><line nr="183" mi="0" ci="2" mb="0" cb="0"/><line nr="201" mi="0" ci="4" mb="0" cb="0"/><line nr="202" mi="0" ci="10" mb="0" cb="0"/><line nr="203" mi="0" ci="7" mb="0" cb="0"/><line nr="204" mi="0" ci="14" mb="0" cb="0"/><line nr="205" mi="0" ci="1" mb="0" cb="0"/><line nr="206" mi="0" ci="3" mb="0" cb="0"/><line nr="219" mi="0" ci="5" mb="0" cb="0"/><line nr="231" mi="0" ci="10" mb="0" cb="0"/><line nr="232" mi="0" ci="2" mb="0" cb="0"/><line nr="233" mi="0" ci="2" mb="0" cb="0"/><line nr="234" mi="0" ci="12" mb="0" cb="2"/><line nr="235" mi="0" ci="9" mb="0" cb="0"/><line nr="236" mi="0" ci="1" mb="0" cb="0"/><line nr="237" mi="0" ci="2" mb="0" cb="0"/><line nr="260" mi="0" ci="15" mb="0" cb="2"/><line nr="261" mi="0" ci="13" mb="0" cb="2"/><line nr="262" mi="0" ci="2" mb="0" cb="0"/><line nr="263" mi="0" ci="10" mb="0" cb="0"/><line nr="264" mi="0" ci="2" mb="0" cb="0"/><line nr="265" mi="0" ci="3" mb="0" cb="2"/><line nr="266" mi="0" ci="2" mb="0" cb="0"/><line nr="267" mi="0" ci="12" mb="0" cb="2"/><line nr="268" mi="0" ci="7" mb="0" cb="2"/><line nr="269" mi="0" ci="6" mb="0" cb="0"/><line nr="271" mi="0" ci="1" mb="0" cb="0"/><line nr="272" mi="0" ci="2" mb="0" cb="0"/><line nr="274" mi="0" ci="6" mb="0" cb="2"/><line nr="275" mi="0" ci="3" mb="0" cb="0"/><line nr="277" mi="0" ci="6" mb="1" cb="1"/><line nr="278" mi="0" ci="36" mb="0" cb="0"/><line nr="280" mi="9" ci="0" mb="0" cb="0"/><line nr="285" mi="0" ci="27" mb="0" cb="0"/><line nr="286" mi="0" ci="27" mb="0" cb="0"/><line nr="287" mi="0" ci="27" mb="0" cb="0"/><line nr="288" mi="0" ci="28" mb="0" cb="0"/><line nr="289" mi="0" ci="28" mb="0" cb="0"/><line nr="290" mi="0" ci="28" mb="0" cb="0"/><line nr="291" mi="0" ci="12" mb="0" cb="0"/><line nr="304" mi="0" ci="10" mb="0" cb="0"/><line nr="305" mi="0" ci="6" mb="0" cb="0"/><line nr="306" mi="0" ci="12" mb="0" cb="0"/><line nr="307" mi="0" ci="1" mb="0" cb="0"/><line nr="308" mi="0" ci="3" mb="0" cb="0"/><line nr="334" mi="0" ci="4" mb="0" cb="0"/><line nr="335" mi="0" ci="4" mb="0" cb="0"/><line nr="336" mi="0" ci="8" mb="0" cb="0"/><line nr="337" mi="0" ci="3" mb="0" cb="0"/><line nr="338" mi="0" ci="8" mb="0" cb="0"/><line nr="339" mi="0" ci="3" mb="0" cb="0"/><line nr="340" mi="0" ci="14" mb="0" cb="0"/><line nr="341" mi="0" ci="8" mb="0" cb="0"/><line nr="342" mi="0" ci="4" mb="0" cb="0"/><line nr="343" mi="0" ci="4" mb="0" cb="0"/><line nr="344" mi="0" ci="8" mb="0" cb="4"/><line nr="345" mi="0" ci="14" mb="0" cb="2"/><line nr="346" mi="0" ci="14" mb="0" cb="2"/><line nr="347" mi="0" ci="8" mb="0" cb="0"/><line nr="349" mi="0" ci="1" mb="0" cb="0"/><line nr="350" mi="0" ci="3" mb="0" cb="0"/><line nr="364" mi="0" ci="3" mb="0" cb="2"/><line nr="365" mi="0" ci="12" mb="0" cb="2"/><line nr="366" mi="0" ci="15" mb="0" cb="4"/><line nr="367" mi="0" ci="2" mb="0" cb="0"/><line nr="369" mi="0" ci="1" mb="0" cb="0"/><line nr="370" mi="0" ci="2" mb="0" cb="0"/><line nr="372" mi="0" ci="2" mb="0" cb="0"/><line nr="386" mi="0" ci="3" mb="0" cb="2"/><line nr="387" mi="0" ci="12" mb="0" cb="2"/><line nr="388" mi="0" ci="15" mb="0" cb="4"/><line nr="389" mi="0" ci="2" mb="0" cb="0"/><line nr="391" mi="0" ci="1" mb="0" cb="0"/><line nr="392" mi="0" ci="2" mb="0" cb="0"/><line nr="394" mi="0" ci="2" mb="0" cb="0"/><line nr="409" mi="0" ci="3" mb="0" cb="2"/><line nr="410" mi="0" ci="12" mb="0" cb="2"/><line nr="411" mi="0" ci="9" mb="1" cb="1"/><line nr="412" mi="2" ci="0" mb="0" cb="0"/><line nr="414" mi="0" ci="1" mb="0" cb="0"/><line nr="415" mi="0" ci="2" mb="0" cb="0"/><line nr="417" mi="0" ci="2" mb="0" cb="0"/><line nr="432" mi="0" ci="15" mb="0" cb="4"/><line nr="447" mi="0" ci="8" mb="0" cb="2"/><line nr="448" mi="0" ci="8" mb="0" cb="2"/><line nr="449" mi="0" ci="7" mb="0" cb="0"/><line nr="454" mi="0" ci="9" mb="0" cb="0"/><line nr="459" mi="0" ci="3" mb="1" cb="1"/><line nr="460" mi="2" ci="0" mb="0" cb="0"/><line nr="462" mi="0" ci="3" mb="0" cb="2"/><line nr="463" mi="0" ci="2" mb="0" cb="0"/><line nr="465" mi="0" ci="3" mb="0" cb="0"/><line nr="466" mi="0" ci="6" mb="0" cb="0"/><line nr="478" mi="0" ci="4" mb="0" cb="0"/><line nr="479" mi="0" ci="1" mb="0" cb="0"/><line nr="494" mi="0" ci="4" mb="0" cb="0"/><line nr="495" mi="0" ci="4" mb="0" cb="0"/><line nr="496" mi="0" ci="4" mb="0" cb="0"/><line nr="497" mi="0" ci="9" mb="0" cb="0"/><line nr="498" mi="0" ci="3" mb="0" cb="0"/><line nr="499" mi="0" ci="9" mb="0" cb="0"/><line nr="500" mi="0" ci="3" mb="0" cb="0"/><line nr="501" mi="0" ci="7" mb="0" cb="0"/><line nr="502" mi="0" ci="2" mb="0" cb="0"/><line nr="506" mi="0" ci="4" mb="0" cb="0"/><line nr="507" mi="0" ci="7" mb="0" cb="0"/><line nr="508" mi="0" ci="8" mb="0" cb="0"/><line nr="509" mi="0" ci="7" mb="0" cb="0"/><line nr="510" mi="0" ci="1" mb="0" cb="0"/><line nr="511" mi="0" ci="1" mb="0" cb="0"/><line nr="512" mi="0" ci="2" mb="0" cb="0"/><line nr="527" mi="0" ci="5" mb="0" cb="0"/><line nr="528" mi="0" ci="6" mb="0" cb="0"/><line nr="529" mi="0" ci="1" mb="0" cb="0"/><line nr="530" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="14" covered="1134"/><counter type="BRANCH" missed="4" covered="72"/><counter type="LINE" missed="3" covered="170"/><counter type="COMPLEXITY" missed="4" covered="70"/><counter type="METHOD" missed="0" covered="36"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="945" covered="2978"/><counter type="BRANCH" missed="136" covered="182"/><counter type="LINE" missed="140" covered="476"/><counter type="COMPLEXITY" missed="116" covered="208"/><counter type="METHOD" missed="38" covered="127"/><counter type="CLASS" missed="0" covered="12"/></package><package name="finnmath/number"><class name="finnmath/number/ScientificNotation"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;I)V" line="61"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="asString" desc="()Ljava/lang/String;" line="74"><counter type="INSTRUCTION" missed="25" covered="27"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="3" covered="5"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="87"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="92"><counter type="INSTRUCTION" missed="5" covered="23"/><counter type="BRANCH" missed="4" covered="4"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="104"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getCoefficient" desc="()Ljava/math/BigDecimal;" line="108"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getExponent" desc="()I" line="112"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="57" covered="68"/><counter type="BRANCH" missed="6" covered="8"/><counter type="LINE" missed="7" covered="15"/><counter type="COMPLEXITY" missed="8" covered="6"/><counter type="METHOD" missed="2" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/number/SimpleComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="70"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lfinnmath/number/SimpleComplexNumber;)Lfinnmath/number/SimpleComplexNumber;" line="86"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lfinnmath/number/SimpleComplexNumber;)Lfinnmath/number/SimpleComplexNumber;" line="103"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lfinnmath/number/SimpleComplexNumber;)Lfinnmath/number/SimpleComplexNumber;" line="121"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lfinnmath/number/SimpleComplexNumber;)Lfinnmath/number/RealComplexNumber;" line="143"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lfinnmath/number/SimpleComplexNumber;" line="162"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lfinnmath/number/SimpleComplexNumber;" line="180"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lfinnmath/number/RealComplexNumber;" line="194"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="207"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="220"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigInteger;" line="232"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lfinnmath/number/SimpleComplexNumber;" line="244"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lfinnmath/linear/BigIntMatrix;" line="256"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="262"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="267"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="43"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="295"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/number/AbstractComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="39"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="52"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getReal" desc="()Ljava/lang/Object;" line="56"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getImaginary" desc="()Ljava/lang/Object;" line="60"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/number/RealComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="69"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lfinnmath/number/SimpleComplexNumber;)V" line="84"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lfinnmath/number/RealComplexNumber;)Lfinnmath/number/RealComplexNumber;" line="101"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lfinnmath/number/RealComplexNumber;)Lfinnmath/number/RealComplexNumber;" line="118"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lfinnmath/number/RealComplexNumber;)Lfinnmath/number/RealComplexNumber;" line="136"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lfinnmath/number/RealComplexNumber;)Lfinnmath/number/RealComplexNumber;" line="157"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lfinnmath/number/RealComplexNumber;" line="180"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lfinnmath/number/RealComplexNumber;" line="198"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lfinnmath/number/RealComplexNumber;" line="212"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="225"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="237"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigDecimal;" line="249"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lfinnmath/number/RealComplexNumber;" line="261"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lfinnmath/linear/DecimalMatrix;" line="273"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="279"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="284"><counter type="INSTRUCTION" missed="2" covered="29"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="357"/><counter type="BRANCH" missed="2" covered="14"/><counter type="LINE" missed="1" covered="46"/><counter type="COMPLEXITY" missed="2" covered="23"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="finnmath/number/Fraction"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="80"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intValue" desc="()I" line="88"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="longValue" desc="()J" line="93"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="floatValue" desc="()F" line="98"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="doubleValue" desc="()D" line="103"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lfinnmath/number/Fraction;)Lfinnmath/number/Fraction;" line="124"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lfinnmath/number/Fraction;)Lfinnmath/number/Fraction;" line="149"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lfinnmath/number/Fraction;)Lfinnmath/number/Fraction;" line="174"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lfinnmath/number/Fraction;)Lfinnmath/number/Fraction;" line="200"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lfinnmath/number/Fraction;" line="223"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lfinnmath/number/Fraction;" line="246"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lfinnmath/number/Fraction;" line="265"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="278"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Lfinnmath/number/Fraction;" line="296"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Lfinnmath/number/Fraction;)I" line="314"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThanOrEqualTo" desc="(Lfinnmath/number/Fraction;)Z" line="336"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThanOrEqualTo" desc="(Lfinnmath/number/Fraction;)Z" line="357"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThan" desc="(Lfinnmath/number/Fraction;)Z" line="373"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThan" desc="(Lfinnmath/number/Fraction;)Z" line="389"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(Lfinnmath/number/Fraction;)Lfinnmath/number/Fraction;" line="409"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(Lfinnmath/number/Fraction;)Lfinnmath/number/Fraction;" line="432"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="normalize" desc="()Lfinnmath/number/Fraction;" line="456"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="()Lfinnmath/number/Fraction;" line="481"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="signum" desc="()I" line="494"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equivalent" desc="(Lfinnmath/number/Fraction;)Z" line="511"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="517"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="522"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="534"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNumerator" desc="()Ljava/math/BigInteger;" line="538"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getDenominator" desc="()Ljava/math/BigInteger;" line="542"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="39"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="495"/><counter type="BRANCH" missed="0" covered="42"/><counter type="LINE" missed="0" covered="87"/><counter type="COMPLEXITY" missed="0" covered="52"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="ScientificNotation.java"><line nr="61" mi="0" ci="2" mb="0" cb="0"/><line nr="62" mi="0" ci="6" mb="0" cb="0"/><line nr="63" mi="0" ci="3" mb="0" cb="0"/><line nr="64" mi="0" ci="1" mb="0" cb="0"/><line nr="74" mi="0" ci="3" mb="1" cb="1"/><line nr="75" mi="14" ci="0" mb="0" cb="0"/><line nr="76" mi="1" ci="0" mb="0" cb="0"/><line nr="77" mi="0" ci="3" mb="0" cb="2"/><line nr="78" mi="0" ci="4" mb="0" cb="0"/><line nr="79" mi="0" ci="4" mb="1" cb="1"/><line nr="80" mi="10" ci="0" mb="0" cb="0"/><line nr="82" mi="0" ci="13" mb="0" cb="0"/><line nr="87" mi="15" ci="0" mb="0" cb="0"/><line nr="92" mi="0" ci="3" mb="1" cb="1"/><line nr="93" mi="2" ci="0" mb="0" cb="0"/><line nr="95" mi="0" ci="3" mb="1" cb="1"/><line nr="96" mi="2" ci="0" mb="0" cb="0"/><line nr="98" mi="0" ci="3" mb="0" cb="0"/><line nr="99" mi="1" ci="14" mb="2" cb="2"/><line nr="104" mi="12" ci="0" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="57" covered="68"/><counter type="BRANCH" missed="6" covered="8"/><counter type="LINE" missed="7" covered="15"/><counter type="COMPLEXITY" missed="8" covered="6"/><counter type="METHOD" missed="2" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractComplexNumber.java"><line nr="39" mi="0" ci="2" mb="0" cb="0"/><line nr="40" mi="0" ci="5" mb="0" cb="0"/><line nr="41" mi="0" ci="5" mb="0" cb="0"/><line nr="42" mi="0" ci="1" mb="0" cb="0"/><line nr="52" mi="0" ci="12" mb="0" cb="0"/><line nr="56" mi="0" ci="3" mb="0" cb="0"/><line nr="60" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="RealComplexNumber.java"><line nr="42" mi="0" ci="6" mb="0" cb="0"/><line nr="47" mi="0" ci="6" mb="0" cb="0"/><line nr="52" mi="0" ci="7" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="1" mb="0" cb="0"/><line nr="84" mi="0" ci="14" mb="0" cb="0"/><line nr="85" mi="0" ci="3" mb="0" cb="0"/><line nr="86" mi="0" ci="1" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="18" mb="0" cb="0"/><line nr="118" mi="0" ci="4" mb="0" cb="0"/><line nr="119" mi="0" ci="14" mb="0" cb="0"/><line nr="120" mi="0" ci="4" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="16" mb="0" cb="0"/><line nr="138" mi="0" ci="16" mb="0" cb="0"/><line nr="139" mi="0" ci="6" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="0" ci="5" mb="0" cb="0"/><line nr="159" mi="0" ci="12" mb="0" cb="0"/><line nr="160" mi="0" ci="17" mb="0" cb="0"/><line nr="161" mi="0" ci="2" mb="0" cb="0"/><line nr="162" mi="0" ci="11" mb="0" cb="0"/><line nr="163" mi="0" ci="8" mb="0" cb="0"/><line nr="164" mi="0" ci="6" mb="0" cb="0"/><line nr="180" mi="0" ci="9" mb="0" cb="2"/><line nr="181" mi="0" ci="3" mb="0" cb="2"/><line nr="182" mi="0" ci="8" mb="0" cb="0"/><line nr="183" mi="0" ci="3" mb="0" cb="2"/><line nr="184" mi="0" ci="2" mb="0" cb="0"/><line nr="186" mi="0" ci="2" mb="0" cb="0"/><line nr="198" mi="0" ci="12" mb="0" cb="0"/><line nr="212" mi="0" ci="5" mb="0" cb="0"/><line nr="213" mi="0" ci="4" mb="0" cb="0"/><line nr="225" mi="0" ci="8" mb="0" cb="2"/><line nr="237" mi="0" ci="4" mb="0" cb="0"/><line nr="249" mi="0" ci="12" mb="0" cb="0"/><line nr="261" mi="0" ci="11" mb="0" cb="0"/><line nr="273" mi="0" ci="30" mb="0" cb="0"/><line nr="274" mi="0" ci="8" mb="0" cb="0"/><line nr="279" mi="0" ci="14" mb="0" cb="0"/><line nr="284" mi="0" ci="3" mb="0" cb="2"/><line nr="285" mi="0" ci="2" mb="0" cb="0"/><line nr="287" mi="0" ci="3" mb="1" cb="1"/><line nr="288" mi="2" ci="0" mb="0" cb="0"/><line nr="290" mi="0" ci="3" mb="0" cb="0"/><line nr="291" mi="0" ci="18" mb="1" cb="3"/><counter type="INSTRUCTION" missed="2" covered="357"/><counter type="BRANCH" missed="2" covered="14"/><counter type="LINE" missed="1" covered="46"/><counter type="COMPLEXITY" missed="2" covered="23"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumber.java"><line nr="43" mi="0" ci="6" mb="0" cb="0"/><line nr="48" mi="0" ci="6" mb="0" cb="0"/><line nr="53" mi="0" ci="7" mb="0" cb="0"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="18" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="14" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="121" mi="0" ci="4" mb="0" cb="0"/><line nr="122" mi="0" ci="16" mb="0" cb="0"/><line nr="123" mi="0" ci="16" mb="0" cb="0"/><line nr="124" mi="0" ci="6" mb="0" cb="0"/><line nr="143" mi="0" ci="4" mb="0" cb="0"/><line nr="144" mi="0" ci="5" mb="0" cb="0"/><line nr="145" mi="0" ci="10" mb="0" cb="0"/><line nr="162" mi="0" ci="9" mb="0" cb="2"/><line nr="163" mi="0" ci="3" mb="0" cb="2"/><line nr="164" mi="0" ci="8" mb="0" cb="0"/><line nr="165" mi="0" ci="3" mb="0" cb="2"/><line nr="166" mi="0" ci="2" mb="0" cb="0"/><line nr="168" mi="0" ci="2" mb="0" cb="0"/><line nr="180" mi="0" ci="12" mb="0" cb="0"/><line nr="194" mi="0" ci="5" mb="0" cb="0"/><line nr="195" mi="0" ci="4" mb="0" cb="0"/><line nr="207" mi="0" ci="8" mb="0" cb="2"/><line nr="220" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="12" mb="0" cb="0"/><line nr="244" mi="0" ci="11" mb="0" cb="0"/><line nr="256" mi="0" ci="30" mb="0" cb="0"/><line nr="257" mi="0" ci="8" mb="0" cb="0"/><line nr="262" mi="0" ci="14" mb="0" cb="0"/><line nr="267" mi="0" ci="3" mb="0" cb="2"/><line nr="268" mi="0" ci="2" mb="0" cb="0"/><line nr="270" mi="0" ci="3" mb="0" cb="2"/><line nr="271" mi="0" ci="2" mb="0" cb="0"/><line nr="273" mi="0" ci="3" mb="0" cb="0"/><line nr="274" mi="0" ci="18" mb="0" cb="4"/><counter type="INSTRUCTION" missed="0" covered="295"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Fraction.java"><line nr="39" mi="0" ci="6" mb="0" cb="0"/><line nr="44" mi="0" ci="7" mb="0" cb="0"/><line nr="80" mi="0" ci="2" mb="0" cb="0"/><line nr="81" mi="0" ci="6" mb="0" cb="0"/><line nr="82" mi="0" ci="6" mb="0" cb="0"/><line nr="83" mi="0" ci="10" mb="0" cb="2"/><line nr="84" mi="0" ci="1" mb="0" cb="0"/><line nr="88" mi="0" ci="14" mb="0" cb="0"/><line nr="93" mi="0" ci="14" mb="0" cb="0"/><line nr="98" mi="0" ci="14" mb="0" cb="0"/><line nr="103" mi="0" ci="14" mb="0" cb="0"/><line nr="124" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="8" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="127" mi="0" ci="6" mb="0" cb="0"/><line nr="128" mi="0" ci="6" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="150" mi="0" ci="8" mb="0" cb="0"/><line nr="151" mi="0" ci="4" mb="0" cb="0"/><line nr="152" mi="0" ci="6" mb="0" cb="0"/><line nr="153" mi="0" ci="6" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="6" mb="0" cb="0"/><line nr="176" mi="0" ci="6" mb="0" cb="0"/><line nr="177" mi="0" ci="6" mb="0" cb="0"/><line nr="200" mi="0" ci="4" mb="0" cb="0"/><line nr="201" mi="0" ci="5" mb="0" cb="0"/><line nr="202" mi="0" ci="5" mb="0" cb="0"/><line nr="223" mi="0" ci="9" mb="0" cb="2"/><line nr="224" mi="0" ci="3" mb="0" cb="2"/><line nr="225" mi="0" ci="8" mb="0" cb="0"/><line nr="226" mi="0" ci="3" mb="0" cb="2"/><line nr="227" mi="0" ci="2" mb="0" cb="0"/><line nr="229" mi="0" ci="2" mb="0" cb="0"/><line nr="246" mi="0" ci="9" mb="0" cb="0"/><line nr="265" mi="0" ci="5" mb="0" cb="0"/><line nr="266" mi="0" ci="8" mb="0" cb="0"/><line nr="278" mi="0" ci="9" mb="0" cb="2"/><line nr="296" mi="0" ci="10" mb="0" cb="0"/><line nr="314" mi="0" ci="4" mb="0" cb="0"/><line nr="315" mi="0" ci="4" mb="0" cb="2"/><line nr="316" mi="0" ci="2" mb="0" cb="0"/><line nr="318" mi="0" ci="4" mb="0" cb="2"/><line nr="319" mi="0" ci="2" mb="0" cb="0"/><line nr="321" mi="0" ci="2" mb="0" cb="0"/><line nr="336" mi="0" ci="4" mb="0" cb="0"/><line nr="337" mi="0" ci="3" mb="0" cb="0"/><line nr="338" mi="0" ci="3" mb="0" cb="0"/><line nr="339" mi="0" ci="6" mb="0" cb="0"/><line nr="340" mi="0" ci="6" mb="0" cb="0"/><line nr="341" mi="0" ci="9" mb="0" cb="2"/><line nr="357" mi="0" ci="4" mb="0" cb="0"/><line nr="358" mi="0" ci="12" mb="0" cb="4"/><line nr="373" mi="0" ci="4" mb="0" cb="0"/><line nr="374" mi="0" ci="8" mb="0" cb="2"/><line nr="389" mi="0" ci="4" mb="0" cb="0"/><line nr="390" mi="0" ci="8" mb="0" cb="2"/><line nr="409" mi="0" ci="4" mb="0" cb="0"/><line nr="410" mi="0" ci="4" mb="0" cb="2"/><line nr="411" mi="0" ci="2" mb="0" cb="0"/><line nr="413" mi="0" ci="2" mb="0" cb="0"/><line nr="432" mi="0" ci="4" mb="0" cb="0"/><line nr="433" mi="0" ci="4" mb="0" cb="2"/><line nr="434" mi="0" ci="2" mb="0" cb="0"/><line nr="436" mi="0" ci="2" mb="0" cb="0"/><line nr="456" mi="0" ci="3" mb="0" cb="2"/><line nr="457" mi="0" ci="11" mb="0" cb="0"/><line nr="459" mi="0" ci="3" mb="0" cb="2"/><line nr="460" mi="0" ci="2" mb="0" cb="0"/><line nr="462" mi="0" ci="5" mb="0" cb="2"/><line nr="463" mi="0" ci="3" mb="0" cb="0"/><line nr="465" mi="0" ci="2" mb="0" cb="0"/><line nr="481" mi="0" ci="6" mb="0" cb="0"/><line nr="482" mi="0" ci="12" mb="0" cb="0"/><line nr="494" mi="0" ci="8" mb="0" cb="0"/><line nr="511" mi="0" ci="4" mb="0" cb="0"/><line nr="512" mi="0" ci="8" mb="0" cb="0"/><line nr="517" mi="0" ci="14" mb="0" cb="0"/><line nr="522" mi="0" ci="3" mb="0" cb="2"/><line nr="523" mi="0" ci="2" mb="0" cb="0"/><line nr="525" mi="0" ci="3" mb="0" cb="2"/><line nr="526" mi="0" ci="2" mb="0" cb="0"/><line nr="528" mi="0" ci="3" mb="0" cb="0"/><line nr="529" mi="0" ci="16" mb="0" cb="4"/><line nr="534" mi="0" ci="12" mb="0" cb="0"/><line nr="538" mi="0" ci="3" mb="0" cb="0"/><line nr="542" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="495"/><counter type="BRANCH" missed="0" covered="42"/><counter type="LINE" missed="0" covered="87"/><counter type="COMPLEXITY" missed="0" covered="52"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="59" covered="1246"/><counter type="BRANCH" missed="8" covered="80"/><counter type="LINE" missed="8" covered="194"/><counter type="COMPLEXITY" missed="10" covered="109"/><counter type="METHOD" missed="2" covered="73"/><counter type="CLASS" missed="0" covered="5"/></package><counter type="INSTRUCTION" missed="1402" covered="7762"/><counter type="BRANCH" missed="229" covered="715"/><counter type="LINE" missed="209" covered="1205"/><counter type="COMPLEXITY" missed="192" covered="633"/><counter type="METHOD" missed="50" covered="303"/><counter type="CLASS" missed="0" covered="19"/></report>