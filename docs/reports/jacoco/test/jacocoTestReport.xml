<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="finnmath"><sessioninfo id="archlinux-fa982d08" start="1508274306890" dump="1508274310566"/><package name="com/github/ltennstedt/finnmath/linear"><class name="com/github/ltennstedt/finnmath/linear/AbstractMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="53"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="square" desc="()Z" line="105"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="triangular" desc="()Z" line="118"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diagonal" desc="()Z" line="135"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="symmetric" desc="()Z" line="152"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="skewSymmetric" desc="()Z" line="166"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="178"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="190"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Object;" line="208"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cells" desc="()Lcom/google/common/collect/ImmutableSet;" line="226"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="row" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="241"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="column" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="259"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rows" desc="()Lcom/google/common/collect/ImmutableMap;" line="274"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columns" desc="()Lcom/google/common/collect/ImmutableMap;" line="286"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="298"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()J" line="309"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowSize" desc="()I" line="321"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnSize" desc="()I" line="333"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="338"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/ImmutableTable;" line="342"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="205"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="1" covered="28"/><counter type="METHOD" missed="0" covered="20"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="468"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;" line="483"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;" line="503"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;" line="520"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="538"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="539"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="118"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="1" covered="9"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/DecimalMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="61"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="89"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="117"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="144"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigDecimal;" line="161"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="184"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="202"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigDecimal;" line="214"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigDecimal;" line="235"><counter type="INSTRUCTION" missed="0" covered="154"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigDecimal;" line="264"><counter type="INSTRUCTION" missed="0" covered="188"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="284"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="307"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="335"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="355"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigDecimal;" line="375"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="392"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="412"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="435"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="459"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="479"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="495"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="515"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="536"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="557"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="570"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="577"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="582"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="315"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="286"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/math/BigDecimal;Lcom/google/common/collect/Table$Cell;)V" line="187"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="149"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="151"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="123"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="124"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="97"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="68"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1365"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="209"/><counter type="COMPLEXITY" missed="1" covered="88"/><counter type="METHOD" missed="0" covered="37"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/AbstractMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="41"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="49"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/Table;" line="53"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/AbstractVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="50"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="66"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="entries" desc="()Lcom/google/common/collect/ImmutableSet;" line="80"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="92"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="141"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="146"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Lcom/google/common/collect/ImmutableMap;" line="150"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="44"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/DecimalVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="43"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="57"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="78"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="100"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="120"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="138"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="150"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="171"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="186"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="200"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="217"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="237"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="258"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="279"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="298"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="320"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="345"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="372"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="390"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="411"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="425"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;" line="437"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="443"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="448"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="123"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="83"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="62"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="598"/><counter type="BRANCH" missed="0" covered="56"/><counter type="LINE" missed="0" covered="90"/><counter type="COMPLEXITY" missed="0" covered="55"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/BigIntMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="62"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="90"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="118"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="145"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigInteger;" line="162"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="185"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="203"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigInteger;" line="215"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigInteger;" line="236"><counter type="INSTRUCTION" missed="0" covered="134"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigInteger;" line="263"><counter type="INSTRUCTION" missed="0" covered="177"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="282"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="305"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigInteger;" line="333"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigInteger;" line="353"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigInteger;" line="373"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="391"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="408"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="428"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="449"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="465"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="481"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="501"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="522"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="543"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="556"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="563"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="568"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="313"><counter type="INSTRUCTION" missed="0" covered="53"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="284"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/math/BigInteger;Lcom/google/common/collect/Table$Cell;)V" line="188"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="150"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="152"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="124"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="125"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;Lcom/google/common/collect/Table$Cell;)V" line="98"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;Lcom/google/common/collect/Table$Cell;)V" line="69"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1261"/><counter type="BRANCH" missed="1" covered="97"/><counter type="LINE" missed="0" covered="190"/><counter type="COMPLEXITY" missed="1" covered="85"/><counter type="METHOD" missed="0" covered="37"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="471"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;" line="486"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;" line="506"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;" line="523"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="541"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="542"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="119"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="1" covered="9"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="587"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="599"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="620"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="640"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="641"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/math/BigInteger;Ljava/lang/Integer;)V" line="622"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;Ljava/lang/Integer;)V" line="623"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="100"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/BigIntVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="59"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="81"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="102"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="120"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigInteger;" line="132"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="153"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="168"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="182"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="199"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="219"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="240"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="259"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="282"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigDecimal;" line="301"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="323"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="348"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="375"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="393"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="414"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="428"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;" line="440"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="446"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="451"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="105"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="86"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="64"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="599"/><counter type="BRANCH" missed="0" covered="56"/><counter type="LINE" missed="0" covered="90"/><counter type="COMPLEXITY" missed="0" covered="55"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/AbstractVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="40"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="64"><counter type="INSTRUCTION" missed="1" covered="25"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="71"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Ljava/util/Map;" line="75"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSize" desc="()I" line="79"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="61"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="3" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="601"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="620"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="641"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="661"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="662"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/math/BigDecimal;Ljava/lang/Integer;)V" line="643"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;Ljava/lang/Integer;)V" line="644"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="100"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="DecimalVector.java"><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="1" mb="0" cb="0"/><line nr="57" mi="0" ci="4" mb="0" cb="0"/><line nr="58" mi="0" ci="15" mb="0" cb="2"/><line nr="59" mi="0" ci="1" mb="0" cb="0"/><line nr="60" mi="0" ci="5" mb="0" cb="0"/><line nr="61" mi="0" ci="6" mb="0" cb="0"/><line nr="62" mi="0" ci="9" mb="0" cb="0"/><line nr="63" mi="0" ci="1" mb="0" cb="0"/><line nr="64" mi="0" ci="3" mb="0" cb="0"/><line nr="78" mi="0" ci="4" mb="0" cb="0"/><line nr="79" mi="0" ci="15" mb="0" cb="2"/><line nr="80" mi="0" ci="1" mb="0" cb="0"/><line nr="81" mi="0" ci="5" mb="0" cb="0"/><line nr="82" mi="0" ci="6" mb="0" cb="0"/><line nr="83" mi="0" ci="9" mb="0" cb="0"/><line nr="84" mi="0" ci="1" mb="0" cb="0"/><line nr="85" mi="0" ci="3" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="16" mb="0" cb="2"/><line nr="102" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="0" ci="12" mb="0" cb="2"/><line nr="104" mi="0" ci="13" mb="0" cb="0"/><line nr="105" mi="0" ci="1" mb="0" cb="0"/><line nr="106" mi="0" ci="2" mb="0" cb="0"/><line nr="120" mi="0" ci="4" mb="0" cb="0"/><line nr="121" mi="0" ci="5" mb="0" cb="0"/><line nr="122" mi="0" ci="7" mb="0" cb="0"/><line nr="123" mi="0" ci="6" mb="0" cb="0"/><line nr="124" mi="0" ci="1" mb="0" cb="0"/><line nr="125" mi="0" ci="3" mb="0" cb="0"/><line nr="138" mi="0" ci="5" mb="0" cb="0"/><line nr="150" mi="0" ci="2" mb="0" cb="0"/><line nr="151" mi="0" ci="12" mb="0" cb="2"/><line nr="152" mi="0" ci="5" mb="0" cb="0"/><line nr="153" mi="0" ci="1" mb="0" cb="0"/><line nr="154" mi="0" ci="2" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="0" cb="0"/><line nr="172" mi="0" ci="16" mb="0" cb="2"/><line nr="173" mi="0" ci="5" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="200" mi="0" ci="7" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="14" mb="0" cb="4"/><line nr="220" mi="0" ci="8" mb="0" cb="0"/><line nr="237" mi="0" ci="8" mb="0" cb="2"/><line nr="238" mi="0" ci="9" mb="0" cb="0"/><line nr="258" mi="0" ci="4" mb="0" cb="0"/><line nr="259" mi="0" ci="14" mb="0" cb="4"/><line nr="261" mi="0" ci="8" mb="0" cb="2"/><line nr="262" mi="0" ci="10" mb="0" cb="0"/><line nr="279" mi="0" ci="4" mb="0" cb="0"/><line nr="280" mi="0" ci="16" mb="0" cb="2"/><line nr="281" mi="0" ci="5" mb="0" cb="0"/><line nr="298" mi="0" ci="4" mb="0" cb="0"/><line nr="299" mi="0" ci="16" mb="0" cb="2"/><line nr="300" mi="0" ci="8" mb="0" cb="0"/><line nr="320" mi="0" ci="4" mb="0" cb="0"/><line nr="321" mi="0" ci="16" mb="0" cb="2"/><line nr="322" mi="0" ci="4" mb="0" cb="0"/><line nr="323" mi="0" ci="14" mb="0" cb="4"/><line nr="325" mi="0" ci="9" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="0" cb="0"/><line nr="346" mi="0" ci="16" mb="0" cb="2"/><line nr="347" mi="0" ci="8" mb="0" cb="2"/><line nr="348" mi="0" ci="10" mb="0" cb="0"/><line nr="372" mi="0" ci="4" mb="0" cb="0"/><line nr="373" mi="0" ci="16" mb="0" cb="2"/><line nr="374" mi="0" ci="4" mb="0" cb="0"/><line nr="375" mi="0" ci="14" mb="0" cb="4"/><line nr="377" mi="0" ci="8" mb="0" cb="2"/><line nr="378" mi="0" ci="11" mb="0" cb="0"/><line nr="390" mi="0" ci="2" mb="0" cb="0"/><line nr="391" mi="0" ci="12" mb="0" cb="2"/><line nr="392" mi="0" ci="5" mb="0" cb="0"/><line nr="393" mi="0" ci="1" mb="0" cb="0"/><line nr="394" mi="0" ci="2" mb="0" cb="0"/><line nr="411" mi="0" ci="4" mb="0" cb="0"/><line nr="412" mi="0" ci="16" mb="0" cb="2"/><line nr="413" mi="0" ci="5" mb="0" cb="0"/><line nr="425" mi="0" ci="4" mb="0" cb="0"/><line nr="437" mi="0" ci="8" mb="0" cb="2"/><line nr="438" mi="0" ci="6" mb="0" cb="0"/><line nr="443" mi="0" ci="9" mb="0" cb="0"/><line nr="448" mi="0" ci="3" mb="0" cb="2"/><line nr="449" mi="0" ci="2" mb="0" cb="0"/><line nr="451" mi="0" ci="3" mb="0" cb="2"/><line nr="452" mi="0" ci="2" mb="0" cb="0"/><line nr="454" mi="0" ci="3" mb="0" cb="0"/><line nr="455" mi="0" ci="6" mb="0" cb="0"/><line nr="468" mi="0" ci="3" mb="0" cb="0"/><line nr="469" mi="0" ci="1" mb="0" cb="0"/><line nr="483" mi="0" ci="4" mb="0" cb="0"/><line nr="484" mi="0" ci="6" mb="0" cb="0"/><line nr="485" mi="1" ci="13" mb="1" cb="1"/><line nr="486" mi="0" ci="7" mb="0" cb="0"/><line nr="487" mi="0" ci="2" mb="0" cb="0"/><line nr="503" mi="0" ci="4" mb="0" cb="0"/><line nr="504" mi="0" ci="4" mb="0" cb="0"/><line nr="505" mi="0" ci="17" mb="0" cb="4"/><line nr="506" mi="0" ci="6" mb="0" cb="0"/><line nr="507" mi="0" ci="2" mb="0" cb="0"/><line nr="520" mi="0" ci="4" mb="0" cb="0"/><line nr="521" mi="0" ci="8" mb="0" cb="2"/><line nr="522" mi="0" ci="7" mb="0" cb="0"/><line nr="524" mi="0" ci="2" mb="0" cb="0"/><line nr="538" mi="0" ci="11" mb="0" cb="0"/><line nr="539" mi="0" ci="8" mb="0" cb="0"/><line nr="540" mi="0" ci="1" mb="0" cb="0"/><line nr="541" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="716"/><counter type="BRANCH" missed="1" covered="63"/><counter type="LINE" missed="0" covered="110"/><counter type="COMPLEXITY" missed="1" covered="64"/><counter type="METHOD" missed="0" covered="33"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractVector.java"><line nr="50" mi="0" ci="2" mb="0" cb="0"/><line nr="51" mi="0" ci="3" mb="0" cb="0"/><line nr="52" mi="0" ci="1" mb="0" cb="0"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="10" mb="0" cb="0"/><line nr="68" mi="0" ci="5" mb="0" cb="0"/><line nr="80" mi="0" ci="4" mb="0" cb="0"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="141" mi="4" ci="0" mb="0" cb="0"/><line nr="146" mi="0" ci="8" mb="0" cb="0"/><line nr="150" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="44"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractVectorBuilder.java"><line nr="40" mi="0" ci="5" mb="0" cb="0"/><line nr="47" mi="0" ci="2" mb="0" cb="0"/><line nr="48" mi="1" ci="7" mb="1" cb="1"/><line nr="49" mi="0" ci="3" mb="0" cb="0"/><line nr="50" mi="0" ci="1" mb="0" cb="0"/><line nr="64" mi="0" ci="4" mb="0" cb="0"/><line nr="65" mi="1" ci="16" mb="2" cb="2"/><line nr="66" mi="0" ci="5" mb="0" cb="0"/><line nr="71" mi="0" ci="12" mb="0" cb="0"/><line nr="75" mi="0" ci="3" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="61"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="3" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="DecimalMatrix.java"><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="61" mi="0" ci="4" mb="0" cb="0"/><line nr="62" mi="0" ci="14" mb="0" cb="2"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="64" mi="0" ci="14" mb="0" cb="2"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="66" mi="0" ci="6" mb="0" cb="0"/><line nr="67" mi="0" ci="7" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="14" mb="0" cb="0"/><line nr="71" mi="0" ci="1" mb="0" cb="0"/><line nr="72" mi="0" ci="3" mb="0" cb="0"/><line nr="89" mi="0" ci="4" mb="0" cb="0"/><line nr="90" mi="0" ci="14" mb="0" cb="2"/><line nr="91" mi="0" ci="4" mb="0" cb="0"/><line nr="92" mi="0" ci="14" mb="0" cb="2"/><line nr="93" mi="0" ci="3" mb="0" cb="0"/><line nr="94" mi="0" ci="1" mb="0" cb="0"/><line nr="95" mi="0" ci="6" mb="0" cb="0"/><line nr="96" mi="0" ci="7" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="14" mb="0" cb="0"/><line nr="100" mi="0" ci="1" mb="0" cb="0"/><line nr="101" mi="0" ci="3" mb="0" cb="0"/><line nr="117" mi="0" ci="4" mb="0" cb="0"/><line nr="118" mi="0" ci="14" mb="0" cb="2"/><line nr="119" mi="0" ci="3" mb="0" cb="0"/><line nr="120" mi="0" ci="1" mb="0" cb="0"/><line nr="121" mi="0" ci="8" mb="0" cb="0"/><line nr="122" mi="0" ci="8" mb="0" cb="0"/><line nr="123" mi="0" ci="8" mb="0" cb="0"/><line nr="124" mi="0" ci="5" mb="0" cb="0"/><line nr="125" mi="0" ci="6" mb="0" cb="0"/><line nr="126" mi="0" ci="1" mb="0" cb="0"/><line nr="127" mi="0" ci="1" mb="0" cb="0"/><line nr="128" mi="0" ci="3" mb="0" cb="0"/><line nr="144" mi="0" ci="4" mb="0" cb="0"/><line nr="145" mi="0" ci="14" mb="0" cb="2"/><line nr="146" mi="0" ci="4" mb="0" cb="0"/><line nr="147" mi="0" ci="6" mb="0" cb="0"/><line nr="148" mi="0" ci="7" mb="0" cb="0"/><line nr="149" mi="0" ci="6" mb="0" cb="0"/><line nr="151" mi="0" ci="11" mb="0" cb="2"/><line nr="152" mi="0" ci="12" mb="0" cb="0"/><line nr="153" mi="0" ci="1" mb="0" cb="0"/><line nr="154" mi="0" ci="1" mb="0" cb="0"/><line nr="155" mi="0" ci="3" mb="0" cb="0"/><line nr="161" mi="0" ci="4" mb="0" cb="0"/><line nr="162" mi="0" ci="4" mb="0" cb="0"/><line nr="163" mi="1" ci="12" mb="1" cb="1"/><line nr="164" mi="0" ci="1" mb="0" cb="0"/><line nr="165" mi="0" ci="2" mb="0" cb="0"/><line nr="166" mi="0" ci="11" mb="0" cb="2"/><line nr="167" mi="0" ci="12" mb="0" cb="0"/><line nr="168" mi="0" ci="1" mb="0" cb="0"/><line nr="169" mi="0" ci="2" mb="0" cb="0"/><line nr="184" mi="0" ci="4" mb="0" cb="0"/><line nr="185" mi="0" ci="10" mb="0" cb="0"/><line nr="186" mi="0" ci="7" mb="0" cb="0"/><line nr="187" mi="0" ci="14" mb="0" cb="0"/><line nr="188" mi="0" ci="1" mb="0" cb="0"/><line nr="189" mi="0" ci="3" mb="0" cb="0"/><line nr="202" mi="0" ci="5" mb="0" cb="0"/><line nr="214" mi="0" ci="10" mb="0" cb="0"/><line nr="215" mi="0" ci="2" mb="0" cb="0"/><line nr="216" mi="0" ci="2" mb="0" cb="0"/><line nr="217" mi="0" ci="12" mb="0" cb="2"/><line nr="218" mi="0" ci="9" mb="0" cb="0"/><line nr="219" mi="0" ci="1" mb="0" cb="0"/><line nr="220" mi="0" ci="2" mb="0" cb="0"/><line nr="235" mi="0" ci="5" mb="0" cb="0"/><line nr="236" mi="0" ci="9" mb="0" cb="0"/><line nr="237" mi="0" ci="10" mb="0" cb="0"/><line nr="238" mi="0" ci="3" mb="0" cb="2"/><line nr="239" mi="0" ci="4" mb="0" cb="0"/><line nr="240" mi="0" ci="12" mb="0" cb="2"/><line nr="241" mi="0" ci="7" mb="0" cb="2"/><line nr="242" mi="0" ci="6" mb="0" cb="0"/><line nr="244" mi="0" ci="1" mb="0" cb="0"/><line nr="245" mi="0" ci="5" mb="0" cb="0"/><line nr="247" mi="0" ci="3" mb="0" cb="2"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="250" mi="0" ci="3" mb="0" cb="2"/><line nr="251" mi="0" ci="38" mb="0" cb="0"/><line nr="252" mi="0" ci="1" mb="0" cb="0"/><line nr="254" mi="0" ci="4" mb="0" cb="0"/><line nr="255" mi="0" ci="12" mb="0" cb="2"/><line nr="256" mi="0" ci="19" mb="0" cb="0"/><line nr="257" mi="0" ci="6" mb="0" cb="0"/><line nr="258" mi="0" ci="1" mb="0" cb="0"/><line nr="259" mi="0" ci="2" mb="0" cb="0"/><line nr="264" mi="0" ci="27" mb="0" cb="0"/><line nr="265" mi="0" ci="27" mb="0" cb="0"/><line nr="266" mi="0" ci="27" mb="0" cb="0"/><line nr="267" mi="0" ci="28" mb="0" cb="0"/><line nr="268" mi="0" ci="28" mb="0" cb="0"/><line nr="269" mi="0" ci="28" mb="0" cb="0"/><line nr="270" mi="0" ci="15" mb="0" cb="0"/><line nr="271" mi="0" ci="8" mb="0" cb="0"/><line nr="284" mi="0" ci="10" mb="0" cb="0"/><line nr="285" mi="0" ci="6" mb="0" cb="0"/><line nr="286" mi="0" ci="12" mb="0" cb="0"/><line nr="287" mi="0" ci="1" mb="0" cb="0"/><line nr="288" mi="0" ci="3" mb="0" cb="0"/><line nr="307" mi="0" ci="4" mb="0" cb="0"/><line nr="308" mi="0" ci="4" mb="0" cb="0"/><line nr="309" mi="0" ci="8" mb="0" cb="0"/><line nr="310" mi="0" ci="3" mb="0" cb="0"/><line nr="311" mi="0" ci="8" mb="0" cb="0"/><line nr="312" mi="0" ci="3" mb="0" cb="0"/><line nr="313" mi="0" ci="14" mb="0" cb="0"/><line nr="314" mi="0" ci="8" mb="0" cb="0"/><line nr="315" mi="0" ci="4" mb="0" cb="0"/><line nr="316" mi="0" ci="4" mb="0" cb="0"/><line nr="317" mi="0" ci="8" mb="0" cb="4"/><line nr="318" mi="0" ci="14" mb="0" cb="2"/><line nr="319" mi="0" ci="14" mb="0" cb="2"/><line nr="320" mi="0" ci="8" mb="0" cb="0"/><line nr="322" mi="0" ci="1" mb="0" cb="0"/><line nr="323" mi="0" ci="3" mb="0" cb="0"/><line nr="335" mi="0" ci="2" mb="0" cb="0"/><line nr="336" mi="0" ci="14" mb="0" cb="2"/><line nr="337" mi="0" ci="2" mb="0" cb="0"/><line nr="338" mi="0" ci="11" mb="0" cb="2"/><line nr="339" mi="0" ci="5" mb="0" cb="0"/><line nr="340" mi="0" ci="1" mb="0" cb="0"/><line nr="341" mi="0" ci="4" mb="0" cb="0"/><line nr="342" mi="0" ci="1" mb="0" cb="0"/><line nr="343" mi="0" ci="2" mb="0" cb="0"/><line nr="355" mi="0" ci="2" mb="0" cb="0"/><line nr="356" mi="0" ci="14" mb="0" cb="2"/><line nr="357" mi="0" ci="2" mb="0" cb="0"/><line nr="358" mi="0" ci="11" mb="0" cb="2"/><line nr="359" mi="0" ci="5" mb="0" cb="0"/><line nr="360" mi="0" ci="1" mb="0" cb="0"/><line nr="361" mi="0" ci="4" mb="0" cb="0"/><line nr="362" mi="0" ci="1" mb="0" cb="0"/><line nr="363" mi="0" ci="2" mb="0" cb="0"/><line nr="375" mi="0" ci="2" mb="0" cb="0"/><line nr="376" mi="0" ci="12" mb="0" cb="2"/><line nr="377" mi="0" ci="6" mb="0" cb="0"/><line nr="378" mi="0" ci="1" mb="0" cb="0"/><line nr="379" mi="0" ci="2" mb="0" cb="0"/><line nr="392" mi="0" ci="2" mb="0" cb="0"/><line nr="393" mi="0" ci="12" mb="0" cb="2"/><line nr="394" mi="0" ci="6" mb="0" cb="0"/><line nr="395" mi="0" ci="1" mb="0" cb="0"/><line nr="396" mi="0" ci="6" mb="0" cb="0"/><line nr="412" mi="0" ci="4" mb="0" cb="0"/><line nr="413" mi="0" ci="14" mb="0" cb="4"/><line nr="415" mi="0" ci="2" mb="0" cb="0"/><line nr="416" mi="0" ci="12" mb="0" cb="2"/><line nr="417" mi="0" ci="6" mb="0" cb="0"/><line nr="418" mi="0" ci="1" mb="0" cb="0"/><line nr="419" mi="0" ci="7" mb="0" cb="0"/><line nr="435" mi="0" ci="8" mb="0" cb="2"/><line nr="436" mi="0" ci="2" mb="0" cb="0"/><line nr="437" mi="0" ci="12" mb="0" cb="2"/><line nr="438" mi="0" ci="6" mb="0" cb="0"/><line nr="439" mi="0" ci="1" mb="0" cb="0"/><line nr="440" mi="0" ci="8" mb="0" cb="0"/><line nr="459" mi="0" ci="4" mb="0" cb="0"/><line nr="460" mi="0" ci="14" mb="0" cb="4"/><line nr="462" mi="0" ci="8" mb="0" cb="2"/><line nr="463" mi="0" ci="2" mb="0" cb="0"/><line nr="464" mi="0" ci="12" mb="0" cb="2"/><line nr="465" mi="0" ci="6" mb="0" cb="0"/><line nr="466" mi="0" ci="1" mb="0" cb="0"/><line nr="467" mi="0" ci="9" mb="0" cb="0"/><line nr="479" mi="0" ci="2" mb="0" cb="0"/><line nr="480" mi="0" ci="12" mb="0" cb="2"/><line nr="481" mi="0" ci="5" mb="0" cb="0"/><line nr="482" mi="0" ci="1" mb="0" cb="0"/><line nr="483" mi="0" ci="2" mb="0" cb="0"/><line nr="495" mi="0" ci="3" mb="0" cb="2"/><line nr="496" mi="0" ci="12" mb="0" cb="2"/><line nr="497" mi="0" ci="15" mb="0" cb="4"/><line nr="498" mi="0" ci="2" mb="0" cb="0"/><line nr="500" mi="0" ci="1" mb="0" cb="0"/><line nr="501" mi="0" ci="2" mb="0" cb="0"/><line nr="503" mi="0" ci="2" mb="0" cb="0"/><line nr="515" mi="0" ci="3" mb="0" cb="2"/><line nr="516" mi="0" ci="12" mb="0" cb="2"/><line nr="517" mi="0" ci="15" mb="0" cb="4"/><line nr="518" mi="0" ci="2" mb="0" cb="0"/><line nr="520" mi="0" ci="1" mb="0" cb="0"/><line nr="521" mi="0" ci="2" mb="0" cb="0"/><line nr="523" mi="0" ci="2" mb="0" cb="0"/><line nr="536" mi="0" ci="3" mb="0" cb="2"/><line nr="537" mi="0" ci="12" mb="0" cb="2"/><line nr="538" mi="0" ci="9" mb="0" cb="2"/><line nr="539" mi="0" ci="2" mb="0" cb="0"/><line nr="541" mi="0" ci="1" mb="0" cb="0"/><line nr="542" mi="0" ci="2" mb="0" cb="0"/><line nr="544" mi="0" ci="2" mb="0" cb="0"/><line nr="557" mi="0" ci="9" mb="0" cb="2"/><line nr="570" mi="0" ci="8" mb="0" cb="2"/><line nr="571" mi="0" ci="8" mb="0" cb="2"/><line nr="572" mi="0" ci="6" mb="0" cb="0"/><line nr="577" mi="0" ci="9" mb="0" cb="0"/><line nr="582" mi="0" ci="3" mb="0" cb="2"/><line nr="583" mi="0" ci="2" mb="0" cb="0"/><line nr="585" mi="0" ci="3" mb="0" cb="2"/><line nr="586" mi="0" ci="2" mb="0" cb="0"/><line nr="588" mi="0" ci="3" mb="0" cb="0"/><line nr="589" mi="0" ci="6" mb="0" cb="0"/><line nr="601" mi="0" ci="4" mb="0" cb="0"/><line nr="602" mi="0" ci="1" mb="0" cb="0"/><line nr="620" mi="0" ci="4" mb="0" cb="0"/><line nr="621" mi="0" ci="4" mb="0" cb="0"/><line nr="622" mi="0" ci="4" mb="0" cb="0"/><line nr="623" mi="0" ci="9" mb="0" cb="0"/><line nr="624" mi="0" ci="3" mb="0" cb="0"/><line nr="625" mi="0" ci="9" mb="0" cb="0"/><line nr="626" mi="0" ci="3" mb="0" cb="0"/><line nr="627" mi="0" ci="7" mb="0" cb="0"/><line nr="628" mi="0" ci="2" mb="0" cb="0"/><line nr="641" mi="0" ci="4" mb="0" cb="0"/><line nr="642" mi="0" ci="7" mb="0" cb="0"/><line nr="643" mi="0" ci="8" mb="0" cb="0"/><line nr="644" mi="0" ci="7" mb="0" cb="0"/><line nr="645" mi="0" ci="1" mb="0" cb="0"/><line nr="646" mi="0" ci="1" mb="0" cb="0"/><line nr="647" mi="0" ci="2" mb="0" cb="0"/><line nr="661" mi="0" ci="5" mb="0" cb="0"/><line nr="662" mi="0" ci="6" mb="0" cb="0"/><line nr="663" mi="0" ci="1" mb="0" cb="0"/><line nr="664" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1465"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="231"/><counter type="COMPLEXITY" missed="1" covered="95"/><counter type="METHOD" missed="0" covered="44"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractMatrix.java"><line nr="53" mi="0" ci="2" mb="0" cb="0"/><line nr="54" mi="0" ci="3" mb="0" cb="0"/><line nr="55" mi="0" ci="1" mb="0" cb="0"/><line nr="105" mi="0" ci="13" mb="0" cb="2"/><line nr="118" mi="0" ci="10" mb="0" cb="4"/><line nr="135" mi="0" ci="10" mb="1" cb="3"/><line nr="152" mi="0" ci="12" mb="0" cb="4"/><line nr="166" mi="0" ci="13" mb="0" cb="4"/><line nr="178" mi="0" ci="4" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="0" cb="0"/><line nr="208" mi="0" ci="4" mb="0" cb="0"/><line nr="209" mi="0" ci="4" mb="0" cb="0"/><line nr="210" mi="0" ci="9" mb="0" cb="0"/><line nr="211" mi="0" ci="3" mb="0" cb="0"/><line nr="212" mi="0" ci="9" mb="0" cb="0"/><line nr="213" mi="0" ci="3" mb="0" cb="0"/><line nr="214" mi="0" ci="6" mb="0" cb="0"/><line nr="226" mi="0" ci="4" mb="0" cb="0"/><line nr="241" mi="0" ci="4" mb="0" cb="0"/><line nr="242" mi="0" ci="9" mb="0" cb="0"/><line nr="243" mi="0" ci="3" mb="0" cb="0"/><line nr="244" mi="0" ci="5" mb="0" cb="0"/><line nr="259" mi="0" ci="4" mb="0" cb="0"/><line nr="260" mi="0" ci="9" mb="0" cb="0"/><line nr="261" mi="0" ci="3" mb="0" cb="0"/><line nr="262" mi="0" ci="5" mb="0" cb="0"/><line nr="274" mi="0" ci="4" mb="0" cb="0"/><line nr="286" mi="0" ci="4" mb="0" cb="0"/><line nr="298" mi="0" ci="4" mb="0" cb="0"/><line nr="309" mi="0" ci="16" mb="0" cb="0"/><line nr="321" mi="0" ci="5" mb="0" cb="0"/><line nr="333" mi="0" ci="5" mb="0" cb="0"/><line nr="338" mi="0" ci="8" mb="0" cb="0"/><line nr="342" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="205"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="1" covered="28"/><counter type="METHOD" missed="0" covered="20"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigIntMatrix.java"><line nr="45" mi="0" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="4" mb="0" cb="0"/><line nr="63" mi="0" ci="14" mb="0" cb="2"/><line nr="64" mi="0" ci="4" mb="0" cb="0"/><line nr="65" mi="0" ci="14" mb="0" cb="2"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="6" mb="0" cb="0"/><line nr="68" mi="0" ci="7" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="14" mb="0" cb="0"/><line nr="72" mi="0" ci="1" mb="0" cb="0"/><line nr="73" mi="0" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="4" mb="0" cb="0"/><line nr="91" mi="0" ci="14" mb="0" cb="2"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="93" mi="0" ci="14" mb="0" cb="2"/><line nr="94" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="1" mb="0" cb="0"/><line nr="96" mi="0" ci="6" mb="0" cb="0"/><line nr="97" mi="0" ci="7" mb="0" cb="0"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="14" mb="0" cb="0"/><line nr="101" mi="0" ci="1" mb="0" cb="0"/><line nr="102" mi="0" ci="3" mb="0" cb="0"/><line nr="118" mi="0" ci="4" mb="0" cb="0"/><line nr="119" mi="0" ci="14" mb="0" cb="2"/><line nr="120" mi="0" ci="3" mb="0" cb="0"/><line nr="121" mi="0" ci="1" mb="0" cb="0"/><line nr="122" mi="0" ci="8" mb="0" cb="0"/><line nr="123" mi="0" ci="8" mb="0" cb="0"/><line nr="124" mi="0" ci="8" mb="0" cb="0"/><line nr="125" mi="0" ci="5" mb="0" cb="0"/><line nr="126" mi="0" ci="6" mb="0" cb="0"/><line nr="127" mi="0" ci="1" mb="0" cb="0"/><line nr="128" mi="0" ci="1" mb="0" cb="0"/><line nr="129" mi="0" ci="3" mb="0" cb="0"/><line nr="145" mi="0" ci="4" mb="0" cb="0"/><line nr="146" mi="0" ci="14" mb="0" cb="2"/><line nr="147" mi="0" ci="4" mb="0" cb="0"/><line nr="148" mi="0" ci="6" mb="0" cb="0"/><line nr="149" mi="0" ci="7" mb="0" cb="0"/><line nr="150" mi="0" ci="6" mb="0" cb="0"/><line nr="152" mi="0" ci="11" mb="0" cb="2"/><line nr="153" mi="0" ci="12" mb="0" cb="0"/><line nr="154" mi="0" ci="1" mb="0" cb="0"/><line nr="155" mi="0" ci="1" mb="0" cb="0"/><line nr="156" mi="0" ci="3" mb="0" cb="0"/><line nr="162" mi="0" ci="4" mb="0" cb="0"/><line nr="163" mi="0" ci="4" mb="0" cb="0"/><line nr="164" mi="1" ci="12" mb="1" cb="1"/><line nr="165" mi="0" ci="1" mb="0" cb="0"/><line nr="166" mi="0" ci="2" mb="0" cb="0"/><line nr="167" mi="0" ci="11" mb="0" cb="2"/><line nr="168" mi="0" ci="12" mb="0" cb="0"/><line nr="169" mi="0" ci="1" mb="0" cb="0"/><line nr="170" mi="0" ci="2" mb="0" cb="0"/><line nr="185" mi="0" ci="4" mb="0" cb="0"/><line nr="186" mi="0" ci="10" mb="0" cb="0"/><line nr="187" mi="0" ci="7" mb="0" cb="0"/><line nr="188" mi="0" ci="14" mb="0" cb="0"/><line nr="189" mi="0" ci="1" mb="0" cb="0"/><line nr="190" mi="0" ci="3" mb="0" cb="0"/><line nr="203" mi="0" ci="5" mb="0" cb="0"/><line nr="215" mi="0" ci="10" mb="0" cb="0"/><line nr="216" mi="0" ci="2" mb="0" cb="0"/><line nr="217" mi="0" ci="2" mb="0" cb="0"/><line nr="218" mi="0" ci="12" mb="0" cb="2"/><line nr="219" mi="0" ci="9" mb="0" cb="0"/><line nr="220" mi="0" ci="1" mb="0" cb="0"/><line nr="221" mi="0" ci="2" mb="0" cb="0"/><line nr="236" mi="0" ci="5" mb="0" cb="0"/><line nr="237" mi="0" ci="9" mb="0" cb="0"/><line nr="238" mi="0" ci="3" mb="0" cb="2"/><line nr="239" mi="0" ci="2" mb="0" cb="0"/><line nr="240" mi="0" ci="12" mb="0" cb="2"/><line nr="241" mi="0" ci="7" mb="0" cb="2"/><line nr="242" mi="0" ci="6" mb="0" cb="0"/><line nr="244" mi="0" ci="1" mb="0" cb="0"/><line nr="245" mi="0" ci="2" mb="0" cb="0"/><line nr="247" mi="0" ci="3" mb="0" cb="2"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="250" mi="0" ci="3" mb="0" cb="2"/><line nr="251" mi="0" ci="36" mb="0" cb="0"/><line nr="253" mi="0" ci="2" mb="0" cb="0"/><line nr="254" mi="0" ci="12" mb="0" cb="2"/><line nr="255" mi="0" ci="19" mb="0" cb="0"/><line nr="256" mi="0" ci="6" mb="0" cb="0"/><line nr="257" mi="0" ci="1" mb="0" cb="0"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="263" mi="0" ci="27" mb="0" cb="0"/><line nr="264" mi="0" ci="27" mb="0" cb="0"/><line nr="265" mi="0" ci="27" mb="0" cb="0"/><line nr="266" mi="0" ci="28" mb="0" cb="0"/><line nr="267" mi="0" ci="28" mb="0" cb="0"/><line nr="268" mi="0" ci="28" mb="0" cb="0"/><line nr="269" mi="0" ci="12" mb="0" cb="0"/><line nr="282" mi="0" ci="10" mb="0" cb="0"/><line nr="283" mi="0" ci="6" mb="0" cb="0"/><line nr="284" mi="0" ci="12" mb="0" cb="0"/><line nr="285" mi="0" ci="1" mb="0" cb="0"/><line nr="286" mi="0" ci="3" mb="0" cb="0"/><line nr="305" mi="0" ci="4" mb="0" cb="0"/><line nr="306" mi="0" ci="4" mb="0" cb="0"/><line nr="307" mi="0" ci="8" mb="0" cb="0"/><line nr="308" mi="0" ci="3" mb="0" cb="0"/><line nr="309" mi="0" ci="8" mb="0" cb="0"/><line nr="310" mi="0" ci="3" mb="0" cb="0"/><line nr="311" mi="0" ci="14" mb="0" cb="0"/><line nr="312" mi="0" ci="8" mb="0" cb="0"/><line nr="313" mi="0" ci="4" mb="0" cb="0"/><line nr="314" mi="0" ci="4" mb="0" cb="0"/><line nr="315" mi="0" ci="8" mb="0" cb="4"/><line nr="316" mi="0" ci="14" mb="0" cb="2"/><line nr="317" mi="0" ci="14" mb="0" cb="2"/><line nr="318" mi="0" ci="8" mb="0" cb="0"/><line nr="320" mi="0" ci="1" mb="0" cb="0"/><line nr="321" mi="0" ci="3" mb="0" cb="0"/><line nr="333" mi="0" ci="2" mb="0" cb="0"/><line nr="334" mi="0" ci="14" mb="0" cb="2"/><line nr="335" mi="0" ci="2" mb="0" cb="0"/><line nr="336" mi="0" ci="11" mb="0" cb="2"/><line nr="337" mi="0" ci="5" mb="0" cb="0"/><line nr="338" mi="0" ci="1" mb="0" cb="0"/><line nr="339" mi="0" ci="4" mb="0" cb="0"/><line nr="340" mi="0" ci="1" mb="0" cb="0"/><line nr="341" mi="0" ci="2" mb="0" cb="0"/><line nr="353" mi="0" ci="2" mb="0" cb="0"/><line nr="354" mi="0" ci="14" mb="0" cb="2"/><line nr="355" mi="0" ci="2" mb="0" cb="0"/><line nr="356" mi="0" ci="11" mb="0" cb="2"/><line nr="357" mi="0" ci="5" mb="0" cb="0"/><line nr="358" mi="0" ci="1" mb="0" cb="0"/><line nr="359" mi="0" ci="4" mb="0" cb="0"/><line nr="360" mi="0" ci="1" mb="0" cb="0"/><line nr="361" mi="0" ci="2" mb="0" cb="0"/><line nr="373" mi="0" ci="2" mb="0" cb="0"/><line nr="374" mi="0" ci="12" mb="0" cb="2"/><line nr="375" mi="0" ci="6" mb="0" cb="0"/><line nr="376" mi="0" ci="1" mb="0" cb="0"/><line nr="377" mi="0" ci="2" mb="0" cb="0"/><line nr="391" mi="0" ci="7" mb="0" cb="0"/><line nr="408" mi="0" ci="4" mb="0" cb="0"/><line nr="409" mi="0" ci="14" mb="0" cb="4"/><line nr="411" mi="0" ci="8" mb="0" cb="0"/><line nr="428" mi="0" ci="8" mb="0" cb="2"/><line nr="429" mi="0" ci="9" mb="0" cb="0"/><line nr="449" mi="0" ci="4" mb="0" cb="0"/><line nr="450" mi="0" ci="14" mb="0" cb="4"/><line nr="452" mi="0" ci="8" mb="0" cb="2"/><line nr="453" mi="0" ci="10" mb="0" cb="0"/><line nr="465" mi="0" ci="2" mb="0" cb="0"/><line nr="466" mi="0" ci="12" mb="0" cb="2"/><line nr="467" mi="0" ci="5" mb="0" cb="0"/><line nr="468" mi="0" ci="1" mb="0" cb="0"/><line nr="469" mi="0" ci="2" mb="0" cb="0"/><line nr="481" mi="0" ci="3" mb="0" cb="2"/><line nr="482" mi="0" ci="12" mb="0" cb="2"/><line nr="483" mi="0" ci="15" mb="0" cb="4"/><line nr="484" mi="0" ci="2" mb="0" cb="0"/><line nr="486" mi="0" ci="1" mb="0" cb="0"/><line nr="487" mi="0" ci="2" mb="0" cb="0"/><line nr="489" mi="0" ci="2" mb="0" cb="0"/><line nr="501" mi="0" ci="3" mb="0" cb="2"/><line nr="502" mi="0" ci="12" mb="0" cb="2"/><line nr="503" mi="0" ci="15" mb="0" cb="4"/><line nr="504" mi="0" ci="2" mb="0" cb="0"/><line nr="506" mi="0" ci="1" mb="0" cb="0"/><line nr="507" mi="0" ci="2" mb="0" cb="0"/><line nr="509" mi="0" ci="2" mb="0" cb="0"/><line nr="522" mi="0" ci="3" mb="0" cb="2"/><line nr="523" mi="0" ci="12" mb="0" cb="2"/><line nr="524" mi="0" ci="9" mb="0" cb="2"/><line nr="525" mi="0" ci="2" mb="0" cb="0"/><line nr="527" mi="0" ci="1" mb="0" cb="0"/><line nr="528" mi="0" ci="2" mb="0" cb="0"/><line nr="530" mi="0" ci="2" mb="0" cb="0"/><line nr="543" mi="0" ci="15" mb="0" cb="4"/><line nr="556" mi="0" ci="8" mb="0" cb="2"/><line nr="557" mi="0" ci="8" mb="0" cb="2"/><line nr="558" mi="0" ci="7" mb="0" cb="0"/><line nr="563" mi="0" ci="9" mb="0" cb="0"/><line nr="568" mi="0" ci="3" mb="0" cb="2"/><line nr="569" mi="0" ci="2" mb="0" cb="0"/><line nr="571" mi="0" ci="3" mb="0" cb="2"/><line nr="572" mi="0" ci="2" mb="0" cb="0"/><line nr="574" mi="0" ci="3" mb="0" cb="0"/><line nr="575" mi="0" ci="6" mb="0" cb="0"/><line nr="587" mi="0" ci="4" mb="0" cb="0"/><line nr="588" mi="0" ci="1" mb="0" cb="0"/><line nr="599" mi="0" ci="4" mb="0" cb="0"/><line nr="600" mi="0" ci="4" mb="0" cb="0"/><line nr="601" mi="0" ci="4" mb="0" cb="0"/><line nr="602" mi="0" ci="9" mb="0" cb="0"/><line nr="603" mi="0" ci="3" mb="0" cb="0"/><line nr="604" mi="0" ci="9" mb="0" cb="0"/><line nr="605" mi="0" ci="3" mb="0" cb="0"/><line nr="606" mi="0" ci="7" mb="0" cb="0"/><line nr="607" mi="0" ci="2" mb="0" cb="0"/><line nr="620" mi="0" ci="4" mb="0" cb="0"/><line nr="621" mi="0" ci="7" mb="0" cb="0"/><line nr="622" mi="0" ci="8" mb="0" cb="0"/><line nr="623" mi="0" ci="7" mb="0" cb="0"/><line nr="624" mi="0" ci="1" mb="0" cb="0"/><line nr="625" mi="0" ci="1" mb="0" cb="0"/><line nr="626" mi="0" ci="2" mb="0" cb="0"/><line nr="640" mi="0" ci="5" mb="0" cb="0"/><line nr="641" mi="0" ci="6" mb="0" cb="0"/><line nr="642" mi="0" ci="1" mb="0" cb="0"/><line nr="643" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1361"/><counter type="BRANCH" missed="1" covered="97"/><counter type="LINE" missed="0" covered="212"/><counter type="COMPLEXITY" missed="1" covered="92"/><counter type="METHOD" missed="0" covered="44"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigIntVector.java"><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="0" ci="4" mb="0" cb="0"/><line nr="60" mi="0" ci="15" mb="0" cb="2"/><line nr="61" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="5" mb="0" cb="0"/><line nr="63" mi="0" ci="6" mb="0" cb="0"/><line nr="64" mi="0" ci="9" mb="0" cb="0"/><line nr="65" mi="0" ci="1" mb="0" cb="0"/><line nr="66" mi="0" ci="3" mb="0" cb="0"/><line nr="81" mi="0" ci="4" mb="0" cb="0"/><line nr="82" mi="0" ci="15" mb="0" cb="2"/><line nr="83" mi="0" ci="1" mb="0" cb="0"/><line nr="84" mi="0" ci="5" mb="0" cb="0"/><line nr="85" mi="0" ci="6" mb="0" cb="0"/><line nr="86" mi="0" ci="9" mb="0" cb="0"/><line nr="87" mi="0" ci="1" mb="0" cb="0"/><line nr="88" mi="0" ci="3" mb="0" cb="0"/><line nr="102" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="5" mb="0" cb="0"/><line nr="104" mi="0" ci="7" mb="0" cb="0"/><line nr="105" mi="0" ci="6" mb="0" cb="0"/><line nr="106" mi="0" ci="1" mb="0" cb="0"/><line nr="107" mi="0" ci="3" mb="0" cb="0"/><line nr="120" mi="0" ci="5" mb="0" cb="0"/><line nr="132" mi="0" ci="2" mb="0" cb="0"/><line nr="133" mi="0" ci="12" mb="0" cb="2"/><line nr="134" mi="0" ci="5" mb="0" cb="0"/><line nr="135" mi="0" ci="1" mb="0" cb="0"/><line nr="136" mi="0" ci="2" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="154" mi="0" ci="16" mb="0" cb="2"/><line nr="155" mi="0" ci="5" mb="0" cb="0"/><line nr="168" mi="0" ci="4" mb="0" cb="0"/><line nr="182" mi="0" ci="7" mb="0" cb="0"/><line nr="199" mi="0" ci="4" mb="0" cb="0"/><line nr="200" mi="0" ci="14" mb="0" cb="4"/><line nr="202" mi="0" ci="8" mb="0" cb="0"/><line nr="219" mi="0" ci="8" mb="0" cb="2"/><line nr="220" mi="0" ci="9" mb="0" cb="0"/><line nr="240" mi="0" ci="4" mb="0" cb="0"/><line nr="241" mi="0" ci="14" mb="0" cb="4"/><line nr="243" mi="0" ci="8" mb="0" cb="2"/><line nr="244" mi="0" ci="10" mb="0" cb="0"/><line nr="259" mi="0" ci="4" mb="0" cb="0"/><line nr="260" mi="0" ci="16" mb="0" cb="2"/><line nr="261" mi="0" ci="2" mb="0" cb="0"/><line nr="262" mi="0" ci="12" mb="0" cb="2"/><line nr="263" mi="0" ci="13" mb="0" cb="0"/><line nr="264" mi="0" ci="1" mb="0" cb="0"/><line nr="265" mi="0" ci="2" mb="0" cb="0"/><line nr="282" mi="0" ci="4" mb="0" cb="0"/><line nr="283" mi="0" ci="16" mb="0" cb="2"/><line nr="284" mi="0" ci="5" mb="0" cb="0"/><line nr="301" mi="0" ci="4" mb="0" cb="0"/><line nr="302" mi="0" ci="16" mb="0" cb="2"/><line nr="303" mi="0" ci="8" mb="0" cb="0"/><line nr="323" mi="0" ci="4" mb="0" cb="0"/><line nr="324" mi="0" ci="16" mb="0" cb="2"/><line nr="325" mi="0" ci="4" mb="0" cb="0"/><line nr="326" mi="0" ci="14" mb="0" cb="4"/><line nr="328" mi="0" ci="9" mb="0" cb="0"/><line nr="348" mi="0" ci="4" mb="0" cb="0"/><line nr="349" mi="0" ci="16" mb="0" cb="2"/><line nr="350" mi="0" ci="8" mb="0" cb="2"/><line nr="351" mi="0" ci="10" mb="0" cb="0"/><line nr="375" mi="0" ci="4" mb="0" cb="0"/><line nr="376" mi="0" ci="16" mb="0" cb="2"/><line nr="377" mi="0" ci="4" mb="0" cb="0"/><line nr="378" mi="0" ci="14" mb="0" cb="4"/><line nr="380" mi="0" ci="8" mb="0" cb="2"/><line nr="381" mi="0" ci="11" mb="0" cb="0"/><line nr="393" mi="0" ci="2" mb="0" cb="0"/><line nr="394" mi="0" ci="12" mb="0" cb="2"/><line nr="395" mi="0" ci="5" mb="0" cb="0"/><line nr="396" mi="0" ci="1" mb="0" cb="0"/><line nr="397" mi="0" ci="2" mb="0" cb="0"/><line nr="414" mi="0" ci="4" mb="0" cb="0"/><line nr="415" mi="0" ci="16" mb="0" cb="2"/><line nr="416" mi="0" ci="5" mb="0" cb="0"/><line nr="428" mi="0" ci="4" mb="0" cb="0"/><line nr="440" mi="0" ci="8" mb="0" cb="2"/><line nr="441" mi="0" ci="7" mb="0" cb="0"/><line nr="446" mi="0" ci="9" mb="0" cb="0"/><line nr="451" mi="0" ci="3" mb="0" cb="2"/><line nr="452" mi="0" ci="2" mb="0" cb="0"/><line nr="454" mi="0" ci="3" mb="0" cb="2"/><line nr="455" mi="0" ci="2" mb="0" cb="0"/><line nr="457" mi="0" ci="3" mb="0" cb="0"/><line nr="458" mi="0" ci="6" mb="0" cb="0"/><line nr="471" mi="0" ci="4" mb="0" cb="0"/><line nr="472" mi="0" ci="1" mb="0" cb="0"/><line nr="486" mi="0" ci="4" mb="0" cb="0"/><line nr="487" mi="0" ci="6" mb="0" cb="0"/><line nr="488" mi="1" ci="13" mb="1" cb="1"/><line nr="489" mi="0" ci="7" mb="0" cb="0"/><line nr="490" mi="0" ci="2" mb="0" cb="0"/><line nr="506" mi="0" ci="4" mb="0" cb="0"/><line nr="507" mi="0" ci="4" mb="0" cb="0"/><line nr="508" mi="0" ci="17" mb="0" cb="4"/><line nr="509" mi="0" ci="6" mb="0" cb="0"/><line nr="510" mi="0" ci="2" mb="0" cb="0"/><line nr="523" mi="0" ci="4" mb="0" cb="0"/><line nr="524" mi="0" ci="8" mb="0" cb="2"/><line nr="525" mi="0" ci="7" mb="0" cb="0"/><line nr="527" mi="0" ci="2" mb="0" cb="0"/><line nr="541" mi="0" ci="11" mb="0" cb="0"/><line nr="542" mi="0" ci="8" mb="0" cb="0"/><line nr="543" mi="0" ci="1" mb="0" cb="0"/><line nr="544" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="718"/><counter type="BRANCH" missed="1" covered="63"/><counter type="LINE" missed="0" covered="110"/><counter type="COMPLEXITY" missed="1" covered="64"/><counter type="METHOD" missed="0" covered="33"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractMatrixBuilder.java"><line nr="41" mi="0" ci="2" mb="0" cb="0"/><line nr="42" mi="0" ci="8" mb="0" cb="0"/><line nr="43" mi="0" ci="8" mb="0" cb="0"/><line nr="44" mi="0" ci="5" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="49" mi="0" ci="8" mb="0" cb="0"/><line nr="53" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="10" covered="4605"/><counter type="BRANCH" missed="8" covered="346"/><counter type="LINE" missed="1" covered="725"/><counter type="COMPLEXITY" missed="9" covered="357"/><counter type="METHOD" missed="1" covered="188"/><counter type="CLASS" missed="0" covered="12"/></package><package name="com/github/ltennstedt/finnmath/number"><class name="com/github/ltennstedt/finnmath/number/RealComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="65"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)V" line="77"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="92"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="107"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="123"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="142"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="166"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="184"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="199"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="212"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="225"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigDecimal;" line="237"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="249"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="262"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="268"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="273"><counter type="INSTRUCTION" missed="2" covered="29"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="360"/><counter type="BRANCH" missed="1" covered="15"/><counter type="LINE" missed="1" covered="47"/><counter type="COMPLEXITY" missed="1" covered="24"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/ScientificNotation"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;I)V" line="56"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="asString" desc="()Ljava/lang/String;" line="69"><counter type="INSTRUCTION" missed="0" covered="59"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="87"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="92"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="104"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getCoefficient" desc="()Ljava/math/BigDecimal;" line="108"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getExponent" desc="()I" line="112"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="132"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/SimpleComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="66"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="80"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="95"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="111"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="132"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="149"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="167"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="182"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="195"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="208"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigInteger;" line="220"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="232"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="245"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="251"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="256"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="43"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="298"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/Fraction"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="76"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intValue" desc="()I" line="92"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="longValue" desc="()J" line="105"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="floatValue" desc="()F" line="118"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="doubleValue" desc="()D" line="131"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="149"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="171"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="193"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="217"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="237"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="259"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="276"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="289"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="306"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)I" line="323"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="344"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="364"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThan" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="379"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThan" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="394"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="412"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="433"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="normalize" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="455"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="479"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="signum" desc="()I" line="492"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equivalent" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="508"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="514"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="519"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="531"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNumerator" desc="()Ljava/math/BigInteger;" line="535"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getDenominator" desc="()Ljava/math/BigInteger;" line="539"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="41"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="495"/><counter type="BRANCH" missed="0" covered="42"/><counter type="LINE" missed="0" covered="87"/><counter type="COMPLEXITY" missed="0" covered="52"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/AbstractComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="58"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getReal" desc="()Ljava/lang/Object;" line="62"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getImaginary" desc="()Ljava/lang/Object;" line="66"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="RealComplexNumber.java"><line nr="42" mi="0" ci="6" mb="0" cb="0"/><line nr="47" mi="0" ci="6" mb="0" cb="0"/><line nr="52" mi="0" ci="7" mb="0" cb="0"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="66" mi="0" ci="1" mb="0" cb="0"/><line nr="77" mi="0" ci="14" mb="0" cb="0"/><line nr="78" mi="0" ci="3" mb="0" cb="0"/><line nr="79" mi="0" ci="1" mb="0" cb="0"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="93" mi="0" ci="18" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="14" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="16" mb="0" cb="0"/><line nr="125" mi="0" ci="16" mb="0" cb="0"/><line nr="126" mi="0" ci="6" mb="0" cb="0"/><line nr="142" mi="0" ci="4" mb="0" cb="0"/><line nr="143" mi="0" ci="5" mb="0" cb="0"/><line nr="144" mi="0" ci="12" mb="0" cb="0"/><line nr="145" mi="0" ci="17" mb="0" cb="0"/><line nr="146" mi="0" ci="2" mb="0" cb="0"/><line nr="147" mi="0" ci="4" mb="0" cb="0"/><line nr="148" mi="0" ci="13" mb="0" cb="0"/><line nr="149" mi="0" ci="2" mb="0" cb="0"/><line nr="150" mi="0" ci="6" mb="0" cb="0"/><line nr="166" mi="0" ci="9" mb="0" cb="2"/><line nr="167" mi="0" ci="3" mb="0" cb="2"/><line nr="168" mi="0" ci="8" mb="0" cb="0"/><line nr="169" mi="0" ci="3" mb="0" cb="2"/><line nr="170" mi="0" ci="2" mb="0" cb="0"/><line nr="172" mi="0" ci="2" mb="0" cb="0"/><line nr="184" mi="0" ci="12" mb="0" cb="0"/><line nr="199" mi="0" ci="5" mb="0" cb="0"/><line nr="200" mi="0" ci="4" mb="0" cb="0"/><line nr="212" mi="0" ci="8" mb="0" cb="2"/><line nr="225" mi="0" ci="7" mb="0" cb="0"/><line nr="237" mi="0" ci="12" mb="0" cb="0"/><line nr="249" mi="0" ci="11" mb="0" cb="0"/><line nr="262" mi="0" ci="30" mb="0" cb="0"/><line nr="263" mi="0" ci="8" mb="0" cb="0"/><line nr="268" mi="0" ci="14" mb="0" cb="0"/><line nr="273" mi="0" ci="3" mb="0" cb="2"/><line nr="274" mi="0" ci="2" mb="0" cb="0"/><line nr="276" mi="0" ci="3" mb="1" cb="1"/><line nr="277" mi="2" ci="0" mb="0" cb="0"/><line nr="279" mi="0" ci="3" mb="0" cb="0"/><line nr="280" mi="0" ci="18" mb="0" cb="4"/><counter type="INSTRUCTION" missed="2" covered="360"/><counter type="BRANCH" missed="1" covered="15"/><counter type="LINE" missed="1" covered="47"/><counter type="COMPLEXITY" missed="1" covered="24"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Fraction.java"><line nr="41" mi="0" ci="6" mb="0" cb="0"/><line nr="46" mi="0" ci="7" mb="0" cb="0"/><line nr="76" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="0" ci="6" mb="0" cb="0"/><line nr="78" mi="0" ci="6" mb="0" cb="0"/><line nr="79" mi="0" ci="10" mb="0" cb="2"/><line nr="80" mi="0" ci="1" mb="0" cb="0"/><line nr="92" mi="0" ci="14" mb="0" cb="0"/><line nr="105" mi="0" ci="14" mb="0" cb="0"/><line nr="118" mi="0" ci="14" mb="0" cb="0"/><line nr="131" mi="0" ci="14" mb="0" cb="0"/><line nr="149" mi="0" ci="4" mb="0" cb="0"/><line nr="150" mi="0" ci="1" mb="0" cb="0"/><line nr="151" mi="0" ci="11" mb="0" cb="0"/><line nr="152" mi="0" ci="6" mb="0" cb="0"/><line nr="153" mi="0" ci="6" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="0" cb="0"/><line nr="172" mi="0" ci="8" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="0" ci="6" mb="0" cb="0"/><line nr="175" mi="0" ci="6" mb="0" cb="0"/><line nr="193" mi="0" ci="4" mb="0" cb="0"/><line nr="194" mi="0" ci="6" mb="0" cb="0"/><line nr="195" mi="0" ci="6" mb="0" cb="0"/><line nr="196" mi="0" ci="6" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="5" mb="0" cb="0"/><line nr="219" mi="0" ci="5" mb="0" cb="0"/><line nr="237" mi="0" ci="9" mb="0" cb="2"/><line nr="238" mi="0" ci="3" mb="0" cb="2"/><line nr="239" mi="0" ci="8" mb="0" cb="0"/><line nr="240" mi="0" ci="3" mb="0" cb="2"/><line nr="241" mi="0" ci="2" mb="0" cb="0"/><line nr="243" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="9" mb="0" cb="0"/><line nr="276" mi="0" ci="5" mb="0" cb="0"/><line nr="277" mi="0" ci="8" mb="0" cb="0"/><line nr="289" mi="0" ci="9" mb="0" cb="2"/><line nr="306" mi="0" ci="10" mb="0" cb="0"/><line nr="323" mi="0" ci="4" mb="0" cb="0"/><line nr="324" mi="0" ci="4" mb="0" cb="2"/><line nr="325" mi="0" ci="2" mb="0" cb="0"/><line nr="327" mi="0" ci="4" mb="0" cb="2"/><line nr="328" mi="0" ci="2" mb="0" cb="0"/><line nr="330" mi="0" ci="2" mb="0" cb="0"/><line nr="344" mi="0" ci="4" mb="0" cb="0"/><line nr="345" mi="0" ci="3" mb="0" cb="0"/><line nr="346" mi="0" ci="3" mb="0" cb="0"/><line nr="347" mi="0" ci="6" mb="0" cb="0"/><line nr="348" mi="0" ci="6" mb="0" cb="0"/><line nr="349" mi="0" ci="9" mb="0" cb="2"/><line nr="364" mi="0" ci="4" mb="0" cb="0"/><line nr="365" mi="0" ci="12" mb="0" cb="4"/><line nr="379" mi="0" ci="4" mb="0" cb="0"/><line nr="380" mi="0" ci="8" mb="0" cb="2"/><line nr="394" mi="0" ci="4" mb="0" cb="0"/><line nr="395" mi="0" ci="8" mb="0" cb="2"/><line nr="412" mi="0" ci="4" mb="0" cb="0"/><line nr="413" mi="0" ci="4" mb="0" cb="2"/><line nr="414" mi="0" ci="2" mb="0" cb="0"/><line nr="416" mi="0" ci="2" mb="0" cb="0"/><line nr="433" mi="0" ci="4" mb="0" cb="0"/><line nr="434" mi="0" ci="4" mb="0" cb="2"/><line nr="435" mi="0" ci="2" mb="0" cb="0"/><line nr="437" mi="0" ci="2" mb="0" cb="0"/><line nr="455" mi="0" ci="3" mb="0" cb="2"/><line nr="456" mi="0" ci="11" mb="0" cb="0"/><line nr="458" mi="0" ci="3" mb="0" cb="2"/><line nr="459" mi="0" ci="2" mb="0" cb="0"/><line nr="461" mi="0" ci="5" mb="0" cb="2"/><line nr="462" mi="0" ci="3" mb="0" cb="0"/><line nr="464" mi="0" ci="2" mb="0" cb="0"/><line nr="479" mi="0" ci="6" mb="0" cb="0"/><line nr="480" mi="0" ci="12" mb="0" cb="0"/><line nr="492" mi="0" ci="8" mb="0" cb="0"/><line nr="508" mi="0" ci="4" mb="0" cb="0"/><line nr="509" mi="0" ci="8" mb="0" cb="0"/><line nr="514" mi="0" ci="14" mb="0" cb="0"/><line nr="519" mi="0" ci="3" mb="0" cb="2"/><line nr="520" mi="0" ci="2" mb="0" cb="0"/><line nr="522" mi="0" ci="3" mb="0" cb="2"/><line nr="523" mi="0" ci="2" mb="0" cb="0"/><line nr="525" mi="0" ci="3" mb="0" cb="0"/><line nr="526" mi="0" ci="16" mb="0" cb="4"/><line nr="531" mi="0" ci="12" mb="0" cb="0"/><line nr="535" mi="0" ci="3" mb="0" cb="0"/><line nr="539" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="495"/><counter type="BRANCH" missed="0" covered="42"/><counter type="LINE" missed="0" covered="87"/><counter type="COMPLEXITY" missed="0" covered="52"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumber.java"><line nr="43" mi="0" ci="6" mb="0" cb="0"/><line nr="48" mi="0" ci="6" mb="0" cb="0"/><line nr="53" mi="0" ci="7" mb="0" cb="0"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="1" mb="0" cb="0"/><line nr="80" mi="0" ci="4" mb="0" cb="0"/><line nr="81" mi="0" ci="18" mb="0" cb="0"/><line nr="95" mi="0" ci="4" mb="0" cb="0"/><line nr="96" mi="0" ci="14" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="4" mb="0" cb="0"/><line nr="112" mi="0" ci="16" mb="0" cb="0"/><line nr="113" mi="0" ci="16" mb="0" cb="0"/><line nr="114" mi="0" ci="6" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="5" mb="0" cb="0"/><line nr="134" mi="0" ci="10" mb="0" cb="0"/><line nr="149" mi="0" ci="9" mb="0" cb="2"/><line nr="150" mi="0" ci="3" mb="0" cb="2"/><line nr="151" mi="0" ci="8" mb="0" cb="0"/><line nr="152" mi="0" ci="3" mb="0" cb="2"/><line nr="153" mi="0" ci="2" mb="0" cb="0"/><line nr="155" mi="0" ci="2" mb="0" cb="0"/><line nr="167" mi="0" ci="12" mb="0" cb="0"/><line nr="182" mi="0" ci="5" mb="0" cb="0"/><line nr="183" mi="0" ci="4" mb="0" cb="0"/><line nr="195" mi="0" ci="8" mb="0" cb="2"/><line nr="208" mi="0" ci="7" mb="0" cb="0"/><line nr="220" mi="0" ci="12" mb="0" cb="0"/><line nr="232" mi="0" ci="11" mb="0" cb="0"/><line nr="245" mi="0" ci="30" mb="0" cb="0"/><line nr="246" mi="0" ci="8" mb="0" cb="0"/><line nr="251" mi="0" ci="14" mb="0" cb="0"/><line nr="256" mi="0" ci="3" mb="0" cb="2"/><line nr="257" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="3" mb="0" cb="2"/><line nr="260" mi="0" ci="2" mb="0" cb="0"/><line nr="262" mi="0" ci="3" mb="0" cb="0"/><line nr="263" mi="0" ci="18" mb="0" cb="4"/><counter type="INSTRUCTION" missed="0" covered="298"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="39"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractComplexNumber.java"><line nr="45" mi="0" ci="2" mb="0" cb="0"/><line nr="46" mi="0" ci="5" mb="0" cb="0"/><line nr="47" mi="0" ci="5" mb="0" cb="0"/><line nr="48" mi="0" ci="1" mb="0" cb="0"/><line nr="58" mi="0" ci="12" mb="0" cb="0"/><line nr="62" mi="0" ci="3" mb="0" cb="0"/><line nr="66" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="ScientificNotation.java"><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="6" mb="0" cb="0"/><line nr="58" mi="0" ci="3" mb="0" cb="0"/><line nr="59" mi="0" ci="1" mb="0" cb="0"/><line nr="69" mi="0" ci="5" mb="0" cb="2"/><line nr="70" mi="0" ci="2" mb="0" cb="0"/><line nr="72" mi="0" ci="3" mb="0" cb="2"/><line nr="73" mi="0" ci="14" mb="0" cb="0"/><line nr="74" mi="0" ci="1" mb="0" cb="0"/><line nr="76" mi="0" ci="3" mb="0" cb="2"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="79" mi="0" ci="4" mb="0" cb="2"/><line nr="80" mi="0" ci="10" mb="0" cb="0"/><line nr="82" mi="0" ci="13" mb="0" cb="0"/><line nr="87" mi="0" ci="15" mb="0" cb="0"/><line nr="92" mi="0" ci="3" mb="0" cb="2"/><line nr="93" mi="0" ci="2" mb="0" cb="0"/><line nr="95" mi="0" ci="3" mb="0" cb="2"/><line nr="96" mi="0" ci="2" mb="0" cb="0"/><line nr="98" mi="0" ci="3" mb="0" cb="0"/><line nr="99" mi="0" ci="15" mb="0" cb="4"/><line nr="104" mi="0" ci="12" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="132"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="2" covered="1316"/><counter type="BRANCH" missed="1" covered="89"/><counter type="LINE" missed="1" covered="204"/><counter type="COMPLEXITY" missed="1" covered="119"/><counter type="METHOD" missed="0" covered="75"/><counter type="CLASS" missed="0" covered="5"/></package><package name="com/github/ltennstedt/finnmath/util"><class name="com/github/ltennstedt/finnmath/util/MathRandom"><method name="&lt;init&gt;" desc="()V" line="62"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(J)V" line="73"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveLong" desc="(J)J" line="88"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeLong" desc="(J)J" line="103"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLong" desc="(J)J" line="118"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveLongs" desc="(JI)[J" line="138"><counter type="INSTRUCTION" missed="1" covered="35"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeLongs" desc="(JI)[J" line="160"><counter type="INSTRUCTION" missed="1" covered="35"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLongs" desc="(JI)[J" line="182"><counter type="INSTRUCTION" missed="1" covered="35"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveDecimal" desc="(JI)Ljava/math/BigDecimal;" line="204"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeDecimal" desc="(JI)Ljava/math/BigDecimal;" line="226"><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimal" desc="(JI)Ljava/math/BigDecimal;" line="248"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveDecimal" desc="(JI)Ljava/math/BigDecimal;" line="267"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeDecimal" desc="(JI)Ljava/math/BigDecimal;" line="290"><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleDecimal" desc="(JI)Ljava/math/BigDecimal;" line="312"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keepDecimalInBound" desc="(Ljava/math/BigDecimal;J)Ljava/math/BigDecimal;" line="320"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveDecimals" desc="(JII)Ljava/util/List;" line="350"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeDecimals" desc="(JII)Ljava/util/List;" line="376"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimals" desc="(JII)Ljava/util/List;" line="402"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveDecimals" desc="(JII)Ljava/util/List;" line="428"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeDecimals" desc="(JII)Ljava/util/List;" line="454"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleDecimals" desc="(JII)Ljava/util/List;" line="480"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="502"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="520"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="536"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="554"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="571"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="586"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFractions" desc="(JI)Ljava/util/List;" line="607"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFractions" desc="(JI)Ljava/util/List;" line="630"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFractions" desc="(JI)Ljava/util/List;" line="652"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFractions" desc="(JI)Ljava/util/List;" line="675"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFractions" desc="(JI)Ljava/util/List;" line="698"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFractions" desc="(JI)Ljava/util/List;" line="721"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="741"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="758"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="781"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="804"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="825"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="844"><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumbers" desc="(JII)Ljava/util/List;" line="870"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumbers" desc="(JII)Ljava/util/List;" line="896"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntVector" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="919"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntVectors" desc="(JII)Ljava/util/List;" line="943"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="968"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="994"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1023"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1053"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1074"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1102"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1133"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntMatrices" desc="(JIII)Ljava/util/List;" line="1170"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1197"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1223"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1249"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntMatrices" desc="(JII)Ljava/util/List;" line="1275"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntMatrices" desc="(JII)Ljava/util/List;" line="1301"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntMatrices" desc="(JII)Ljava/util/List;" line="1327"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalVector" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="1352"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalVectors" desc="(JIII)Ljava/util/List;" line="1382"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalMatrix" desc="(JIII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1410"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1439"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1470"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1502"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1525"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1555"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1588"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalMatrices" desc="(JIIII)Ljava/util/List;" line="1628"><counter type="INSTRUCTION" missed="0" covered="66"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1660"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1691"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1721"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1751"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1781"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1811"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="1824"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRandom" desc="()Ljava/util/Random;" line="1829"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricDecimalMatrix$23" desc="(IJILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1592"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricDecimalMatrix$22" desc="(Ljava/lang/Integer;JILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1593"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricDecimalMatrix$21" desc="(IJILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1559"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricDecimalMatrix$20" desc="(JILjava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1560"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalDecimalMatrix$19" desc="(ILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1529"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalDecimalMatrix$18" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1530"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularDecimalMatrix$17" desc="(ILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1474"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularDecimalMatrix$16" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1475"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularDecimalMatrix$15" desc="(ILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1443"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularDecimalMatrix$14" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1444"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDecimalMatrix$13" desc="(ILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1416"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDecimalMatrix$12" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="1417"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntMatrix$11" desc="(IJLcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1137"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntMatrix$10" desc="(Ljava/lang/Integer;JLcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1138"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntMatrix$9" desc="(IJLcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1106"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntMatrix$8" desc="(JLjava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1107"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntMatrix$7" desc="(ILcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1078"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntMatrix$6" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1079"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntMatrix$5" desc="(ILcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1027"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntMatrix$4" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1028"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntMatrix$3" desc="(ILcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="998"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntMatrix$2" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="999"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntMatrix$1" desc="(ILcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="973"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntMatrix$0" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="974"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="13" covered="3324"/><counter type="BRANCH" missed="7" covered="461"/><counter type="LINE" missed="4" covered="504"/><counter type="COMPLEXITY" missed="7" covered="326"/><counter type="METHOD" missed="0" covered="99"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/util/SquareRootCalculator"><method name="&lt;init&gt;" desc="()V" line="81"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;)V" line="96"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(ILjava/math/RoundingMode;)V" line="114"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)V" line="133"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;)Ljava/math/BigDecimal;" line="155"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="172"><counter type="INSTRUCTION" missed="1" covered="23"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrtOfPerfectSquare" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="191"><counter type="INSTRUCTION" missed="1" covered="24"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="perfectSquare" desc="(Ljava/math/BigInteger;)Z" line="208"><counter type="INSTRUCTION" missed="1" covered="36"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="heronsMethod" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="218"><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="calculateSuccessor" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="236"><counter type="INSTRUCTION" missed="1" covered="37"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="seedValue" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="246"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scientificNotationForSqrt" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/number/ScientificNotation;" line="256"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="273"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getPrecision" desc="()Ljava/math/BigDecimal;" line="278"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getScale" desc="()I" line="282"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRoundingMode" desc="()Ljava/math/RoundingMode;" line="286"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="46"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="436"/><counter type="BRANCH" missed="4" covered="26"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="4" covered="28"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="MathRandom.java"><line nr="62" mi="0" ci="2" mb="0" cb="0"/><line nr="63" mi="0" ci="5" mb="0" cb="0"/><line nr="64" mi="0" ci="1" mb="0" cb="0"/><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="74" mi="0" ci="6" mb="0" cb="0"/><line nr="75" mi="0" ci="1" mb="0" cb="0"/><line nr="88" mi="0" ci="10" mb="0" cb="2"/><line nr="89" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="10" mb="0" cb="2"/><line nr="104" mi="0" ci="6" mb="0" cb="0"/><line nr="118" mi="0" ci="10" mb="0" cb="2"/><line nr="119" mi="0" ci="4" mb="0" cb="2"/><line nr="120" mi="0" ci="4" mb="0" cb="0"/><line nr="122" mi="0" ci="4" mb="0" cb="0"/><line nr="138" mi="1" ci="9" mb="1" cb="1"/><line nr="139" mi="0" ci="8" mb="0" cb="2"/><line nr="140" mi="0" ci="3" mb="0" cb="0"/><line nr="141" mi="0" ci="7" mb="0" cb="2"/><line nr="142" mi="0" ci="6" mb="0" cb="0"/><line nr="144" mi="0" ci="2" mb="0" cb="0"/><line nr="160" mi="1" ci="9" mb="1" cb="1"/><line nr="161" mi="0" ci="8" mb="0" cb="2"/><line nr="162" mi="0" ci="3" mb="0" cb="0"/><line nr="163" mi="0" ci="7" mb="0" cb="2"/><line nr="164" mi="0" ci="6" mb="0" cb="0"/><line nr="166" mi="0" ci="2" mb="0" cb="0"/><line nr="182" mi="1" ci="9" mb="1" cb="1"/><line nr="183" mi="0" ci="8" mb="0" cb="2"/><line nr="184" mi="0" ci="3" mb="0" cb="0"/><line nr="185" mi="0" ci="7" mb="0" cb="2"/><line nr="186" mi="0" ci="6" mb="0" cb="0"/><line nr="188" mi="0" ci="2" mb="0" cb="0"/><line nr="204" mi="0" ci="10" mb="0" cb="2"/><line nr="205" mi="0" ci="9" mb="0" cb="2"/><line nr="206" mi="0" ci="5" mb="0" cb="0"/><line nr="207" mi="0" ci="4" mb="1" cb="1"/><line nr="208" mi="3" ci="0" mb="0" cb="0"/><line nr="210" mi="0" ci="2" mb="0" cb="0"/><line nr="226" mi="0" ci="10" mb="0" cb="2"/><line nr="227" mi="0" ci="9" mb="0" cb="2"/><line nr="228" mi="0" ci="5" mb="0" cb="0"/><line nr="229" mi="0" ci="4" mb="1" cb="1"/><line nr="230" mi="0" ci="3" mb="0" cb="0"/><line nr="232" mi="2" ci="0" mb="0" cb="0"/><line nr="248" mi="0" ci="10" mb="0" cb="2"/><line nr="249" mi="0" ci="9" mb="0" cb="2"/><line nr="250" mi="0" ci="5" mb="0" cb="0"/><line nr="251" mi="0" ci="8" mb="0" cb="0"/><line nr="267" mi="0" ci="10" mb="0" cb="2"/><line nr="268" mi="0" ci="9" mb="0" cb="2"/><line nr="269" mi="0" ci="5" mb="0" cb="0"/><line nr="270" mi="0" ci="4" mb="1" cb="1"/><line nr="271" mi="3" ci="0" mb="0" cb="0"/><line nr="273" mi="0" ci="2" mb="0" cb="0"/><line nr="290" mi="0" ci="10" mb="0" cb="2"/><line nr="291" mi="0" ci="9" mb="0" cb="2"/><line nr="292" mi="0" ci="5" mb="0" cb="0"/><line nr="293" mi="0" ci="4" mb="1" cb="1"/><line nr="294" mi="0" ci="3" mb="0" cb="0"/><line nr="296" mi="2" ci="0" mb="0" cb="0"/><line nr="312" mi="0" ci="10" mb="0" cb="2"/><line nr="313" mi="0" ci="9" mb="0" cb="2"/><line nr="314" mi="0" ci="5" mb="0" cb="0"/><line nr="315" mi="0" ci="8" mb="0" cb="0"/><line nr="320" mi="0" ci="2" mb="0" cb="0"/><line nr="321" mi="0" ci="3" mb="0" cb="0"/><line nr="322" mi="0" ci="5" mb="0" cb="2"/><line nr="323" mi="0" ci="5" mb="0" cb="2"/><line nr="324" mi="0" ci="5" mb="0" cb="0"/><line nr="327" mi="0" ci="6" mb="0" cb="2"/><line nr="328" mi="0" ci="5" mb="0" cb="0"/><line nr="331" mi="0" ci="2" mb="0" cb="0"/><line nr="350" mi="0" ci="10" mb="0" cb="2"/><line nr="351" mi="0" ci="9" mb="0" cb="2"/><line nr="352" mi="0" ci="8" mb="0" cb="2"/><line nr="353" mi="0" ci="5" mb="0" cb="0"/><line nr="354" mi="0" ci="7" mb="0" cb="2"/><line nr="355" mi="0" ci="7" mb="0" cb="0"/><line nr="357" mi="0" ci="2" mb="0" cb="0"/><line nr="376" mi="0" ci="10" mb="0" cb="2"/><line nr="377" mi="0" ci="9" mb="0" cb="2"/><line nr="378" mi="0" ci="8" mb="0" cb="2"/><line nr="379" mi="0" ci="5" mb="0" cb="0"/><line nr="380" mi="0" ci="7" mb="0" cb="2"/><line nr="381" mi="0" ci="7" mb="0" cb="0"/><line nr="383" mi="0" ci="2" mb="0" cb="0"/><line nr="402" mi="0" ci="10" mb="0" cb="2"/><line nr="403" mi="0" ci="9" mb="0" cb="2"/><line nr="404" mi="0" ci="8" mb="0" cb="2"/><line nr="405" mi="0" ci="5" mb="0" cb="0"/><line nr="406" mi="0" ci="7" mb="0" cb="2"/><line nr="407" mi="0" ci="7" mb="0" cb="0"/><line nr="409" mi="0" ci="2" mb="0" cb="0"/><line nr="428" mi="0" ci="10" mb="0" cb="2"/><line nr="429" mi="0" ci="9" mb="0" cb="2"/><line nr="430" mi="0" ci="8" mb="0" cb="2"/><line nr="431" mi="0" ci="5" mb="0" cb="0"/><line nr="432" mi="0" ci="7" mb="0" cb="2"/><line nr="433" mi="0" ci="7" mb="0" cb="0"/><line nr="435" mi="0" ci="2" mb="0" cb="0"/><line nr="454" mi="0" ci="10" mb="0" cb="2"/><line nr="455" mi="0" ci="9" mb="0" cb="2"/><line nr="456" mi="0" ci="8" mb="0" cb="2"/><line nr="457" mi="0" ci="5" mb="0" cb="0"/><line nr="458" mi="0" ci="7" mb="0" cb="2"/><line nr="459" mi="0" ci="7" mb="0" cb="0"/><line nr="461" mi="0" ci="2" mb="0" cb="0"/><line nr="480" mi="0" ci="10" mb="0" cb="2"/><line nr="481" mi="0" ci="9" mb="0" cb="2"/><line nr="482" mi="0" ci="8" mb="0" cb="2"/><line nr="483" mi="0" ci="5" mb="0" cb="0"/><line nr="484" mi="0" ci="7" mb="0" cb="2"/><line nr="485" mi="0" ci="7" mb="0" cb="0"/><line nr="487" mi="0" ci="2" mb="0" cb="0"/><line nr="502" mi="0" ci="10" mb="0" cb="2"/><line nr="503" mi="0" ci="5" mb="0" cb="0"/><line nr="504" mi="0" ci="5" mb="0" cb="0"/><line nr="505" mi="0" ci="6" mb="0" cb="0"/><line nr="520" mi="0" ci="10" mb="0" cb="2"/><line nr="521" mi="0" ci="5" mb="0" cb="0"/><line nr="536" mi="0" ci="10" mb="0" cb="2"/><line nr="537" mi="0" ci="4" mb="0" cb="2"/><line nr="538" mi="0" ci="4" mb="0" cb="0"/><line nr="540" mi="0" ci="4" mb="0" cb="0"/><line nr="554" mi="0" ci="10" mb="0" cb="2"/><line nr="555" mi="0" ci="5" mb="0" cb="0"/><line nr="556" mi="0" ci="5" mb="0" cb="0"/><line nr="557" mi="0" ci="6" mb="0" cb="0"/><line nr="571" mi="0" ci="10" mb="0" cb="2"/><line nr="572" mi="0" ci="5" mb="0" cb="0"/><line nr="586" mi="0" ci="10" mb="0" cb="2"/><line nr="587" mi="0" ci="4" mb="0" cb="2"/><line nr="588" mi="0" ci="4" mb="0" cb="0"/><line nr="590" mi="0" ci="4" mb="0" cb="0"/><line nr="607" mi="0" ci="10" mb="0" cb="2"/><line nr="608" mi="0" ci="8" mb="0" cb="2"/><line nr="609" mi="0" ci="5" mb="0" cb="0"/><line nr="610" mi="0" ci="7" mb="0" cb="2"/><line nr="611" mi="0" ci="6" mb="0" cb="0"/><line nr="613" mi="0" ci="2" mb="0" cb="0"/><line nr="630" mi="0" ci="10" mb="0" cb="2"/><line nr="631" mi="0" ci="8" mb="0" cb="2"/><line nr="632" mi="0" ci="5" mb="0" cb="0"/><line nr="633" mi="0" ci="7" mb="0" cb="2"/><line nr="634" mi="0" ci="6" mb="0" cb="0"/><line nr="636" mi="0" ci="2" mb="0" cb="0"/><line nr="652" mi="0" ci="10" mb="0" cb="2"/><line nr="653" mi="0" ci="8" mb="0" cb="2"/><line nr="654" mi="0" ci="5" mb="0" cb="0"/><line nr="655" mi="0" ci="7" mb="0" cb="2"/><line nr="656" mi="0" ci="6" mb="0" cb="0"/><line nr="658" mi="0" ci="2" mb="0" cb="0"/><line nr="675" mi="0" ci="10" mb="0" cb="2"/><line nr="676" mi="0" ci="8" mb="0" cb="2"/><line nr="677" mi="0" ci="5" mb="0" cb="0"/><line nr="678" mi="0" ci="7" mb="0" cb="2"/><line nr="679" mi="0" ci="6" mb="0" cb="0"/><line nr="681" mi="0" ci="2" mb="0" cb="0"/><line nr="698" mi="0" ci="10" mb="0" cb="2"/><line nr="699" mi="0" ci="8" mb="0" cb="2"/><line nr="700" mi="0" ci="5" mb="0" cb="0"/><line nr="701" mi="0" ci="7" mb="0" cb="2"/><line nr="702" mi="0" ci="6" mb="0" cb="0"/><line nr="704" mi="0" ci="2" mb="0" cb="0"/><line nr="721" mi="0" ci="10" mb="0" cb="2"/><line nr="722" mi="0" ci="8" mb="0" cb="2"/><line nr="723" mi="0" ci="5" mb="0" cb="0"/><line nr="724" mi="0" ci="7" mb="0" cb="2"/><line nr="725" mi="0" ci="6" mb="0" cb="0"/><line nr="727" mi="0" ci="2" mb="0" cb="0"/><line nr="741" mi="0" ci="10" mb="0" cb="2"/><line nr="742" mi="0" ci="5" mb="0" cb="0"/><line nr="743" mi="0" ci="5" mb="0" cb="0"/><line nr="744" mi="0" ci="6" mb="0" cb="0"/><line nr="758" mi="0" ci="10" mb="0" cb="2"/><line nr="759" mi="0" ci="5" mb="0" cb="0"/><line nr="760" mi="0" ci="12" mb="0" cb="2"/><line nr="761" mi="0" ci="4" mb="0" cb="2"/><line nr="762" mi="0" ci="7" mb="0" cb="0"/><line nr="764" mi="0" ci="7" mb="0" cb="0"/><line nr="781" mi="0" ci="10" mb="0" cb="2"/><line nr="782" mi="0" ci="8" mb="0" cb="2"/><line nr="783" mi="0" ci="5" mb="0" cb="0"/><line nr="784" mi="0" ci="7" mb="0" cb="2"/><line nr="785" mi="0" ci="6" mb="0" cb="0"/><line nr="787" mi="0" ci="2" mb="0" cb="0"/><line nr="804" mi="0" ci="10" mb="0" cb="2"/><line nr="805" mi="0" ci="8" mb="0" cb="2"/><line nr="806" mi="0" ci="5" mb="0" cb="0"/><line nr="807" mi="0" ci="7" mb="0" cb="2"/><line nr="808" mi="0" ci="6" mb="0" cb="0"/><line nr="810" mi="0" ci="2" mb="0" cb="0"/><line nr="825" mi="0" ci="10" mb="0" cb="2"/><line nr="826" mi="0" ci="9" mb="0" cb="2"/><line nr="827" mi="0" ci="5" mb="0" cb="0"/><line nr="828" mi="0" ci="5" mb="0" cb="0"/><line nr="829" mi="0" ci="6" mb="0" cb="0"/><line nr="844" mi="0" ci="10" mb="0" cb="2"/><line nr="845" mi="0" ci="9" mb="0" cb="2"/><line nr="846" mi="0" ci="5" mb="0" cb="0"/><line nr="848" mi="0" ci="14" mb="0" cb="2"/><line nr="849" mi="0" ci="4" mb="0" cb="2"/><line nr="850" mi="0" ci="6" mb="0" cb="0"/><line nr="852" mi="0" ci="6" mb="0" cb="0"/><line nr="870" mi="0" ci="10" mb="0" cb="2"/><line nr="871" mi="0" ci="9" mb="0" cb="2"/><line nr="872" mi="0" ci="8" mb="0" cb="2"/><line nr="873" mi="0" ci="5" mb="0" cb="0"/><line nr="874" mi="0" ci="7" mb="0" cb="2"/><line nr="875" mi="0" ci="7" mb="0" cb="0"/><line nr="877" mi="0" ci="2" mb="0" cb="0"/><line nr="896" mi="0" ci="10" mb="0" cb="2"/><line nr="897" mi="0" ci="9" mb="0" cb="2"/><line nr="898" mi="0" ci="8" mb="0" cb="2"/><line nr="899" mi="0" ci="5" mb="0" cb="0"/><line nr="900" mi="0" ci="7" mb="0" cb="2"/><line nr="901" mi="0" ci="7" mb="0" cb="0"/><line nr="903" mi="0" ci="2" mb="0" cb="0"/><line nr="919" mi="0" ci="10" mb="0" cb="2"/><line nr="920" mi="0" ci="8" mb="0" cb="2"/><line nr="921" mi="0" ci="3" mb="0" cb="0"/><line nr="922" mi="0" ci="7" mb="0" cb="2"/><line nr="923" mi="0" ci="7" mb="0" cb="0"/><line nr="925" mi="0" ci="3" mb="0" cb="0"/><line nr="943" mi="0" ci="10" mb="0" cb="2"/><line nr="944" mi="0" ci="8" mb="0" cb="2"/><line nr="945" mi="0" ci="8" mb="0" cb="2"/><line nr="946" mi="0" ci="5" mb="0" cb="0"/><line nr="947" mi="0" ci="7" mb="0" cb="2"/><line nr="948" mi="0" ci="7" mb="0" cb="0"/><line nr="950" mi="0" ci="2" mb="0" cb="0"/><line nr="968" mi="0" ci="10" mb="0" cb="2"/><line nr="969" mi="0" ci="8" mb="0" cb="2"/><line nr="970" mi="0" ci="8" mb="0" cb="2"/><line nr="971" mi="0" ci="4" mb="0" cb="0"/><line nr="972" mi="0" ci="13" mb="0" cb="0"/><line nr="973" mi="0" ci="13" mb="0" cb="0"/><line nr="974" mi="0" ci="9" mb="0" cb="0"/><line nr="975" mi="0" ci="1" mb="0" cb="0"/><line nr="976" mi="0" ci="1" mb="0" cb="0"/><line nr="977" mi="0" ci="3" mb="0" cb="0"/><line nr="994" mi="0" ci="10" mb="0" cb="2"/><line nr="995" mi="0" ci="8" mb="0" cb="2"/><line nr="996" mi="0" ci="4" mb="0" cb="0"/><line nr="997" mi="0" ci="13" mb="0" cb="0"/><line nr="998" mi="0" ci="13" mb="0" cb="0"/><line nr="999" mi="0" ci="5" mb="0" cb="2"/><line nr="1000" mi="0" ci="10" mb="0" cb="0"/><line nr="1002" mi="0" ci="6" mb="0" cb="0"/><line nr="1004" mi="0" ci="1" mb="0" cb="0"/><line nr="1005" mi="0" ci="1" mb="0" cb="0"/><line nr="1006" mi="0" ci="3" mb="0" cb="0"/><line nr="1023" mi="0" ci="10" mb="0" cb="2"/><line nr="1024" mi="0" ci="8" mb="0" cb="2"/><line nr="1025" mi="0" ci="4" mb="0" cb="0"/><line nr="1026" mi="0" ci="13" mb="0" cb="0"/><line nr="1027" mi="0" ci="13" mb="0" cb="0"/><line nr="1028" mi="0" ci="5" mb="0" cb="2"/><line nr="1029" mi="0" ci="10" mb="0" cb="0"/><line nr="1031" mi="0" ci="6" mb="0" cb="0"/><line nr="1033" mi="0" ci="1" mb="0" cb="0"/><line nr="1034" mi="0" ci="1" mb="0" cb="0"/><line nr="1035" mi="0" ci="3" mb="0" cb="0"/><line nr="1053" mi="0" ci="10" mb="0" cb="2"/><line nr="1054" mi="0" ci="8" mb="0" cb="2"/><line nr="1055" mi="0" ci="4" mb="0" cb="2"/><line nr="1056" mi="0" ci="5" mb="0" cb="0"/><line nr="1058" mi="0" ci="5" mb="0" cb="0"/><line nr="1074" mi="0" ci="10" mb="0" cb="2"/><line nr="1075" mi="0" ci="8" mb="0" cb="2"/><line nr="1076" mi="0" ci="4" mb="0" cb="0"/><line nr="1077" mi="0" ci="13" mb="0" cb="0"/><line nr="1078" mi="0" ci="13" mb="0" cb="0"/><line nr="1079" mi="0" ci="4" mb="0" cb="2"/><line nr="1080" mi="0" ci="10" mb="0" cb="0"/><line nr="1082" mi="0" ci="6" mb="0" cb="0"/><line nr="1084" mi="0" ci="1" mb="0" cb="0"/><line nr="1085" mi="0" ci="1" mb="0" cb="0"/><line nr="1086" mi="0" ci="3" mb="0" cb="0"/><line nr="1102" mi="0" ci="10" mb="0" cb="2"/><line nr="1103" mi="0" ci="8" mb="0" cb="2"/><line nr="1104" mi="0" ci="4" mb="0" cb="0"/><line nr="1105" mi="0" ci="13" mb="0" cb="0"/><line nr="1106" mi="0" ci="13" mb="0" cb="0"/><line nr="1107" mi="0" ci="5" mb="0" cb="0"/><line nr="1108" mi="0" ci="5" mb="0" cb="2"/><line nr="1109" mi="0" ci="6" mb="0" cb="0"/><line nr="1110" mi="0" ci="6" mb="0" cb="0"/><line nr="1112" mi="0" ci="4" mb="0" cb="2"/><line nr="1113" mi="0" ci="6" mb="0" cb="0"/><line nr="1115" mi="0" ci="1" mb="0" cb="0"/><line nr="1116" mi="0" ci="1" mb="0" cb="0"/><line nr="1117" mi="0" ci="3" mb="0" cb="0"/><line nr="1133" mi="0" ci="10" mb="0" cb="2"/><line nr="1134" mi="0" ci="8" mb="0" cb="2"/><line nr="1135" mi="0" ci="4" mb="0" cb="0"/><line nr="1136" mi="0" ci="13" mb="0" cb="0"/><line nr="1137" mi="0" ci="13" mb="0" cb="0"/><line nr="1138" mi="0" ci="5" mb="0" cb="2"/><line nr="1139" mi="0" ci="5" mb="0" cb="0"/><line nr="1140" mi="0" ci="6" mb="0" cb="0"/><line nr="1141" mi="0" ci="7" mb="0" cb="0"/><line nr="1143" mi="0" ci="4" mb="0" cb="2"/><line nr="1144" mi="0" ci="6" mb="0" cb="0"/><line nr="1146" mi="0" ci="1" mb="0" cb="0"/><line nr="1147" mi="0" ci="1" mb="0" cb="0"/><line nr="1148" mi="0" ci="3" mb="0" cb="0"/><line nr="1170" mi="0" ci="10" mb="0" cb="2"/><line nr="1171" mi="0" ci="8" mb="0" cb="2"/><line nr="1172" mi="0" ci="8" mb="0" cb="2"/><line nr="1173" mi="0" ci="8" mb="0" cb="2"/><line nr="1174" mi="0" ci="5" mb="0" cb="0"/><line nr="1175" mi="0" ci="7" mb="0" cb="2"/><line nr="1176" mi="0" ci="8" mb="0" cb="0"/><line nr="1178" mi="0" ci="2" mb="0" cb="0"/><line nr="1197" mi="0" ci="10" mb="0" cb="2"/><line nr="1198" mi="0" ci="8" mb="0" cb="2"/><line nr="1199" mi="0" ci="8" mb="0" cb="2"/><line nr="1200" mi="0" ci="5" mb="0" cb="0"/><line nr="1201" mi="0" ci="7" mb="0" cb="2"/><line nr="1202" mi="0" ci="7" mb="0" cb="0"/><line nr="1204" mi="0" ci="2" mb="0" cb="0"/><line nr="1223" mi="0" ci="10" mb="0" cb="2"/><line nr="1224" mi="0" ci="8" mb="0" cb="2"/><line nr="1225" mi="0" ci="8" mb="0" cb="2"/><line nr="1226" mi="0" ci="5" mb="0" cb="0"/><line nr="1227" mi="0" ci="7" mb="0" cb="2"/><line nr="1228" mi="0" ci="7" mb="0" cb="0"/><line nr="1230" mi="0" ci="2" mb="0" cb="0"/><line nr="1249" mi="0" ci="10" mb="0" cb="2"/><line nr="1250" mi="0" ci="8" mb="0" cb="2"/><line nr="1251" mi="0" ci="8" mb="0" cb="2"/><line nr="1252" mi="0" ci="5" mb="0" cb="0"/><line nr="1253" mi="0" ci="7" mb="0" cb="2"/><line nr="1254" mi="0" ci="7" mb="0" cb="0"/><line nr="1256" mi="0" ci="2" mb="0" cb="0"/><line nr="1275" mi="0" ci="10" mb="0" cb="2"/><line nr="1276" mi="0" ci="8" mb="0" cb="2"/><line nr="1277" mi="0" ci="8" mb="0" cb="2"/><line nr="1278" mi="0" ci="5" mb="0" cb="0"/><line nr="1279" mi="0" ci="7" mb="0" cb="2"/><line nr="1280" mi="0" ci="7" mb="0" cb="0"/><line nr="1282" mi="0" ci="2" mb="0" cb="0"/><line nr="1301" mi="0" ci="10" mb="0" cb="2"/><line nr="1302" mi="0" ci="8" mb="0" cb="2"/><line nr="1303" mi="0" ci="8" mb="0" cb="2"/><line nr="1304" mi="0" ci="5" mb="0" cb="0"/><line nr="1305" mi="0" ci="7" mb="0" cb="2"/><line nr="1306" mi="0" ci="7" mb="0" cb="0"/><line nr="1308" mi="0" ci="2" mb="0" cb="0"/><line nr="1327" mi="0" ci="10" mb="0" cb="2"/><line nr="1328" mi="0" ci="8" mb="0" cb="2"/><line nr="1329" mi="0" ci="8" mb="0" cb="2"/><line nr="1330" mi="0" ci="5" mb="0" cb="0"/><line nr="1331" mi="0" ci="7" mb="0" cb="2"/><line nr="1332" mi="0" ci="7" mb="0" cb="0"/><line nr="1334" mi="0" ci="2" mb="0" cb="0"/><line nr="1352" mi="0" ci="10" mb="0" cb="2"/><line nr="1353" mi="0" ci="9" mb="0" cb="2"/><line nr="1354" mi="0" ci="8" mb="0" cb="2"/><line nr="1355" mi="0" ci="3" mb="0" cb="0"/><line nr="1356" mi="0" ci="7" mb="0" cb="2"/><line nr="1357" mi="0" ci="7" mb="0" cb="0"/><line nr="1359" mi="0" ci="3" mb="0" cb="0"/><line nr="1382" mi="0" ci="10" mb="0" cb="2"/><line nr="1383" mi="0" ci="9" mb="0" cb="2"/><line nr="1384" mi="0" ci="8" mb="0" cb="2"/><line nr="1385" mi="0" ci="8" mb="0" cb="2"/><line nr="1386" mi="0" ci="5" mb="0" cb="0"/><line nr="1387" mi="0" ci="7" mb="0" cb="2"/><line nr="1388" mi="0" ci="8" mb="0" cb="0"/><line nr="1390" mi="0" ci="2" mb="0" cb="0"/><line nr="1410" mi="0" ci="10" mb="0" cb="2"/><line nr="1411" mi="0" ci="9" mb="0" cb="2"/><line nr="1412" mi="0" ci="8" mb="0" cb="2"/><line nr="1413" mi="0" ci="8" mb="0" cb="2"/><line nr="1414" mi="0" ci="4" mb="0" cb="0"/><line nr="1415" mi="0" ci="14" mb="0" cb="0"/><line nr="1416" mi="0" ci="14" mb="0" cb="0"/><line nr="1417" mi="0" ci="9" mb="0" cb="0"/><line nr="1418" mi="0" ci="1" mb="0" cb="0"/><line nr="1419" mi="0" ci="1" mb="0" cb="0"/><line nr="1420" mi="0" ci="3" mb="0" cb="0"/><line nr="1439" mi="0" ci="10" mb="0" cb="2"/><line nr="1440" mi="0" ci="8" mb="0" cb="2"/><line nr="1441" mi="0" ci="4" mb="0" cb="0"/><line nr="1442" mi="0" ci="14" mb="0" cb="0"/><line nr="1443" mi="0" ci="14" mb="0" cb="0"/><line nr="1444" mi="0" ci="5" mb="0" cb="2"/><line nr="1445" mi="0" ci="10" mb="0" cb="0"/><line nr="1447" mi="0" ci="6" mb="0" cb="0"/><line nr="1449" mi="0" ci="1" mb="0" cb="0"/><line nr="1450" mi="0" ci="1" mb="0" cb="0"/><line nr="1451" mi="0" ci="3" mb="0" cb="0"/><line nr="1470" mi="0" ci="10" mb="0" cb="2"/><line nr="1471" mi="0" ci="8" mb="0" cb="2"/><line nr="1472" mi="0" ci="4" mb="0" cb="0"/><line nr="1473" mi="0" ci="14" mb="0" cb="0"/><line nr="1474" mi="0" ci="14" mb="0" cb="0"/><line nr="1475" mi="0" ci="5" mb="0" cb="2"/><line nr="1476" mi="0" ci="10" mb="0" cb="0"/><line nr="1478" mi="0" ci="6" mb="0" cb="0"/><line nr="1480" mi="0" ci="1" mb="0" cb="0"/><line nr="1481" mi="0" ci="1" mb="0" cb="0"/><line nr="1482" mi="0" ci="3" mb="0" cb="0"/><line nr="1502" mi="0" ci="10" mb="0" cb="2"/><line nr="1503" mi="0" ci="8" mb="0" cb="2"/><line nr="1504" mi="0" ci="4" mb="0" cb="2"/><line nr="1505" mi="0" ci="6" mb="0" cb="0"/><line nr="1507" mi="0" ci="6" mb="0" cb="0"/><line nr="1525" mi="0" ci="10" mb="0" cb="2"/><line nr="1526" mi="0" ci="8" mb="0" cb="2"/><line nr="1527" mi="0" ci="4" mb="0" cb="0"/><line nr="1528" mi="0" ci="14" mb="0" cb="0"/><line nr="1529" mi="0" ci="14" mb="0" cb="0"/><line nr="1530" mi="0" ci="4" mb="0" cb="2"/><line nr="1531" mi="0" ci="10" mb="0" cb="0"/><line nr="1533" mi="0" ci="6" mb="0" cb="0"/><line nr="1535" mi="0" ci="1" mb="0" cb="0"/><line nr="1536" mi="0" ci="1" mb="0" cb="0"/><line nr="1537" mi="0" ci="3" mb="0" cb="0"/><line nr="1555" mi="0" ci="10" mb="0" cb="2"/><line nr="1556" mi="0" ci="8" mb="0" cb="2"/><line nr="1557" mi="0" ci="4" mb="0" cb="0"/><line nr="1558" mi="0" ci="14" mb="0" cb="0"/><line nr="1559" mi="0" ci="14" mb="0" cb="0"/><line nr="1560" mi="0" ci="5" mb="0" cb="0"/><line nr="1561" mi="0" ci="5" mb="0" cb="2"/><line nr="1562" mi="0" ci="6" mb="0" cb="0"/><line nr="1563" mi="0" ci="6" mb="0" cb="0"/><line nr="1565" mi="0" ci="4" mb="0" cb="2"/><line nr="1566" mi="0" ci="6" mb="0" cb="0"/><line nr="1568" mi="0" ci="1" mb="0" cb="0"/><line nr="1569" mi="0" ci="1" mb="0" cb="0"/><line nr="1570" mi="0" ci="3" mb="0" cb="0"/><line nr="1588" mi="0" ci="10" mb="0" cb="2"/><line nr="1589" mi="0" ci="8" mb="0" cb="2"/><line nr="1590" mi="0" ci="4" mb="0" cb="0"/><line nr="1591" mi="0" ci="14" mb="0" cb="0"/><line nr="1592" mi="0" ci="14" mb="0" cb="0"/><line nr="1593" mi="0" ci="5" mb="0" cb="2"/><line nr="1594" mi="0" ci="5" mb="0" cb="0"/><line nr="1595" mi="0" ci="6" mb="0" cb="0"/><line nr="1596" mi="0" ci="7" mb="0" cb="0"/><line nr="1598" mi="0" ci="4" mb="0" cb="2"/><line nr="1599" mi="0" ci="6" mb="0" cb="0"/><line nr="1601" mi="0" ci="1" mb="0" cb="0"/><line nr="1603" mi="0" ci="1" mb="0" cb="0"/><line nr="1604" mi="0" ci="3" mb="0" cb="0"/><line nr="1628" mi="0" ci="10" mb="0" cb="2"/><line nr="1629" mi="0" ci="9" mb="0" cb="2"/><line nr="1630" mi="0" ci="8" mb="0" cb="2"/><line nr="1631" mi="0" ci="8" mb="0" cb="2"/><line nr="1632" mi="0" ci="8" mb="0" cb="2"/><line nr="1633" mi="0" ci="5" mb="0" cb="0"/><line nr="1634" mi="0" ci="7" mb="0" cb="2"/><line nr="1635" mi="0" ci="9" mb="0" cb="0"/><line nr="1637" mi="0" ci="2" mb="0" cb="0"/><line nr="1660" mi="0" ci="10" mb="0" cb="2"/><line nr="1661" mi="0" ci="9" mb="0" cb="2"/><line nr="1662" mi="0" ci="8" mb="0" cb="2"/><line nr="1663" mi="0" ci="8" mb="0" cb="2"/><line nr="1664" mi="0" ci="5" mb="0" cb="0"/><line nr="1665" mi="0" ci="7" mb="0" cb="2"/><line nr="1666" mi="0" ci="8" mb="0" cb="0"/><line nr="1668" mi="0" ci="2" mb="0" cb="0"/><line nr="1691" mi="0" ci="10" mb="0" cb="2"/><line nr="1692" mi="0" ci="9" mb="0" cb="2"/><line nr="1693" mi="0" ci="8" mb="0" cb="2"/><line nr="1694" mi="0" ci="8" mb="0" cb="2"/><line nr="1695" mi="0" ci="5" mb="0" cb="0"/><line nr="1696" mi="0" ci="7" mb="0" cb="2"/><line nr="1697" mi="0" ci="8" mb="0" cb="0"/><line nr="1699" mi="0" ci="2" mb="0" cb="0"/><line nr="1721" mi="0" ci="10" mb="0" cb="2"/><line nr="1722" mi="0" ci="9" mb="0" cb="2"/><line nr="1723" mi="0" ci="8" mb="0" cb="2"/><line nr="1724" mi="0" ci="8" mb="0" cb="2"/><line nr="1725" mi="0" ci="5" mb="0" cb="0"/><line nr="1726" mi="0" ci="7" mb="0" cb="2"/><line nr="1727" mi="0" ci="8" mb="0" cb="0"/><line nr="1729" mi="0" ci="2" mb="0" cb="0"/><line nr="1751" mi="0" ci="10" mb="0" cb="2"/><line nr="1752" mi="0" ci="9" mb="0" cb="2"/><line nr="1753" mi="0" ci="8" mb="0" cb="2"/><line nr="1754" mi="0" ci="8" mb="0" cb="2"/><line nr="1755" mi="0" ci="5" mb="0" cb="0"/><line nr="1756" mi="0" ci="7" mb="0" cb="2"/><line nr="1757" mi="0" ci="8" mb="0" cb="0"/><line nr="1759" mi="0" ci="2" mb="0" cb="0"/><line nr="1781" mi="0" ci="10" mb="0" cb="2"/><line nr="1782" mi="0" ci="9" mb="0" cb="2"/><line nr="1783" mi="0" ci="8" mb="0" cb="2"/><line nr="1784" mi="0" ci="8" mb="0" cb="2"/><line nr="1785" mi="0" ci="5" mb="0" cb="0"/><line nr="1786" mi="0" ci="7" mb="0" cb="2"/><line nr="1787" mi="0" ci="8" mb="0" cb="0"/><line nr="1789" mi="0" ci="2" mb="0" cb="0"/><line nr="1811" mi="0" ci="10" mb="0" cb="2"/><line nr="1812" mi="0" ci="9" mb="0" cb="2"/><line nr="1813" mi="0" ci="8" mb="0" cb="2"/><line nr="1814" mi="0" ci="8" mb="0" cb="2"/><line nr="1815" mi="0" ci="5" mb="0" cb="0"/><line nr="1816" mi="0" ci="7" mb="0" cb="2"/><line nr="1817" mi="0" ci="8" mb="0" cb="0"/><line nr="1819" mi="0" ci="2" mb="0" cb="0"/><line nr="1824" mi="0" ci="8" mb="0" cb="0"/><line nr="1829" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="3324"/><counter type="BRANCH" missed="7" covered="461"/><counter type="LINE" missed="4" covered="504"/><counter type="COMPLEXITY" missed="7" covered="326"/><counter type="METHOD" missed="0" covered="99"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SquareRootCalculator.java"><line nr="46" mi="0" ci="3" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="0" ci="3" mb="0" cb="0"/><line nr="83" mi="0" ci="3" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><line nr="85" mi="0" ci="1" mb="0" cb="0"/><line nr="96" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="0" ci="14" mb="0" cb="4"/><line nr="100" mi="0" ci="3" mb="0" cb="0"/><line nr="101" mi="0" ci="3" mb="0" cb="0"/><line nr="102" mi="0" ci="3" mb="0" cb="0"/><line nr="103" mi="0" ci="1" mb="0" cb="0"/><line nr="114" mi="0" ci="2" mb="0" cb="0"/><line nr="115" mi="0" ci="8" mb="0" cb="2"/><line nr="116" mi="0" ci="3" mb="0" cb="0"/><line nr="117" mi="0" ci="3" mb="0" cb="0"/><line nr="118" mi="0" ci="3" mb="0" cb="0"/><line nr="119" mi="0" ci="1" mb="0" cb="0"/><line nr="133" mi="0" ci="2" mb="0" cb="0"/><line nr="134" mi="0" ci="4" mb="0" cb="0"/><line nr="135" mi="0" ci="14" mb="0" cb="4"/><line nr="137" mi="0" ci="8" mb="0" cb="2"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><line nr="139" mi="0" ci="3" mb="0" cb="0"/><line nr="140" mi="0" ci="3" mb="0" cb="0"/><line nr="141" mi="0" ci="1" mb="0" cb="0"/><line nr="155" mi="0" ci="4" mb="0" cb="0"/><line nr="156" mi="0" ci="11" mb="0" cb="2"/><line nr="157" mi="0" ci="7" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="1" ci="10" mb="1" cb="1"/><line nr="174" mi="0" ci="9" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="1" ci="10" mb="1" cb="1"/><line nr="193" mi="0" ci="6" mb="0" cb="0"/><line nr="194" mi="0" ci="4" mb="0" cb="0"/><line nr="208" mi="0" ci="4" mb="0" cb="0"/><line nr="209" mi="1" ci="10" mb="1" cb="1"/><line nr="210" mi="0" ci="2" mb="0" cb="0"/><line nr="211" mi="0" ci="12" mb="0" cb="2"/><line nr="212" mi="0" ci="4" mb="0" cb="0"/><line nr="214" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="7" mb="0" cb="0"/><line nr="219" mi="0" ci="1" mb="0" cb="0"/><line nr="220" mi="0" ci="4" mb="0" cb="0"/><line nr="221" mi="0" ci="5" mb="0" cb="0"/><line nr="222" mi="0" ci="5" mb="0" cb="0"/><line nr="223" mi="0" ci="2" mb="0" cb="0"/><line nr="224" mi="0" ci="9" mb="0" cb="2"/><line nr="225" mi="0" ci="8" mb="0" cb="0"/><line nr="226" mi="0" ci="2" mb="0" cb="0"/><line nr="227" mi="0" ci="5" mb="0" cb="0"/><line nr="228" mi="0" ci="5" mb="0" cb="0"/><line nr="230" mi="0" ci="5" mb="0" cb="0"/><line nr="231" mi="0" ci="7" mb="0" cb="0"/><line nr="232" mi="0" ci="2" mb="0" cb="0"/><line nr="236" mi="0" ci="3" mb="0" cb="0"/><line nr="237" mi="0" ci="5" mb="0" cb="0"/><line nr="238" mi="0" ci="5" mb="0" cb="0"/><line nr="239" mi="0" ci="4" mb="1" cb="1"/><line nr="240" mi="1" ci="13" mb="0" cb="0"/><line nr="241" mi="0" ci="5" mb="0" cb="0"/><line nr="242" mi="0" ci="2" mb="0" cb="0"/><line nr="246" mi="0" ci="4" mb="0" cb="0"/><line nr="247" mi="0" ci="7" mb="0" cb="0"/><line nr="248" mi="0" ci="6" mb="0" cb="2"/><line nr="249" mi="0" ci="10" mb="0" cb="0"/><line nr="251" mi="0" ci="10" mb="0" cb="0"/><line nr="256" mi="0" ci="5" mb="0" cb="0"/><line nr="257" mi="0" ci="2" mb="0" cb="0"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="5" mb="0" cb="0"/><line nr="260" mi="0" ci="5" mb="0" cb="0"/><line nr="261" mi="0" ci="6" mb="0" cb="2"/><line nr="262" mi="0" ci="3" mb="0" cb="0"/><line nr="263" mi="0" ci="7" mb="0" cb="0"/><line nr="264" mi="0" ci="4" mb="0" cb="0"/><line nr="265" mi="0" ci="5" mb="0" cb="0"/><line nr="266" mi="0" ci="6" mb="0" cb="0"/><line nr="268" mi="0" ci="6" mb="0" cb="0"/><line nr="273" mi="0" ci="14" mb="0" cb="0"/><line nr="274" mi="0" ci="2" mb="0" cb="0"/><line nr="278" mi="0" ci="3" mb="0" cb="0"/><line nr="282" mi="0" ci="3" mb="0" cb="0"/><line nr="286" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="436"/><counter type="BRANCH" missed="4" covered="26"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="4" covered="28"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="17" covered="3760"/><counter type="BRANCH" missed="11" covered="487"/><counter type="LINE" missed="4" covered="592"/><counter type="COMPLEXITY" missed="11" covered="354"/><counter type="METHOD" missed="0" covered="116"/><counter type="CLASS" missed="0" covered="2"/></package><counter type="INSTRUCTION" missed="29" covered="9681"/><counter type="BRANCH" missed="20" covered="922"/><counter type="LINE" missed="6" covered="1521"/><counter type="COMPLEXITY" missed="21" covered="830"/><counter type="METHOD" missed="1" covered="379"/><counter type="CLASS" missed="0" covered="19"/></report>