<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="finnMath"><sessioninfo id="archlinux-df8373b5" start="1510089055962" dump="1510089064334"/><package name="com/github/ltennstedt/finnmath/linear"><class name="com/github/ltennstedt/finnmath/linear/AbstractMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="56"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="square" desc="()Z" line="112"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="triangular" desc="()Z" line="127"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diagonal" desc="()Z" line="146"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="symmetric" desc="()Z" line="165"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="skewSymmetric" desc="()Z" line="181"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="193"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="205"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Object;" line="229"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cells" desc="()Lcom/google/common/collect/ImmutableSet;" line="247"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="row" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="266"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="column" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="288"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rows" desc="()Lcom/google/common/collect/ImmutableMap;" line="303"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columns" desc="()Lcom/google/common/collect/ImmutableMap;" line="315"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="327"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()J" line="338"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowSize" desc="()I" line="350"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnSize" desc="()I" line="362"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="367"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/ImmutableTable;" line="371"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="205"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="1" covered="28"/><counter type="METHOD" missed="0" covered="20"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="533"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;" line="552"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;" line="577"><counter type="INSTRUCTION" missed="15" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="2" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;" line="596"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="615"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="616"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="16" covered="103"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="2" covered="18"/><counter type="COMPLEXITY" missed="2" covered="8"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/DecimalMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="47"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="68"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="100"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="130"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="160"><counter type="INSTRUCTION" missed="19" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigDecimal;" line="177"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="203"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="221"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigDecimal;" line="233"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigDecimal;" line="255"><counter type="INSTRUCTION" missed="0" covered="95"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Ljava/math/BigDecimal;" line="279"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigDecimal;" line="300"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="319"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="349"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="377"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="397"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigDecimal;" line="417"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="434"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="457"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="484"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="515"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="535"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="553"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="575"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="598"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="621"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="636"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="643"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="648"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="357"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="321"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/math/BigDecimal;Lcom/google/common/collect/Table$Cell;)V" line="206"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="165"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="167"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="135"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="136"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="107"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="75"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="51" covered="1318"/><counter type="BRANCH" missed="4" covered="106"/><counter type="LINE" missed="8" covered="205"/><counter type="COMPLEXITY" missed="5" covered="88"/><counter type="METHOD" missed="2" covered="36"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/AbstractMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="43"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="51"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/Table;" line="55"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/AbstractVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="53"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="72"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="entries" desc="()Lcom/google/common/collect/ImmutableSet;" line="87"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="99"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="148"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="153"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Lcom/google/common/collect/ImmutableMap;" line="157"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="44"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/DecimalVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="60"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="83"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="108"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="130"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="148"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="160"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="184"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="199"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="213"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="233"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="257"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="285"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="310"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="333"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="362"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="395"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="433"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="451"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector;)Ljava/math/BigDecimal;" line="475"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="489"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;" line="502"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="508"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="513"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="133"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="88"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalVector$DecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/DecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="65"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="598"/><counter type="BRANCH" missed="0" covered="56"/><counter type="LINE" missed="0" covered="90"/><counter type="COMPLEXITY" missed="0" covered="55"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/BigIntMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="69"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="101"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="131"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="161"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigInteger;" line="178"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="204"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="222"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigInteger;" line="234"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigInteger;" line="256"><counter type="INSTRUCTION" missed="0" covered="95"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Ljava/math/BigInteger;" line="280"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigInteger;" line="301"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="320"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="350"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigInteger;" line="378"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigInteger;" line="398"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigInteger;" line="418"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="436"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="456"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="480"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="508"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="524"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="542"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="564"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="587"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="610"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="625"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="632"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="637"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="358"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="322"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/math/BigInteger;Lcom/google/common/collect/Table$Cell;)V" line="207"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="166"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="168"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="136"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="137"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;Lcom/google/common/collect/Table$Cell;)V" line="108"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;Lcom/google/common/collect/Table$Cell;)V" line="76"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1295"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="197"/><counter type="COMPLEXITY" missed="1" covered="89"/><counter type="METHOD" missed="0" covered="38"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="538"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;" line="557"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;" line="582"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;" line="601"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="620"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="621"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="119"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="1" covered="9"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="656"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="672"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;" line="695"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="716"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="717"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/math/BigInteger;Ljava/lang/Integer;)V" line="697"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;Ljava/lang/Integer;)V" line="698"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="100"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/BigIntVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="63"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="88"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="111"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="129"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigInteger;" line="141"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="165"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="180"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="194"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="214"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="238"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="266"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="288"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="315"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigDecimal;" line="338"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="367"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="400"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="438"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="456"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector;)Ljava/math/BigInteger;" line="480"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="494"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;" line="507"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="513"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="518"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="114"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="93"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntVector$BigIntVectorBuilder;Lcom/github/ltennstedt/finnmath/linear/BigIntVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="68"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="599"/><counter type="BRANCH" missed="0" covered="56"/><counter type="LINE" missed="0" covered="90"/><counter type="COMPLEXITY" missed="0" covered="55"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/AbstractVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="43"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="70"><counter type="INSTRUCTION" missed="1" covered="25"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="77"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Ljava/util/Map;" line="81"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSize" desc="()I" line="85"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="61"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="3" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="667"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="695"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;" line="718"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="739"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="740"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/math/BigDecimal;Ljava/lang/Integer;)V" line="720"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;Ljava/lang/Integer;)V" line="721"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="100"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="DecimalVector.java"><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="60" mi="0" ci="4" mb="0" cb="0"/><line nr="61" mi="0" ci="15" mb="0" cb="2"/><line nr="62" mi="0" ci="1" mb="0" cb="0"/><line nr="63" mi="0" ci="5" mb="0" cb="0"/><line nr="64" mi="0" ci="6" mb="0" cb="0"/><line nr="65" mi="0" ci="9" mb="0" cb="0"/><line nr="66" mi="0" ci="1" mb="0" cb="0"/><line nr="67" mi="0" ci="3" mb="0" cb="0"/><line nr="83" mi="0" ci="4" mb="0" cb="0"/><line nr="84" mi="0" ci="15" mb="0" cb="2"/><line nr="85" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="5" mb="0" cb="0"/><line nr="87" mi="0" ci="6" mb="0" cb="0"/><line nr="88" mi="0" ci="9" mb="0" cb="0"/><line nr="89" mi="0" ci="1" mb="0" cb="0"/><line nr="90" mi="0" ci="3" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="16" mb="0" cb="2"/><line nr="110" mi="0" ci="2" mb="0" cb="0"/><line nr="111" mi="0" ci="12" mb="0" cb="2"/><line nr="112" mi="0" ci="13" mb="0" cb="0"/><line nr="113" mi="0" ci="1" mb="0" cb="0"/><line nr="114" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="4" mb="0" cb="0"/><line nr="131" mi="0" ci="5" mb="0" cb="0"/><line nr="132" mi="0" ci="7" mb="0" cb="0"/><line nr="133" mi="0" ci="6" mb="0" cb="0"/><line nr="134" mi="0" ci="1" mb="0" cb="0"/><line nr="135" mi="0" ci="3" mb="0" cb="0"/><line nr="148" mi="0" ci="5" mb="0" cb="0"/><line nr="160" mi="0" ci="2" mb="0" cb="0"/><line nr="161" mi="0" ci="12" mb="0" cb="2"/><line nr="162" mi="0" ci="5" mb="0" cb="0"/><line nr="163" mi="0" ci="1" mb="0" cb="0"/><line nr="164" mi="0" ci="2" mb="0" cb="0"/><line nr="184" mi="0" ci="4" mb="0" cb="0"/><line nr="185" mi="0" ci="16" mb="0" cb="2"/><line nr="186" mi="0" ci="5" mb="0" cb="0"/><line nr="199" mi="0" ci="4" mb="0" cb="0"/><line nr="213" mi="0" ci="7" mb="0" cb="0"/><line nr="233" mi="0" ci="4" mb="0" cb="0"/><line nr="234" mi="0" ci="14" mb="0" cb="4"/><line nr="236" mi="0" ci="8" mb="0" cb="0"/><line nr="257" mi="0" ci="8" mb="0" cb="2"/><line nr="258" mi="0" ci="9" mb="0" cb="0"/><line nr="285" mi="0" ci="4" mb="0" cb="0"/><line nr="286" mi="0" ci="14" mb="0" cb="4"/><line nr="288" mi="0" ci="8" mb="0" cb="2"/><line nr="289" mi="0" ci="10" mb="0" cb="0"/><line nr="310" mi="0" ci="4" mb="0" cb="0"/><line nr="311" mi="0" ci="16" mb="0" cb="2"/><line nr="312" mi="0" ci="5" mb="0" cb="0"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="16" mb="0" cb="2"/><line nr="335" mi="0" ci="8" mb="0" cb="0"/><line nr="362" mi="0" ci="4" mb="0" cb="0"/><line nr="363" mi="0" ci="16" mb="0" cb="2"/><line nr="364" mi="0" ci="4" mb="0" cb="0"/><line nr="365" mi="0" ci="14" mb="0" cb="4"/><line nr="367" mi="0" ci="9" mb="0" cb="0"/><line nr="395" mi="0" ci="4" mb="0" cb="0"/><line nr="396" mi="0" ci="16" mb="0" cb="2"/><line nr="397" mi="0" ci="8" mb="0" cb="2"/><line nr="398" mi="0" ci="10" mb="0" cb="0"/><line nr="433" mi="0" ci="4" mb="0" cb="0"/><line nr="434" mi="0" ci="16" mb="0" cb="2"/><line nr="435" mi="0" ci="4" mb="0" cb="0"/><line nr="436" mi="0" ci="14" mb="0" cb="4"/><line nr="438" mi="0" ci="8" mb="0" cb="2"/><line nr="439" mi="0" ci="11" mb="0" cb="0"/><line nr="451" mi="0" ci="2" mb="0" cb="0"/><line nr="452" mi="0" ci="12" mb="0" cb="2"/><line nr="453" mi="0" ci="5" mb="0" cb="0"/><line nr="454" mi="0" ci="1" mb="0" cb="0"/><line nr="455" mi="0" ci="2" mb="0" cb="0"/><line nr="475" mi="0" ci="4" mb="0" cb="0"/><line nr="476" mi="0" ci="16" mb="0" cb="2"/><line nr="477" mi="0" ci="5" mb="0" cb="0"/><line nr="489" mi="0" ci="4" mb="0" cb="0"/><line nr="502" mi="0" ci="8" mb="0" cb="2"/><line nr="503" mi="0" ci="6" mb="0" cb="0"/><line nr="508" mi="0" ci="9" mb="0" cb="0"/><line nr="513" mi="0" ci="3" mb="0" cb="2"/><line nr="514" mi="0" ci="2" mb="0" cb="0"/><line nr="516" mi="0" ci="3" mb="0" cb="2"/><line nr="517" mi="0" ci="2" mb="0" cb="0"/><line nr="519" mi="0" ci="3" mb="0" cb="0"/><line nr="520" mi="0" ci="6" mb="0" cb="0"/><line nr="533" mi="0" ci="3" mb="0" cb="0"/><line nr="534" mi="0" ci="1" mb="0" cb="0"/><line nr="552" mi="0" ci="4" mb="0" cb="0"/><line nr="553" mi="0" ci="6" mb="0" cb="0"/><line nr="554" mi="1" ci="13" mb="1" cb="1"/><line nr="555" mi="0" ci="7" mb="0" cb="0"/><line nr="556" mi="0" ci="2" mb="0" cb="0"/><line nr="577" mi="0" ci="4" mb="0" cb="0"/><line nr="578" mi="0" ci="4" mb="0" cb="0"/><line nr="579" mi="7" ci="10" mb="1" cb="3"/><line nr="580" mi="6" ci="0" mb="0" cb="0"/><line nr="581" mi="2" ci="0" mb="0" cb="0"/><line nr="596" mi="0" ci="4" mb="0" cb="0"/><line nr="597" mi="0" ci="8" mb="0" cb="2"/><line nr="598" mi="0" ci="7" mb="0" cb="0"/><line nr="600" mi="0" ci="2" mb="0" cb="0"/><line nr="615" mi="0" ci="11" mb="0" cb="0"/><line nr="616" mi="0" ci="8" mb="0" cb="0"/><line nr="617" mi="0" ci="1" mb="0" cb="0"/><line nr="618" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="701"/><counter type="BRANCH" missed="2" covered="62"/><counter type="LINE" missed="2" covered="108"/><counter type="COMPLEXITY" missed="2" covered="63"/><counter type="METHOD" missed="0" covered="33"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractVector.java"><line nr="53" mi="0" ci="2" mb="0" cb="0"/><line nr="54" mi="0" ci="3" mb="0" cb="0"/><line nr="55" mi="0" ci="1" mb="0" cb="0"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="10" mb="0" cb="0"/><line nr="74" mi="0" ci="5" mb="0" cb="0"/><line nr="87" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="148" mi="4" ci="0" mb="0" cb="0"/><line nr="153" mi="0" ci="8" mb="0" cb="0"/><line nr="157" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="44"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractVectorBuilder.java"><line nr="43" mi="0" ci="5" mb="0" cb="0"/><line nr="50" mi="0" ci="2" mb="0" cb="0"/><line nr="51" mi="1" ci="7" mb="1" cb="1"/><line nr="52" mi="0" ci="3" mb="0" cb="0"/><line nr="53" mi="0" ci="1" mb="0" cb="0"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="1" ci="16" mb="2" cb="2"/><line nr="72" mi="0" ci="5" mb="0" cb="0"/><line nr="77" mi="0" ci="12" mb="0" cb="0"/><line nr="81" mi="0" ci="3" mb="0" cb="0"/><line nr="85" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="61"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="3" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="DecimalMatrix.java"><line nr="47" mi="0" ci="3" mb="0" cb="0"/><line nr="48" mi="0" ci="1" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="14" mb="0" cb="2"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="14" mb="0" cb="2"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="6" mb="0" cb="0"/><line nr="74" mi="0" ci="7" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="14" mb="0" cb="0"/><line nr="78" mi="0" ci="1" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="14" mb="0" cb="2"/><line nr="102" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="14" mb="0" cb="2"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="6" mb="0" cb="0"/><line nr="106" mi="0" ci="7" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="14" mb="0" cb="0"/><line nr="110" mi="0" ci="1" mb="0" cb="0"/><line nr="111" mi="0" ci="3" mb="0" cb="0"/><line nr="130" mi="0" ci="4" mb="0" cb="0"/><line nr="131" mi="0" ci="14" mb="0" cb="2"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="8" mb="0" cb="0"/><line nr="134" mi="0" ci="8" mb="0" cb="0"/><line nr="135" mi="0" ci="8" mb="0" cb="0"/><line nr="136" mi="0" ci="5" mb="0" cb="0"/><line nr="137" mi="0" ci="6" mb="0" cb="0"/><line nr="138" mi="0" ci="1" mb="0" cb="0"/><line nr="139" mi="0" ci="1" mb="0" cb="0"/><line nr="140" mi="0" ci="3" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="161" mi="3" ci="11" mb="1" cb="1"/><line nr="162" mi="0" ci="4" mb="0" cb="0"/><line nr="163" mi="6" ci="0" mb="0" cb="0"/><line nr="164" mi="7" ci="0" mb="0" cb="0"/><line nr="165" mi="6" ci="0" mb="0" cb="0"/><line nr="167" mi="11" ci="0" mb="2" cb="0"/><line nr="168" mi="12" ci="0" mb="0" cb="0"/><line nr="169" mi="1" ci="0" mb="0" cb="0"/><line nr="170" mi="1" ci="0" mb="0" cb="0"/><line nr="171" mi="3" ci="0" mb="0" cb="0"/><line nr="177" mi="0" ci="4" mb="0" cb="0"/><line nr="178" mi="0" ci="4" mb="0" cb="0"/><line nr="179" mi="1" ci="12" mb="1" cb="1"/><line nr="180" mi="0" ci="1" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="0"/><line nr="182" mi="0" ci="11" mb="0" cb="2"/><line nr="183" mi="0" ci="12" mb="0" cb="0"/><line nr="184" mi="0" ci="1" mb="0" cb="0"/><line nr="185" mi="0" ci="2" mb="0" cb="0"/><line nr="203" mi="0" ci="4" mb="0" cb="0"/><line nr="204" mi="0" ci="10" mb="0" cb="0"/><line nr="205" mi="0" ci="7" mb="0" cb="0"/><line nr="206" mi="0" ci="14" mb="0" cb="0"/><line nr="207" mi="0" ci="1" mb="0" cb="0"/><line nr="208" mi="0" ci="3" mb="0" cb="0"/><line nr="221" mi="0" ci="5" mb="0" cb="0"/><line nr="233" mi="0" ci="10" mb="0" cb="0"/><line nr="234" mi="0" ci="2" mb="0" cb="0"/><line nr="235" mi="0" ci="2" mb="0" cb="0"/><line nr="236" mi="0" ci="12" mb="0" cb="2"/><line nr="237" mi="0" ci="9" mb="0" cb="0"/><line nr="238" mi="0" ci="1" mb="0" cb="0"/><line nr="239" mi="0" ci="2" mb="0" cb="0"/><line nr="255" mi="0" ci="5" mb="0" cb="0"/><line nr="256" mi="0" ci="9" mb="0" cb="0"/><line nr="257" mi="0" ci="3" mb="0" cb="2"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="12" mb="0" cb="2"/><line nr="260" mi="0" ci="7" mb="0" cb="2"/><line nr="261" mi="0" ci="6" mb="0" cb="0"/><line nr="263" mi="0" ci="1" mb="0" cb="0"/><line nr="264" mi="0" ci="2" mb="0" cb="0"/><line nr="266" mi="0" ci="3" mb="0" cb="2"/><line nr="267" mi="0" ci="3" mb="0" cb="0"/><line nr="269" mi="0" ci="3" mb="0" cb="2"/><line nr="270" mi="0" ci="3" mb="0" cb="0"/><line nr="274" mi="0" ci="36" mb="0" cb="0"/><line nr="279" mi="0" ci="2" mb="0" cb="0"/><line nr="280" mi="0" ci="13" mb="0" cb="2"/><line nr="281" mi="0" ci="2" mb="0" cb="0"/><line nr="282" mi="0" ci="2" mb="0" cb="0"/><line nr="283" mi="0" ci="5" mb="0" cb="0"/><line nr="284" mi="0" ci="7" mb="0" cb="2"/><line nr="285" mi="0" ci="5" mb="0" cb="0"/><line nr="286" mi="0" ci="9" mb="0" cb="2"/><line nr="287" mi="0" ci="8" mb="0" cb="2"/><line nr="288" mi="0" ci="1" mb="0" cb="0"/><line nr="291" mi="0" ci="12" mb="0" cb="0"/><line nr="293" mi="0" ci="9" mb="0" cb="0"/><line nr="294" mi="0" ci="1" mb="0" cb="0"/><line nr="295" mi="0" ci="2" mb="0" cb="0"/><line nr="300" mi="0" ci="27" mb="0" cb="0"/><line nr="301" mi="0" ci="27" mb="0" cb="0"/><line nr="302" mi="0" ci="27" mb="0" cb="0"/><line nr="303" mi="0" ci="27" mb="0" cb="0"/><line nr="304" mi="0" ci="27" mb="0" cb="0"/><line nr="305" mi="0" ci="27" mb="0" cb="0"/><line nr="306" mi="0" ci="12" mb="0" cb="0"/><line nr="319" mi="0" ci="10" mb="0" cb="0"/><line nr="320" mi="0" ci="6" mb="0" cb="0"/><line nr="321" mi="0" ci="12" mb="0" cb="0"/><line nr="322" mi="0" ci="1" mb="0" cb="0"/><line nr="323" mi="0" ci="3" mb="0" cb="0"/><line nr="349" mi="0" ci="4" mb="0" cb="0"/><line nr="350" mi="0" ci="4" mb="0" cb="0"/><line nr="351" mi="0" ci="8" mb="0" cb="0"/><line nr="352" mi="0" ci="3" mb="0" cb="0"/><line nr="353" mi="0" ci="8" mb="0" cb="0"/><line nr="354" mi="0" ci="3" mb="0" cb="0"/><line nr="355" mi="0" ci="14" mb="0" cb="0"/><line nr="356" mi="0" ci="8" mb="0" cb="0"/><line nr="357" mi="0" ci="4" mb="0" cb="0"/><line nr="358" mi="0" ci="4" mb="0" cb="0"/><line nr="359" mi="0" ci="8" mb="0" cb="4"/><line nr="360" mi="0" ci="13" mb="0" cb="2"/><line nr="361" mi="0" ci="13" mb="0" cb="2"/><line nr="362" mi="0" ci="8" mb="0" cb="0"/><line nr="364" mi="0" ci="1" mb="0" cb="0"/><line nr="365" mi="0" ci="3" mb="0" cb="0"/><line nr="377" mi="0" ci="2" mb="0" cb="0"/><line nr="378" mi="0" ci="14" mb="0" cb="2"/><line nr="379" mi="0" ci="2" mb="0" cb="0"/><line nr="380" mi="0" ci="11" mb="0" cb="2"/><line nr="381" mi="0" ci="5" mb="0" cb="0"/><line nr="382" mi="0" ci="1" mb="0" cb="0"/><line nr="383" mi="0" ci="4" mb="0" cb="0"/><line nr="384" mi="0" ci="1" mb="0" cb="0"/><line nr="385" mi="0" ci="2" mb="0" cb="0"/><line nr="397" mi="0" ci="2" mb="0" cb="0"/><line nr="398" mi="0" ci="14" mb="0" cb="2"/><line nr="399" mi="0" ci="2" mb="0" cb="0"/><line nr="400" mi="0" ci="11" mb="0" cb="2"/><line nr="401" mi="0" ci="5" mb="0" cb="0"/><line nr="402" mi="0" ci="1" mb="0" cb="0"/><line nr="403" mi="0" ci="4" mb="0" cb="0"/><line nr="404" mi="0" ci="1" mb="0" cb="0"/><line nr="405" mi="0" ci="2" mb="0" cb="0"/><line nr="417" mi="0" ci="2" mb="0" cb="0"/><line nr="418" mi="0" ci="12" mb="0" cb="2"/><line nr="419" mi="0" ci="6" mb="0" cb="0"/><line nr="420" mi="0" ci="1" mb="0" cb="0"/><line nr="421" mi="0" ci="2" mb="0" cb="0"/><line nr="434" mi="0" ci="2" mb="0" cb="0"/><line nr="435" mi="0" ci="12" mb="0" cb="2"/><line nr="436" mi="0" ci="6" mb="0" cb="0"/><line nr="437" mi="0" ci="1" mb="0" cb="0"/><line nr="438" mi="0" ci="6" mb="0" cb="0"/><line nr="457" mi="0" ci="4" mb="0" cb="0"/><line nr="458" mi="0" ci="14" mb="0" cb="4"/><line nr="460" mi="0" ci="2" mb="0" cb="0"/><line nr="461" mi="0" ci="12" mb="0" cb="2"/><line nr="462" mi="0" ci="6" mb="0" cb="0"/><line nr="463" mi="0" ci="1" mb="0" cb="0"/><line nr="464" mi="0" ci="7" mb="0" cb="0"/><line nr="484" mi="0" ci="8" mb="0" cb="2"/><line nr="485" mi="0" ci="2" mb="0" cb="0"/><line nr="486" mi="0" ci="12" mb="0" cb="2"/><line nr="487" mi="0" ci="6" mb="0" cb="0"/><line nr="488" mi="0" ci="1" mb="0" cb="0"/><line nr="489" mi="0" ci="8" mb="0" cb="0"/><line nr="515" mi="0" ci="4" mb="0" cb="0"/><line nr="516" mi="0" ci="14" mb="0" cb="4"/><line nr="518" mi="0" ci="8" mb="0" cb="2"/><line nr="519" mi="0" ci="2" mb="0" cb="0"/><line nr="520" mi="0" ci="12" mb="0" cb="2"/><line nr="521" mi="0" ci="6" mb="0" cb="0"/><line nr="522" mi="0" ci="1" mb="0" cb="0"/><line nr="523" mi="0" ci="9" mb="0" cb="0"/><line nr="535" mi="0" ci="2" mb="0" cb="0"/><line nr="536" mi="0" ci="12" mb="0" cb="2"/><line nr="537" mi="0" ci="5" mb="0" cb="0"/><line nr="538" mi="0" ci="1" mb="0" cb="0"/><line nr="539" mi="0" ci="2" mb="0" cb="0"/><line nr="553" mi="0" ci="3" mb="0" cb="2"/><line nr="554" mi="0" ci="12" mb="0" cb="2"/><line nr="555" mi="0" ci="15" mb="0" cb="4"/><line nr="556" mi="0" ci="2" mb="0" cb="0"/><line nr="558" mi="0" ci="1" mb="0" cb="0"/><line nr="559" mi="0" ci="2" mb="0" cb="0"/><line nr="561" mi="0" ci="2" mb="0" cb="0"/><line nr="575" mi="0" ci="3" mb="0" cb="2"/><line nr="576" mi="0" ci="12" mb="0" cb="2"/><line nr="577" mi="0" ci="15" mb="0" cb="4"/><line nr="578" mi="0" ci="2" mb="0" cb="0"/><line nr="580" mi="0" ci="1" mb="0" cb="0"/><line nr="581" mi="0" ci="2" mb="0" cb="0"/><line nr="583" mi="0" ci="2" mb="0" cb="0"/><line nr="598" mi="0" ci="3" mb="0" cb="2"/><line nr="599" mi="0" ci="12" mb="0" cb="2"/><line nr="600" mi="0" ci="9" mb="0" cb="2"/><line nr="601" mi="0" ci="2" mb="0" cb="0"/><line nr="603" mi="0" ci="1" mb="0" cb="0"/><line nr="604" mi="0" ci="2" mb="0" cb="0"/><line nr="606" mi="0" ci="2" mb="0" cb="0"/><line nr="621" mi="0" ci="9" mb="0" cb="2"/><line nr="636" mi="0" ci="8" mb="0" cb="2"/><line nr="637" mi="0" ci="8" mb="0" cb="2"/><line nr="638" mi="0" ci="6" mb="0" cb="0"/><line nr="643" mi="0" ci="9" mb="0" cb="0"/><line nr="648" mi="0" ci="3" mb="0" cb="2"/><line nr="649" mi="0" ci="2" mb="0" cb="0"/><line nr="651" mi="0" ci="3" mb="0" cb="2"/><line nr="652" mi="0" ci="2" mb="0" cb="0"/><line nr="654" mi="0" ci="3" mb="0" cb="0"/><line nr="655" mi="0" ci="6" mb="0" cb="0"/><line nr="667" mi="0" ci="4" mb="0" cb="0"/><line nr="668" mi="0" ci="1" mb="0" cb="0"/><line nr="695" mi="0" ci="4" mb="0" cb="0"/><line nr="696" mi="0" ci="4" mb="0" cb="0"/><line nr="697" mi="0" ci="4" mb="0" cb="0"/><line nr="698" mi="0" ci="9" mb="0" cb="0"/><line nr="699" mi="0" ci="3" mb="0" cb="0"/><line nr="700" mi="0" ci="9" mb="0" cb="0"/><line nr="701" mi="0" ci="3" mb="0" cb="0"/><line nr="702" mi="0" ci="7" mb="0" cb="0"/><line nr="703" mi="0" ci="2" mb="0" cb="0"/><line nr="718" mi="0" ci="4" mb="0" cb="0"/><line nr="719" mi="0" ci="7" mb="0" cb="0"/><line nr="720" mi="0" ci="8" mb="0" cb="0"/><line nr="721" mi="0" ci="7" mb="0" cb="0"/><line nr="722" mi="0" ci="1" mb="0" cb="0"/><line nr="723" mi="0" ci="1" mb="0" cb="0"/><line nr="724" mi="0" ci="2" mb="0" cb="0"/><line nr="739" mi="0" ci="5" mb="0" cb="0"/><line nr="740" mi="0" ci="6" mb="0" cb="0"/><line nr="741" mi="0" ci="1" mb="0" cb="0"/><line nr="742" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="51" covered="1418"/><counter type="BRANCH" missed="4" covered="106"/><counter type="LINE" missed="8" covered="227"/><counter type="COMPLEXITY" missed="5" covered="95"/><counter type="METHOD" missed="2" covered="43"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractMatrix.java"><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="3" mb="0" cb="0"/><line nr="58" mi="0" ci="1" mb="0" cb="0"/><line nr="112" mi="0" ci="13" mb="0" cb="2"/><line nr="127" mi="0" ci="10" mb="0" cb="4"/><line nr="146" mi="0" ci="10" mb="1" cb="3"/><line nr="165" mi="0" ci="12" mb="0" cb="4"/><line nr="181" mi="0" ci="13" mb="0" cb="4"/><line nr="193" mi="0" ci="4" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="0" ci="4" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="0" ci="9" mb="0" cb="0"/><line nr="232" mi="0" ci="3" mb="0" cb="0"/><line nr="233" mi="0" ci="9" mb="0" cb="0"/><line nr="234" mi="0" ci="3" mb="0" cb="0"/><line nr="235" mi="0" ci="6" mb="0" cb="0"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="266" mi="0" ci="4" mb="0" cb="0"/><line nr="267" mi="0" ci="9" mb="0" cb="0"/><line nr="268" mi="0" ci="3" mb="0" cb="0"/><line nr="269" mi="0" ci="5" mb="0" cb="0"/><line nr="288" mi="0" ci="4" mb="0" cb="0"/><line nr="289" mi="0" ci="9" mb="0" cb="0"/><line nr="290" mi="0" ci="3" mb="0" cb="0"/><line nr="291" mi="0" ci="5" mb="0" cb="0"/><line nr="303" mi="0" ci="4" mb="0" cb="0"/><line nr="315" mi="0" ci="4" mb="0" cb="0"/><line nr="327" mi="0" ci="4" mb="0" cb="0"/><line nr="338" mi="0" ci="16" mb="0" cb="0"/><line nr="350" mi="0" ci="5" mb="0" cb="0"/><line nr="362" mi="0" ci="5" mb="0" cb="0"/><line nr="367" mi="0" ci="8" mb="0" cb="0"/><line nr="371" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="205"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="1" covered="28"/><counter type="METHOD" missed="0" covered="20"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigIntMatrix.java"><line nr="48" mi="0" ci="3" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="14" mb="0" cb="2"/><line nr="71" mi="0" ci="4" mb="0" cb="0"/><line nr="72" mi="0" ci="14" mb="0" cb="2"/><line nr="73" mi="0" ci="4" mb="0" cb="0"/><line nr="74" mi="0" ci="6" mb="0" cb="0"/><line nr="75" mi="0" ci="7" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="78" mi="0" ci="14" mb="0" cb="0"/><line nr="79" mi="0" ci="1" mb="0" cb="0"/><line nr="80" mi="0" ci="3" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="14" mb="0" cb="2"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="14" mb="0" cb="2"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="6" mb="0" cb="0"/><line nr="107" mi="0" ci="7" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="14" mb="0" cb="0"/><line nr="111" mi="0" ci="1" mb="0" cb="0"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="14" mb="0" cb="2"/><line nr="133" mi="0" ci="4" mb="0" cb="0"/><line nr="134" mi="0" ci="8" mb="0" cb="0"/><line nr="135" mi="0" ci="8" mb="0" cb="0"/><line nr="136" mi="0" ci="8" mb="0" cb="0"/><line nr="137" mi="0" ci="5" mb="0" cb="0"/><line nr="138" mi="0" ci="6" mb="0" cb="0"/><line nr="139" mi="0" ci="1" mb="0" cb="0"/><line nr="140" mi="0" ci="1" mb="0" cb="0"/><line nr="141" mi="0" ci="3" mb="0" cb="0"/><line nr="161" mi="0" ci="4" mb="0" cb="0"/><line nr="162" mi="0" ci="14" mb="0" cb="2"/><line nr="163" mi="0" ci="4" mb="0" cb="0"/><line nr="164" mi="0" ci="6" mb="0" cb="0"/><line nr="165" mi="0" ci="7" mb="0" cb="0"/><line nr="166" mi="0" ci="6" mb="0" cb="0"/><line nr="168" mi="0" ci="11" mb="0" cb="2"/><line nr="169" mi="0" ci="12" mb="0" cb="0"/><line nr="170" mi="0" ci="1" mb="0" cb="0"/><line nr="171" mi="0" ci="1" mb="0" cb="0"/><line nr="172" mi="0" ci="3" mb="0" cb="0"/><line nr="178" mi="0" ci="4" mb="0" cb="0"/><line nr="179" mi="0" ci="4" mb="0" cb="0"/><line nr="180" mi="1" ci="12" mb="1" cb="1"/><line nr="181" mi="0" ci="1" mb="0" cb="0"/><line nr="182" mi="0" ci="2" mb="0" cb="0"/><line nr="183" mi="0" ci="11" mb="0" cb="2"/><line nr="184" mi="0" ci="12" mb="0" cb="0"/><line nr="185" mi="0" ci="1" mb="0" cb="0"/><line nr="186" mi="0" ci="2" mb="0" cb="0"/><line nr="204" mi="0" ci="4" mb="0" cb="0"/><line nr="205" mi="0" ci="10" mb="0" cb="0"/><line nr="206" mi="0" ci="7" mb="0" cb="0"/><line nr="207" mi="0" ci="14" mb="0" cb="0"/><line nr="208" mi="0" ci="1" mb="0" cb="0"/><line nr="209" mi="0" ci="3" mb="0" cb="0"/><line nr="222" mi="0" ci="5" mb="0" cb="0"/><line nr="234" mi="0" ci="10" mb="0" cb="0"/><line nr="235" mi="0" ci="2" mb="0" cb="0"/><line nr="236" mi="0" ci="2" mb="0" cb="0"/><line nr="237" mi="0" ci="12" mb="0" cb="2"/><line nr="238" mi="0" ci="9" mb="0" cb="0"/><line nr="239" mi="0" ci="1" mb="0" cb="0"/><line nr="240" mi="0" ci="2" mb="0" cb="0"/><line nr="256" mi="0" ci="5" mb="0" cb="0"/><line nr="257" mi="0" ci="9" mb="0" cb="0"/><line nr="258" mi="0" ci="3" mb="0" cb="2"/><line nr="259" mi="0" ci="2" mb="0" cb="0"/><line nr="260" mi="0" ci="12" mb="0" cb="2"/><line nr="261" mi="0" ci="7" mb="0" cb="2"/><line nr="262" mi="0" ci="6" mb="0" cb="0"/><line nr="264" mi="0" ci="1" mb="0" cb="0"/><line nr="265" mi="0" ci="2" mb="0" cb="0"/><line nr="267" mi="0" ci="3" mb="0" cb="2"/><line nr="268" mi="0" ci="3" mb="0" cb="0"/><line nr="270" mi="0" ci="3" mb="0" cb="2"/><line nr="271" mi="0" ci="3" mb="0" cb="0"/><line nr="275" mi="0" ci="36" mb="0" cb="0"/><line nr="280" mi="0" ci="2" mb="0" cb="0"/><line nr="281" mi="0" ci="13" mb="0" cb="2"/><line nr="282" mi="0" ci="2" mb="0" cb="0"/><line nr="283" mi="0" ci="2" mb="0" cb="0"/><line nr="284" mi="0" ci="5" mb="0" cb="0"/><line nr="285" mi="0" ci="7" mb="0" cb="2"/><line nr="286" mi="0" ci="5" mb="0" cb="0"/><line nr="287" mi="0" ci="9" mb="0" cb="2"/><line nr="288" mi="0" ci="8" mb="0" cb="2"/><line nr="289" mi="0" ci="1" mb="0" cb="0"/><line nr="292" mi="0" ci="12" mb="0" cb="0"/><line nr="294" mi="0" ci="9" mb="0" cb="0"/><line nr="295" mi="0" ci="1" mb="0" cb="0"/><line nr="296" mi="0" ci="2" mb="0" cb="0"/><line nr="301" mi="0" ci="27" mb="0" cb="0"/><line nr="302" mi="0" ci="27" mb="0" cb="0"/><line nr="303" mi="0" ci="27" mb="0" cb="0"/><line nr="304" mi="0" ci="27" mb="0" cb="0"/><line nr="305" mi="0" ci="27" mb="0" cb="0"/><line nr="306" mi="0" ci="27" mb="0" cb="0"/><line nr="307" mi="0" ci="12" mb="0" cb="0"/><line nr="320" mi="0" ci="10" mb="0" cb="0"/><line nr="321" mi="0" ci="6" mb="0" cb="0"/><line nr="322" mi="0" ci="12" mb="0" cb="0"/><line nr="323" mi="0" ci="1" mb="0" cb="0"/><line nr="324" mi="0" ci="3" mb="0" cb="0"/><line nr="350" mi="0" ci="4" mb="0" cb="0"/><line nr="351" mi="0" ci="4" mb="0" cb="0"/><line nr="352" mi="0" ci="8" mb="0" cb="0"/><line nr="353" mi="0" ci="3" mb="0" cb="0"/><line nr="354" mi="0" ci="8" mb="0" cb="0"/><line nr="355" mi="0" ci="3" mb="0" cb="0"/><line nr="356" mi="0" ci="14" mb="0" cb="0"/><line nr="357" mi="0" ci="8" mb="0" cb="0"/><line nr="358" mi="0" ci="4" mb="0" cb="0"/><line nr="359" mi="0" ci="4" mb="0" cb="0"/><line nr="360" mi="0" ci="8" mb="0" cb="4"/><line nr="361" mi="0" ci="13" mb="0" cb="2"/><line nr="362" mi="0" ci="13" mb="0" cb="2"/><line nr="363" mi="0" ci="8" mb="0" cb="0"/><line nr="365" mi="0" ci="1" mb="0" cb="0"/><line nr="366" mi="0" ci="3" mb="0" cb="0"/><line nr="378" mi="0" ci="2" mb="0" cb="0"/><line nr="379" mi="0" ci="14" mb="0" cb="2"/><line nr="380" mi="0" ci="2" mb="0" cb="0"/><line nr="381" mi="0" ci="11" mb="0" cb="2"/><line nr="382" mi="0" ci="5" mb="0" cb="0"/><line nr="383" mi="0" ci="1" mb="0" cb="0"/><line nr="384" mi="0" ci="4" mb="0" cb="0"/><line nr="385" mi="0" ci="1" mb="0" cb="0"/><line nr="386" mi="0" ci="2" mb="0" cb="0"/><line nr="398" mi="0" ci="2" mb="0" cb="0"/><line nr="399" mi="0" ci="14" mb="0" cb="2"/><line nr="400" mi="0" ci="2" mb="0" cb="0"/><line nr="401" mi="0" ci="11" mb="0" cb="2"/><line nr="402" mi="0" ci="5" mb="0" cb="0"/><line nr="403" mi="0" ci="1" mb="0" cb="0"/><line nr="404" mi="0" ci="4" mb="0" cb="0"/><line nr="405" mi="0" ci="1" mb="0" cb="0"/><line nr="406" mi="0" ci="2" mb="0" cb="0"/><line nr="418" mi="0" ci="2" mb="0" cb="0"/><line nr="419" mi="0" ci="12" mb="0" cb="2"/><line nr="420" mi="0" ci="6" mb="0" cb="0"/><line nr="421" mi="0" ci="1" mb="0" cb="0"/><line nr="422" mi="0" ci="2" mb="0" cb="0"/><line nr="436" mi="0" ci="7" mb="0" cb="0"/><line nr="456" mi="0" ci="4" mb="0" cb="0"/><line nr="457" mi="0" ci="14" mb="0" cb="4"/><line nr="459" mi="0" ci="8" mb="0" cb="0"/><line nr="480" mi="0" ci="8" mb="0" cb="2"/><line nr="481" mi="0" ci="9" mb="0" cb="0"/><line nr="508" mi="0" ci="4" mb="0" cb="0"/><line nr="509" mi="0" ci="14" mb="0" cb="4"/><line nr="511" mi="0" ci="8" mb="0" cb="2"/><line nr="512" mi="0" ci="10" mb="0" cb="0"/><line nr="524" mi="0" ci="2" mb="0" cb="0"/><line nr="525" mi="0" ci="12" mb="0" cb="2"/><line nr="526" mi="0" ci="5" mb="0" cb="0"/><line nr="527" mi="0" ci="1" mb="0" cb="0"/><line nr="528" mi="0" ci="2" mb="0" cb="0"/><line nr="542" mi="0" ci="3" mb="0" cb="2"/><line nr="543" mi="0" ci="12" mb="0" cb="2"/><line nr="544" mi="0" ci="15" mb="0" cb="4"/><line nr="545" mi="0" ci="2" mb="0" cb="0"/><line nr="547" mi="0" ci="1" mb="0" cb="0"/><line nr="548" mi="0" ci="2" mb="0" cb="0"/><line nr="550" mi="0" ci="2" mb="0" cb="0"/><line nr="564" mi="0" ci="3" mb="0" cb="2"/><line nr="565" mi="0" ci="12" mb="0" cb="2"/><line nr="566" mi="0" ci="15" mb="0" cb="4"/><line nr="567" mi="0" ci="2" mb="0" cb="0"/><line nr="569" mi="0" ci="1" mb="0" cb="0"/><line nr="570" mi="0" ci="2" mb="0" cb="0"/><line nr="572" mi="0" ci="2" mb="0" cb="0"/><line nr="587" mi="0" ci="3" mb="0" cb="2"/><line nr="588" mi="0" ci="12" mb="0" cb="2"/><line nr="589" mi="0" ci="9" mb="0" cb="2"/><line nr="590" mi="0" ci="2" mb="0" cb="0"/><line nr="592" mi="0" ci="1" mb="0" cb="0"/><line nr="593" mi="0" ci="2" mb="0" cb="0"/><line nr="595" mi="0" ci="2" mb="0" cb="0"/><line nr="610" mi="0" ci="15" mb="0" cb="4"/><line nr="625" mi="0" ci="8" mb="0" cb="2"/><line nr="626" mi="0" ci="8" mb="0" cb="2"/><line nr="627" mi="0" ci="7" mb="0" cb="0"/><line nr="632" mi="0" ci="9" mb="0" cb="0"/><line nr="637" mi="0" ci="3" mb="0" cb="2"/><line nr="638" mi="0" ci="2" mb="0" cb="0"/><line nr="640" mi="0" ci="3" mb="0" cb="2"/><line nr="641" mi="0" ci="2" mb="0" cb="0"/><line nr="643" mi="0" ci="3" mb="0" cb="0"/><line nr="644" mi="0" ci="6" mb="0" cb="0"/><line nr="656" mi="0" ci="4" mb="0" cb="0"/><line nr="657" mi="0" ci="1" mb="0" cb="0"/><line nr="672" mi="0" ci="4" mb="0" cb="0"/><line nr="673" mi="0" ci="4" mb="0" cb="0"/><line nr="674" mi="0" ci="4" mb="0" cb="0"/><line nr="675" mi="0" ci="9" mb="0" cb="0"/><line nr="676" mi="0" ci="3" mb="0" cb="0"/><line nr="677" mi="0" ci="9" mb="0" cb="0"/><line nr="678" mi="0" ci="3" mb="0" cb="0"/><line nr="679" mi="0" ci="7" mb="0" cb="0"/><line nr="680" mi="0" ci="2" mb="0" cb="0"/><line nr="695" mi="0" ci="4" mb="0" cb="0"/><line nr="696" mi="0" ci="7" mb="0" cb="0"/><line nr="697" mi="0" ci="8" mb="0" cb="0"/><line nr="698" mi="0" ci="7" mb="0" cb="0"/><line nr="699" mi="0" ci="1" mb="0" cb="0"/><line nr="700" mi="0" ci="1" mb="0" cb="0"/><line nr="701" mi="0" ci="2" mb="0" cb="0"/><line nr="716" mi="0" ci="5" mb="0" cb="0"/><line nr="717" mi="0" ci="6" mb="0" cb="0"/><line nr="718" mi="0" ci="1" mb="0" cb="0"/><line nr="719" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1395"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="219"/><counter type="COMPLEXITY" missed="1" covered="96"/><counter type="METHOD" missed="0" covered="45"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigIntVector.java"><line nr="45" mi="0" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="1" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="64" mi="0" ci="15" mb="0" cb="2"/><line nr="65" mi="0" ci="1" mb="0" cb="0"/><line nr="66" mi="0" ci="5" mb="0" cb="0"/><line nr="67" mi="0" ci="6" mb="0" cb="0"/><line nr="68" mi="0" ci="9" mb="0" cb="0"/><line nr="69" mi="0" ci="1" mb="0" cb="0"/><line nr="70" mi="0" ci="3" mb="0" cb="0"/><line nr="88" mi="0" ci="4" mb="0" cb="0"/><line nr="89" mi="0" ci="15" mb="0" cb="2"/><line nr="90" mi="0" ci="1" mb="0" cb="0"/><line nr="91" mi="0" ci="5" mb="0" cb="0"/><line nr="92" mi="0" ci="6" mb="0" cb="0"/><line nr="93" mi="0" ci="9" mb="0" cb="0"/><line nr="94" mi="0" ci="1" mb="0" cb="0"/><line nr="95" mi="0" ci="3" mb="0" cb="0"/><line nr="111" mi="0" ci="4" mb="0" cb="0"/><line nr="112" mi="0" ci="5" mb="0" cb="0"/><line nr="113" mi="0" ci="7" mb="0" cb="0"/><line nr="114" mi="0" ci="6" mb="0" cb="0"/><line nr="115" mi="0" ci="1" mb="0" cb="0"/><line nr="116" mi="0" ci="3" mb="0" cb="0"/><line nr="129" mi="0" ci="5" mb="0" cb="0"/><line nr="141" mi="0" ci="2" mb="0" cb="0"/><line nr="142" mi="0" ci="12" mb="0" cb="2"/><line nr="143" mi="0" ci="5" mb="0" cb="0"/><line nr="144" mi="0" ci="1" mb="0" cb="0"/><line nr="145" mi="0" ci="2" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="16" mb="0" cb="2"/><line nr="167" mi="0" ci="5" mb="0" cb="0"/><line nr="180" mi="0" ci="4" mb="0" cb="0"/><line nr="194" mi="0" ci="7" mb="0" cb="0"/><line nr="214" mi="0" ci="4" mb="0" cb="0"/><line nr="215" mi="0" ci="14" mb="0" cb="4"/><line nr="217" mi="0" ci="8" mb="0" cb="0"/><line nr="238" mi="0" ci="8" mb="0" cb="2"/><line nr="239" mi="0" ci="9" mb="0" cb="0"/><line nr="266" mi="0" ci="4" mb="0" cb="0"/><line nr="267" mi="0" ci="14" mb="0" cb="4"/><line nr="269" mi="0" ci="8" mb="0" cb="2"/><line nr="270" mi="0" ci="10" mb="0" cb="0"/><line nr="288" mi="0" ci="4" mb="0" cb="0"/><line nr="289" mi="0" ci="16" mb="0" cb="2"/><line nr="290" mi="0" ci="2" mb="0" cb="0"/><line nr="291" mi="0" ci="12" mb="0" cb="2"/><line nr="292" mi="0" ci="13" mb="0" cb="0"/><line nr="293" mi="0" ci="1" mb="0" cb="0"/><line nr="294" mi="0" ci="2" mb="0" cb="0"/><line nr="315" mi="0" ci="4" mb="0" cb="0"/><line nr="316" mi="0" ci="16" mb="0" cb="2"/><line nr="317" mi="0" ci="5" mb="0" cb="0"/><line nr="338" mi="0" ci="4" mb="0" cb="0"/><line nr="339" mi="0" ci="16" mb="0" cb="2"/><line nr="340" mi="0" ci="8" mb="0" cb="0"/><line nr="367" mi="0" ci="4" mb="0" cb="0"/><line nr="368" mi="0" ci="16" mb="0" cb="2"/><line nr="369" mi="0" ci="4" mb="0" cb="0"/><line nr="370" mi="0" ci="14" mb="0" cb="4"/><line nr="372" mi="0" ci="9" mb="0" cb="0"/><line nr="400" mi="0" ci="4" mb="0" cb="0"/><line nr="401" mi="0" ci="16" mb="0" cb="2"/><line nr="402" mi="0" ci="8" mb="0" cb="2"/><line nr="403" mi="0" ci="10" mb="0" cb="0"/><line nr="438" mi="0" ci="4" mb="0" cb="0"/><line nr="439" mi="0" ci="16" mb="0" cb="2"/><line nr="440" mi="0" ci="4" mb="0" cb="0"/><line nr="441" mi="0" ci="14" mb="0" cb="4"/><line nr="443" mi="0" ci="8" mb="0" cb="2"/><line nr="444" mi="0" ci="11" mb="0" cb="0"/><line nr="456" mi="0" ci="2" mb="0" cb="0"/><line nr="457" mi="0" ci="12" mb="0" cb="2"/><line nr="458" mi="0" ci="5" mb="0" cb="0"/><line nr="459" mi="0" ci="1" mb="0" cb="0"/><line nr="460" mi="0" ci="2" mb="0" cb="0"/><line nr="480" mi="0" ci="4" mb="0" cb="0"/><line nr="481" mi="0" ci="16" mb="0" cb="2"/><line nr="482" mi="0" ci="5" mb="0" cb="0"/><line nr="494" mi="0" ci="4" mb="0" cb="0"/><line nr="507" mi="0" ci="8" mb="0" cb="2"/><line nr="508" mi="0" ci="7" mb="0" cb="0"/><line nr="513" mi="0" ci="9" mb="0" cb="0"/><line nr="518" mi="0" ci="3" mb="0" cb="2"/><line nr="519" mi="0" ci="2" mb="0" cb="0"/><line nr="521" mi="0" ci="3" mb="0" cb="2"/><line nr="522" mi="0" ci="2" mb="0" cb="0"/><line nr="524" mi="0" ci="3" mb="0" cb="0"/><line nr="525" mi="0" ci="6" mb="0" cb="0"/><line nr="538" mi="0" ci="4" mb="0" cb="0"/><line nr="539" mi="0" ci="1" mb="0" cb="0"/><line nr="557" mi="0" ci="4" mb="0" cb="0"/><line nr="558" mi="0" ci="6" mb="0" cb="0"/><line nr="559" mi="1" ci="13" mb="1" cb="1"/><line nr="560" mi="0" ci="7" mb="0" cb="0"/><line nr="561" mi="0" ci="2" mb="0" cb="0"/><line nr="582" mi="0" ci="4" mb="0" cb="0"/><line nr="583" mi="0" ci="4" mb="0" cb="0"/><line nr="584" mi="0" ci="17" mb="0" cb="4"/><line nr="585" mi="0" ci="6" mb="0" cb="0"/><line nr="586" mi="0" ci="2" mb="0" cb="0"/><line nr="601" mi="0" ci="4" mb="0" cb="0"/><line nr="602" mi="0" ci="8" mb="0" cb="2"/><line nr="603" mi="0" ci="7" mb="0" cb="0"/><line nr="605" mi="0" ci="2" mb="0" cb="0"/><line nr="620" mi="0" ci="11" mb="0" cb="0"/><line nr="621" mi="0" ci="8" mb="0" cb="0"/><line nr="622" mi="0" ci="1" mb="0" cb="0"/><line nr="623" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="718"/><counter type="BRANCH" missed="1" covered="63"/><counter type="LINE" missed="0" covered="110"/><counter type="COMPLEXITY" missed="1" covered="64"/><counter type="METHOD" missed="0" covered="33"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractMatrixBuilder.java"><line nr="43" mi="0" ci="2" mb="0" cb="0"/><line nr="44" mi="0" ci="8" mb="0" cb="0"/><line nr="45" mi="0" ci="8" mb="0" cb="0"/><line nr="46" mi="0" ci="5" mb="0" cb="0"/><line nr="47" mi="0" ci="1" mb="0" cb="0"/><line nr="51" mi="0" ci="8" mb="0" cb="0"/><line nr="55" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="75" covered="4577"/><counter type="BRANCH" missed="12" covered="354"/><counter type="LINE" missed="11" covered="726"/><counter type="COMPLEXITY" missed="14" covered="360"/><counter type="METHOD" missed="3" covered="188"/><counter type="CLASS" missed="0" covered="12"/></package><package name="com/github/ltennstedt/finnmath/number"><class name="com/github/ltennstedt/finnmath/number/PolarForm"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="70"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="83"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(I)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="99"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="116"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="137"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="calculateComplexNumer" desc="(Lch/obermuhlner/math/big/BigFloat$Context;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="151"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="158"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="163"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="175"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRadial" desc="()Ljava/math/BigDecimal;" line="179"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getAngular" desc="()Ljava/math/BigDecimal;" line="183"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="55" covered="112"/><counter type="BRANCH" missed="8" covered="4"/><counter type="LINE" missed="8" covered="21"/><counter type="COMPLEXITY" missed="7" covered="10"/><counter type="METHOD" missed="3" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/RealComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="72"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)V" line="86"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="103"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="120"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="138"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="160"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="185"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="203"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="219"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="232"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="245"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigDecimal;" line="257"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="269"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(I)Ljava/math/BigDecimal;" line="285"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="306"><counter type="INSTRUCTION" missed="106" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polarForm" desc="()Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="333"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polarForm" desc="(I)Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="349"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polarForm" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="366"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polarForm" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="387"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="402"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="408"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="413"><counter type="INSTRUCTION" missed="2" covered="29"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="45"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="153" covered="360"/><counter type="BRANCH" missed="21" covered="15"/><counter type="LINE" missed="25" covered="46"/><counter type="COMPLEXITY" missed="17" covered="24"/><counter type="METHOD" missed="6" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/ScientificNotation"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;I)V" line="61"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="asString" desc="()Ljava/lang/String;" line="74"><counter type="INSTRUCTION" missed="0" covered="59"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="92"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="97"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="109"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getCoefficient" desc="()Ljava/math/BigDecimal;" line="113"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getExponent" desc="()I" line="117"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="132"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/SimpleComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="70"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="86"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="103"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="121"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="144"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="163"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="181"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="197"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="210"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="223"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigInteger;" line="235"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="247"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(I)Ljava/math/BigDecimal;" line="263"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="284"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polarForm" desc="()Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="298"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polarForm" desc="(I)Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="314"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polarForm" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="331"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="polarForm" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="352"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="367"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="373"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="378"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="43"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="60" covered="298"/><counter type="BRANCH" missed="8" covered="16"/><counter type="LINE" missed="13" covered="39"/><counter type="COMPLEXITY" missed="10" covered="24"/><counter type="METHOD" missed="6" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/Fraction"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="81"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intValue" desc="()I" line="97"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="longValue" desc="()J" line="110"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="floatValue" desc="()F" line="123"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="doubleValue" desc="()D" line="136"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="156"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="180"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="204"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="231"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="253"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="275"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="293"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="306"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="323"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)I" line="341"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="363"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="384"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThan" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="400"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThan" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="416"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="435"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="457"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="normalize" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="480"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="()Lcom/github/ltennstedt/finnmath/number/Fraction;" line="504"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="signum" desc="()I" line="517"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equivalent" desc="(Lcom/github/ltennstedt/finnmath/number/Fraction;)Z" line="534"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="540"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="545"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="557"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNumerator" desc="()Ljava/math/BigInteger;" line="561"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getDenominator" desc="()Ljava/math/BigInteger;" line="565"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="41"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="495"/><counter type="BRANCH" missed="0" covered="42"/><counter type="LINE" missed="0" covered="87"/><counter type="COMPLEXITY" missed="0" covered="52"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/number/AbstractComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="50"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="67"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="(Ljava/math/RoundingMode;)Ljava/math/BigDecimal;" line="84"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="102"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getReal" desc="()Ljava/lang/Object;" line="106"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getImaginary" desc="()Ljava/lang/Object;" line="110"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="13" covered="31"/><counter type="LINE" missed="3" covered="7"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="RealComplexNumber.java"><line nr="45" mi="0" ci="6" mb="0" cb="0"/><line nr="50" mi="0" ci="6" mb="0" cb="0"/><line nr="55" mi="0" ci="7" mb="0" cb="0"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="14" mb="0" cb="0"/><line nr="87" mi="0" ci="3" mb="0" cb="0"/><line nr="88" mi="0" ci="1" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="18" mb="0" cb="0"/><line nr="120" mi="0" ci="4" mb="0" cb="0"/><line nr="121" mi="0" ci="14" mb="0" cb="0"/><line nr="122" mi="0" ci="4" mb="0" cb="0"/><line nr="138" mi="0" ci="4" mb="0" cb="0"/><line nr="139" mi="0" ci="16" mb="0" cb="0"/><line nr="140" mi="0" ci="16" mb="0" cb="0"/><line nr="141" mi="0" ci="6" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="161" mi="0" ci="5" mb="0" cb="0"/><line nr="162" mi="0" ci="12" mb="0" cb="0"/><line nr="163" mi="0" ci="17" mb="0" cb="0"/><line nr="164" mi="0" ci="2" mb="0" cb="0"/><line nr="165" mi="0" ci="11" mb="0" cb="0"/><line nr="166" mi="0" ci="8" mb="0" cb="0"/><line nr="167" mi="0" ci="6" mb="0" cb="0"/><line nr="185" mi="0" ci="9" mb="0" cb="2"/><line nr="186" mi="0" ci="3" mb="0" cb="2"/><line nr="187" mi="0" ci="8" mb="0" cb="0"/><line nr="188" mi="0" ci="3" mb="0" cb="2"/><line nr="189" mi="0" ci="2" mb="0" cb="0"/><line nr="191" mi="0" ci="2" mb="0" cb="0"/><line nr="203" mi="0" ci="12" mb="0" cb="0"/><line nr="219" mi="0" ci="5" mb="0" cb="0"/><line nr="220" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="8" mb="0" cb="2"/><line nr="245" mi="0" ci="7" mb="0" cb="0"/><line nr="257" mi="0" ci="12" mb="0" cb="0"/><line nr="269" mi="0" ci="11" mb="0" cb="0"/><line nr="285" mi="9" ci="0" mb="2" cb="0"/><line nr="286" mi="2" ci="0" mb="0" cb="0"/><line nr="306" mi="17" ci="0" mb="4" cb="0"/><line nr="307" mi="9" ci="0" mb="2" cb="0"/><line nr="308" mi="4" ci="0" mb="0" cb="0"/><line nr="309" mi="6" ci="0" mb="0" cb="0"/><line nr="310" mi="3" ci="0" mb="0" cb="0"/><line nr="311" mi="6" ci="0" mb="2" cb="0"/><line nr="312" mi="12" ci="0" mb="0" cb="0"/><line nr="313" mi="6" ci="0" mb="2" cb="0"/><line nr="314" mi="3" ci="0" mb="0" cb="0"/><line nr="316" mi="3" ci="0" mb="0" cb="0"/><line nr="317" mi="13" ci="0" mb="2" cb="0"/><line nr="318" mi="4" ci="0" mb="0" cb="0"/><line nr="320" mi="9" ci="0" mb="0" cb="0"/><line nr="321" mi="11" ci="0" mb="2" cb="0"/><line nr="333" mi="2" ci="0" mb="0" cb="0"/><line nr="349" mi="9" ci="0" mb="2" cb="0"/><line nr="350" mi="2" ci="0" mb="0" cb="0"/><line nr="366" mi="4" ci="0" mb="0" cb="0"/><line nr="367" mi="2" ci="0" mb="0" cb="0"/><line nr="387" mi="9" ci="0" mb="2" cb="0"/><line nr="388" mi="4" ci="0" mb="0" cb="0"/><line nr="389" mi="2" ci="0" mb="0" cb="0"/><line nr="402" mi="0" ci="30" mb="0" cb="0"/><line nr="403" mi="0" ci="8" mb="0" cb="0"/><line nr="408" mi="0" ci="14" mb="0" cb="0"/><line nr="413" mi="0" ci="3" mb="0" cb="2"/><line nr="414" mi="0" ci="2" mb="0" cb="0"/><line nr="416" mi="0" ci="3" mb="1" cb="1"/><line nr="417" mi="2" ci="0" mb="0" cb="0"/><line nr="419" mi="0" ci="3" mb="0" cb="0"/><line nr="420" mi="0" ci="18" mb="0" cb="4"/><counter type="INSTRUCTION" missed="153" covered="360"/><counter type="BRANCH" missed="21" covered="15"/><counter type="LINE" missed="25" covered="46"/><counter type="COMPLEXITY" missed="17" covered="24"/><counter type="METHOD" missed="6" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Fraction.java"><line nr="41" mi="0" ci="6" mb="0" cb="0"/><line nr="46" mi="0" ci="7" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="0" ci="6" mb="0" cb="0"/><line nr="83" mi="0" ci="6" mb="0" cb="0"/><line nr="84" mi="0" ci="10" mb="0" cb="2"/><line nr="85" mi="0" ci="1" mb="0" cb="0"/><line nr="97" mi="0" ci="14" mb="0" cb="0"/><line nr="110" mi="0" ci="14" mb="0" cb="0"/><line nr="123" mi="0" ci="14" mb="0" cb="0"/><line nr="136" mi="0" ci="14" mb="0" cb="0"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="0" ci="1" mb="0" cb="0"/><line nr="158" mi="0" ci="11" mb="0" cb="0"/><line nr="159" mi="0" ci="6" mb="0" cb="0"/><line nr="160" mi="0" ci="6" mb="0" cb="0"/><line nr="180" mi="0" ci="4" mb="0" cb="0"/><line nr="181" mi="0" ci="1" mb="0" cb="0"/><line nr="182" mi="0" ci="11" mb="0" cb="0"/><line nr="183" mi="0" ci="6" mb="0" cb="0"/><line nr="184" mi="0" ci="6" mb="0" cb="0"/><line nr="204" mi="0" ci="4" mb="0" cb="0"/><line nr="205" mi="0" ci="6" mb="0" cb="0"/><line nr="206" mi="0" ci="6" mb="0" cb="0"/><line nr="207" mi="0" ci="6" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="5" mb="0" cb="0"/><line nr="233" mi="0" ci="5" mb="0" cb="0"/><line nr="253" mi="0" ci="9" mb="0" cb="2"/><line nr="254" mi="0" ci="3" mb="0" cb="2"/><line nr="255" mi="0" ci="8" mb="0" cb="0"/><line nr="256" mi="0" ci="3" mb="0" cb="2"/><line nr="257" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="2" mb="0" cb="0"/><line nr="275" mi="0" ci="9" mb="0" cb="0"/><line nr="293" mi="0" ci="5" mb="0" cb="0"/><line nr="294" mi="0" ci="8" mb="0" cb="0"/><line nr="306" mi="0" ci="9" mb="0" cb="2"/><line nr="323" mi="0" ci="10" mb="0" cb="0"/><line nr="341" mi="0" ci="4" mb="0" cb="0"/><line nr="342" mi="0" ci="4" mb="0" cb="2"/><line nr="343" mi="0" ci="2" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="0" cb="2"/><line nr="346" mi="0" ci="2" mb="0" cb="0"/><line nr="348" mi="0" ci="2" mb="0" cb="0"/><line nr="363" mi="0" ci="4" mb="0" cb="0"/><line nr="364" mi="0" ci="3" mb="0" cb="0"/><line nr="365" mi="0" ci="3" mb="0" cb="0"/><line nr="366" mi="0" ci="6" mb="0" cb="0"/><line nr="367" mi="0" ci="6" mb="0" cb="0"/><line nr="368" mi="0" ci="9" mb="0" cb="2"/><line nr="384" mi="0" ci="4" mb="0" cb="0"/><line nr="385" mi="0" ci="12" mb="0" cb="4"/><line nr="400" mi="0" ci="4" mb="0" cb="0"/><line nr="401" mi="0" ci="8" mb="0" cb="2"/><line nr="416" mi="0" ci="4" mb="0" cb="0"/><line nr="417" mi="0" ci="8" mb="0" cb="2"/><line nr="435" mi="0" ci="4" mb="0" cb="0"/><line nr="436" mi="0" ci="4" mb="0" cb="2"/><line nr="437" mi="0" ci="2" mb="0" cb="0"/><line nr="439" mi="0" ci="2" mb="0" cb="0"/><line nr="457" mi="0" ci="4" mb="0" cb="0"/><line nr="458" mi="0" ci="4" mb="0" cb="2"/><line nr="459" mi="0" ci="2" mb="0" cb="0"/><line nr="461" mi="0" ci="2" mb="0" cb="0"/><line nr="480" mi="0" ci="3" mb="0" cb="2"/><line nr="481" mi="0" ci="11" mb="0" cb="0"/><line nr="483" mi="0" ci="3" mb="0" cb="2"/><line nr="484" mi="0" ci="2" mb="0" cb="0"/><line nr="486" mi="0" ci="5" mb="0" cb="2"/><line nr="487" mi="0" ci="3" mb="0" cb="0"/><line nr="489" mi="0" ci="2" mb="0" cb="0"/><line nr="504" mi="0" ci="6" mb="0" cb="0"/><line nr="505" mi="0" ci="12" mb="0" cb="0"/><line nr="517" mi="0" ci="8" mb="0" cb="0"/><line nr="534" mi="0" ci="4" mb="0" cb="0"/><line nr="535" mi="0" ci="8" mb="0" cb="0"/><line nr="540" mi="0" ci="14" mb="0" cb="0"/><line nr="545" mi="0" ci="3" mb="0" cb="2"/><line nr="546" mi="0" ci="2" mb="0" cb="0"/><line nr="548" mi="0" ci="3" mb="0" cb="2"/><line nr="549" mi="0" ci="2" mb="0" cb="0"/><line nr="551" mi="0" ci="3" mb="0" cb="0"/><line nr="552" mi="0" ci="16" mb="0" cb="4"/><line nr="557" mi="0" ci="12" mb="0" cb="0"/><line nr="561" mi="0" ci="3" mb="0" cb="0"/><line nr="565" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="495"/><counter type="BRANCH" missed="0" covered="42"/><counter type="LINE" missed="0" covered="87"/><counter type="COMPLEXITY" missed="0" covered="52"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumber.java"><line nr="43" mi="0" ci="6" mb="0" cb="0"/><line nr="48" mi="0" ci="6" mb="0" cb="0"/><line nr="53" mi="0" ci="7" mb="0" cb="0"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="18" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="14" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="121" mi="0" ci="4" mb="0" cb="0"/><line nr="122" mi="0" ci="16" mb="0" cb="0"/><line nr="123" mi="0" ci="16" mb="0" cb="0"/><line nr="124" mi="0" ci="6" mb="0" cb="0"/><line nr="144" mi="0" ci="4" mb="0" cb="0"/><line nr="145" mi="0" ci="5" mb="0" cb="0"/><line nr="146" mi="0" ci="10" mb="0" cb="0"/><line nr="163" mi="0" ci="9" mb="0" cb="2"/><line nr="164" mi="0" ci="3" mb="0" cb="2"/><line nr="165" mi="0" ci="8" mb="0" cb="0"/><line nr="166" mi="0" ci="3" mb="0" cb="2"/><line nr="167" mi="0" ci="2" mb="0" cb="0"/><line nr="169" mi="0" ci="2" mb="0" cb="0"/><line nr="181" mi="0" ci="12" mb="0" cb="0"/><line nr="197" mi="0" ci="5" mb="0" cb="0"/><line nr="198" mi="0" ci="4" mb="0" cb="0"/><line nr="210" mi="0" ci="8" mb="0" cb="2"/><line nr="223" mi="0" ci="7" mb="0" cb="0"/><line nr="235" mi="0" ci="12" mb="0" cb="0"/><line nr="247" mi="0" ci="11" mb="0" cb="0"/><line nr="263" mi="9" ci="0" mb="2" cb="0"/><line nr="264" mi="2" ci="0" mb="0" cb="0"/><line nr="284" mi="9" ci="0" mb="2" cb="0"/><line nr="285" mi="4" ci="0" mb="0" cb="0"/><line nr="286" mi="2" ci="0" mb="0" cb="0"/><line nr="298" mi="2" ci="0" mb="0" cb="0"/><line nr="314" mi="9" ci="0" mb="2" cb="0"/><line nr="315" mi="2" ci="0" mb="0" cb="0"/><line nr="331" mi="4" ci="0" mb="0" cb="0"/><line nr="332" mi="2" ci="0" mb="0" cb="0"/><line nr="352" mi="9" ci="0" mb="2" cb="0"/><line nr="353" mi="4" ci="0" mb="0" cb="0"/><line nr="354" mi="2" ci="0" mb="0" cb="0"/><line nr="367" mi="0" ci="30" mb="0" cb="0"/><line nr="368" mi="0" ci="8" mb="0" cb="0"/><line nr="373" mi="0" ci="14" mb="0" cb="0"/><line nr="378" mi="0" ci="3" mb="0" cb="2"/><line nr="379" mi="0" ci="2" mb="0" cb="0"/><line nr="381" mi="0" ci="3" mb="0" cb="2"/><line nr="382" mi="0" ci="2" mb="0" cb="0"/><line nr="384" mi="0" ci="3" mb="0" cb="0"/><line nr="385" mi="0" ci="18" mb="0" cb="4"/><counter type="INSTRUCTION" missed="60" covered="298"/><counter type="BRANCH" missed="8" covered="16"/><counter type="LINE" missed="13" covered="39"/><counter type="COMPLEXITY" missed="10" covered="24"/><counter type="METHOD" missed="6" covered="16"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractComplexNumber.java"><line nr="50" mi="0" ci="2" mb="0" cb="0"/><line nr="51" mi="0" ci="5" mb="0" cb="0"/><line nr="52" mi="0" ci="5" mb="0" cb="0"/><line nr="53" mi="0" ci="1" mb="0" cb="0"/><line nr="67" mi="4" ci="0" mb="0" cb="0"/><line nr="84" mi="4" ci="0" mb="0" cb="0"/><line nr="85" mi="5" ci="0" mb="0" cb="0"/><line nr="102" mi="0" ci="12" mb="0" cb="0"/><line nr="106" mi="0" ci="3" mb="0" cb="0"/><line nr="110" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="31"/><counter type="LINE" missed="3" covered="7"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="PolarForm.java"><line nr="70" mi="0" ci="2" mb="0" cb="0"/><line nr="71" mi="0" ci="6" mb="0" cb="0"/><line nr="72" mi="0" ci="6" mb="0" cb="0"/><line nr="73" mi="0" ci="1" mb="0" cb="0"/><line nr="83" mi="0" ci="3" mb="0" cb="0"/><line nr="84" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="9" mb="0" cb="2"/><line nr="100" mi="0" ci="6" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="116" mi="0" ci="4" mb="0" cb="0"/><line nr="117" mi="0" ci="7" mb="0" cb="0"/><line nr="118" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="9" mb="0" cb="2"/><line nr="138" mi="0" ci="4" mb="0" cb="0"/><line nr="139" mi="0" ci="7" mb="0" cb="0"/><line nr="140" mi="0" ci="4" mb="0" cb="0"/><line nr="151" mi="0" ci="10" mb="0" cb="0"/><line nr="152" mi="0" ci="10" mb="0" cb="0"/><line nr="153" mi="0" ci="6" mb="0" cb="0"/><line nr="158" mi="14" ci="0" mb="0" cb="0"/><line nr="163" mi="3" ci="0" mb="2" cb="0"/><line nr="164" mi="2" ci="0" mb="0" cb="0"/><line nr="166" mi="3" ci="0" mb="2" cb="0"/><line nr="167" mi="2" ci="0" mb="0" cb="0"/><line nr="169" mi="3" ci="0" mb="0" cb="0"/><line nr="170" mi="16" ci="0" mb="4" cb="0"/><line nr="175" mi="12" ci="0" mb="0" cb="0"/><line nr="179" mi="0" ci="3" mb="0" cb="0"/><line nr="183" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="55" covered="112"/><counter type="BRANCH" missed="8" covered="4"/><counter type="LINE" missed="8" covered="21"/><counter type="COMPLEXITY" missed="7" covered="10"/><counter type="METHOD" missed="3" covered="8"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="ScientificNotation.java"><line nr="61" mi="0" ci="2" mb="0" cb="0"/><line nr="62" mi="0" ci="6" mb="0" cb="0"/><line nr="63" mi="0" ci="3" mb="0" cb="0"/><line nr="64" mi="0" ci="1" mb="0" cb="0"/><line nr="74" mi="0" ci="5" mb="0" cb="2"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="0" ci="3" mb="0" cb="2"/><line nr="78" mi="0" ci="14" mb="0" cb="0"/><line nr="79" mi="0" ci="1" mb="0" cb="0"/><line nr="81" mi="0" ci="3" mb="0" cb="2"/><line nr="82" mi="0" ci="4" mb="0" cb="0"/><line nr="84" mi="0" ci="4" mb="0" cb="2"/><line nr="85" mi="0" ci="10" mb="0" cb="0"/><line nr="87" mi="0" ci="13" mb="0" cb="0"/><line nr="92" mi="0" ci="15" mb="0" cb="0"/><line nr="97" mi="0" ci="3" mb="0" cb="2"/><line nr="98" mi="0" ci="2" mb="0" cb="0"/><line nr="100" mi="0" ci="3" mb="0" cb="2"/><line nr="101" mi="0" ci="2" mb="0" cb="0"/><line nr="103" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="15" mb="0" cb="4"/><line nr="109" mi="0" ci="12" mb="0" cb="0"/><line nr="113" mi="0" ci="3" mb="0" cb="0"/><line nr="117" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="132"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="24"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="281" covered="1428"/><counter type="BRANCH" missed="37" covered="93"/><counter type="LINE" missed="49" covered="224"/><counter type="COMPLEXITY" missed="36" covered="129"/><counter type="METHOD" missed="17" covered="83"/><counter type="CLASS" missed="0" covered="6"/></package><package name="com/github/ltennstedt/finnmath/util"><class name="com/github/ltennstedt/finnmath/util/MathRandom"><method name="&lt;init&gt;" desc="()V" line="63"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(J)V" line="75"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveLong" desc="(J)J" line="91"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeLong" desc="(J)J" line="107"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLong" desc="(J)J" line="123"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveLongs" desc="(JI)[J" line="147"><counter type="INSTRUCTION" missed="1" covered="35"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeLongs" desc="(JI)[J" line="173"><counter type="INSTRUCTION" missed="1" covered="35"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLongs" desc="(JI)[J" line="199"><counter type="INSTRUCTION" missed="1" covered="35"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveDecimal" desc="(JI)Ljava/math/BigDecimal;" line="225"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeDecimal" desc="(JI)Ljava/math/BigDecimal;" line="251"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimal" desc="(JI)Ljava/math/BigDecimal;" line="277"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveDecimal" desc="(JI)Ljava/math/BigDecimal;" line="300"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeDecimal" desc="(JI)Ljava/math/BigDecimal;" line="327"><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleDecimal" desc="(JI)Ljava/math/BigDecimal;" line="353"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keepDecimalInBound" desc="(Ljava/math/BigDecimal;J)Ljava/math/BigDecimal;" line="361"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveDecimals" desc="(JII)Ljava/util/List;" line="396"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeDecimals" desc="(JII)Ljava/util/List;" line="427"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimals" desc="(JII)Ljava/util/List;" line="458"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveDecimals" desc="(JII)Ljava/util/List;" line="490"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeDecimals" desc="(JII)Ljava/util/List;" line="522"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleDecimals" desc="(JII)Ljava/util/List;" line="554"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="578"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="598"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="616"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="636"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="655"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFraction" desc="(J)Lcom/github/ltennstedt/finnmath/number/Fraction;" line="672"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFractions" desc="(JI)Ljava/util/List;" line="696"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFractions" desc="(JI)Ljava/util/List;" line="722"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFractions" desc="(JI)Ljava/util/List;" line="748"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFractions" desc="(JI)Ljava/util/List;" line="775"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFractions" desc="(JI)Ljava/util/List;" line="802"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFractions" desc="(JI)Ljava/util/List;" line="828"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="850"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/number/SimpleComplexNumber;" line="869"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="895"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="922"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="946"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/number/RealComplexNumber;" line="968"><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumbers" desc="(JII)Ljava/util/List;" line="1000"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumbers" desc="(JII)Ljava/util/List;" line="1033"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPolarForm" desc="(JI)Lcom/github/ltennstedt/finnmath/number/PolarForm;" line="1060"><counter type="INSTRUCTION" missed="2" covered="29"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPolarForms" desc="(JII)Ljava/util/List;" line="1086"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="nextBigIntVector" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntVector;" line="1113"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntVectors" desc="(JII)Ljava/util/List;" line="1141"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1172"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1202"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1235"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1269"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1294"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1326"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix;" line="1361"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntMatrices" desc="(JIII)Ljava/util/List;" line="1405"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1438"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1470"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntMatrices" desc="(JII)Ljava/util/List;" line="1501"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntMatrices" desc="(JII)Ljava/util/List;" line="1532"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntMatrices" desc="(JII)Ljava/util/List;" line="1563"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntMatrices" desc="(JII)Ljava/util/List;" line="1595"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalVector" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalVector;" line="1626"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalVectors" desc="(JIII)Ljava/util/List;" line="1664"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalMatrix" desc="(JIII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1700"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1735"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1772"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1810"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1839"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1875"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix;" line="1914"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDecimalMatrices" desc="(JIIII)Ljava/util/List;" line="1963"><counter type="INSTRUCTION" missed="0" covered="66"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2002"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2040"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2077"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2114"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2151"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2189"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="2202"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRandom" desc="()Ljava/util/Random;" line="2207"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricDecimalMatrix$23" desc="(IJILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1918"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricDecimalMatrix$22" desc="(Ljava/lang/Integer;JILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1919"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricDecimalMatrix$21" desc="(IJILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1879"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricDecimalMatrix$20" desc="(JILjava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1880"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalDecimalMatrix$19" desc="(ILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1843"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalDecimalMatrix$18" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1844"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularDecimalMatrix$17" desc="(ILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1776"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularDecimalMatrix$16" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1777"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularDecimalMatrix$15" desc="(ILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1739"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularDecimalMatrix$14" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1740"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDecimalMatrix$13" desc="(ILcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1706"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDecimalMatrix$12" desc="(Lcom/github/ltennstedt/finnmath/linear/DecimalMatrix$DecimalMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="1707"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntMatrix$11" desc="(IJLcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1365"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntMatrix$10" desc="(Ljava/lang/Integer;JLcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1366"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntMatrix$9" desc="(IJLcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1330"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntMatrix$8" desc="(JLjava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;)V" line="1331"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntMatrix$7" desc="(ILcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1298"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntMatrix$6" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1299"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntMatrix$5" desc="(ILcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1239"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntMatrix$4" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1240"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntMatrix$3" desc="(ILcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1206"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntMatrix$2" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1207"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntMatrix$1" desc="(ILcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;JLjava/lang/Integer;)V" line="1177"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntMatrix$0" desc="(Lcom/github/ltennstedt/finnmath/linear/BigIntMatrix$BigIntMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="1178"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="61" covered="3355"/><counter type="BRANCH" missed="16" covered="464"/><counter type="LINE" missed="10" covered="508"/><counter type="COMPLEXITY" missed="13" covered="328"/><counter type="METHOD" missed="1" covered="100"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/util/SquareRootCalculator"><method name="&lt;init&gt;" desc="()V" line="81"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;)V" line="99"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(ILjava/math/RoundingMode;)V" line="122"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)V" line="149"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;)Ljava/math/BigDecimal;" line="174"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="194"><counter type="INSTRUCTION" missed="1" covered="23"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrtOfPerfectSquare" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="218"><counter type="INSTRUCTION" missed="1" covered="24"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="perfectSquare" desc="(Ljava/math/BigInteger;)Z" line="239"><counter type="INSTRUCTION" missed="1" covered="36"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="heronsMethod" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="249"><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="calculateSuccessor" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="267"><counter type="INSTRUCTION" missed="1" covered="37"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="seedValue" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="277"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scientificNotationForSqrt" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/number/ScientificNotation;" line="287"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="304"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getPrecision" desc="()Ljava/math/BigDecimal;" line="309"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getScale" desc="()I" line="313"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRoundingMode" desc="()Ljava/math/RoundingMode;" line="317"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="46"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="436"/><counter type="BRANCH" missed="4" covered="26"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="4" covered="28"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="MathRandom.java"><line nr="63" mi="0" ci="2" mb="0" cb="0"/><line nr="64" mi="0" ci="5" mb="0" cb="0"/><line nr="65" mi="0" ci="1" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="76" mi="0" ci="6" mb="0" cb="0"/><line nr="77" mi="0" ci="1" mb="0" cb="0"/><line nr="91" mi="0" ci="10" mb="0" cb="2"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="10" mb="0" cb="2"/><line nr="108" mi="0" ci="6" mb="0" cb="0"/><line nr="123" mi="0" ci="10" mb="0" cb="2"/><line nr="124" mi="0" ci="4" mb="0" cb="2"/><line nr="125" mi="0" ci="4" mb="0" cb="0"/><line nr="127" mi="0" ci="4" mb="0" cb="0"/><line nr="147" mi="1" ci="9" mb="1" cb="1"/><line nr="148" mi="0" ci="8" mb="0" cb="2"/><line nr="149" mi="0" ci="3" mb="0" cb="0"/><line nr="150" mi="0" ci="7" mb="0" cb="2"/><line nr="151" mi="0" ci="6" mb="0" cb="0"/><line nr="153" mi="0" ci="2" mb="0" cb="0"/><line nr="173" mi="1" ci="9" mb="1" cb="1"/><line nr="174" mi="0" ci="8" mb="0" cb="2"/><line nr="175" mi="0" ci="3" mb="0" cb="0"/><line nr="176" mi="0" ci="7" mb="0" cb="2"/><line nr="177" mi="0" ci="6" mb="0" cb="0"/><line nr="179" mi="0" ci="2" mb="0" cb="0"/><line nr="199" mi="1" ci="9" mb="1" cb="1"/><line nr="200" mi="0" ci="8" mb="0" cb="2"/><line nr="201" mi="0" ci="3" mb="0" cb="0"/><line nr="202" mi="0" ci="7" mb="0" cb="2"/><line nr="203" mi="0" ci="6" mb="0" cb="0"/><line nr="205" mi="0" ci="2" mb="0" cb="0"/><line nr="225" mi="0" ci="10" mb="0" cb="2"/><line nr="226" mi="0" ci="9" mb="0" cb="2"/><line nr="227" mi="0" ci="5" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="1" cb="1"/><line nr="229" mi="3" ci="0" mb="0" cb="0"/><line nr="231" mi="0" ci="2" mb="0" cb="0"/><line nr="251" mi="0" ci="10" mb="0" cb="2"/><line nr="252" mi="0" ci="9" mb="0" cb="2"/><line nr="253" mi="0" ci="5" mb="0" cb="0"/><line nr="254" mi="0" ci="4" mb="0" cb="2"/><line nr="255" mi="0" ci="3" mb="0" cb="0"/><line nr="257" mi="0" ci="2" mb="0" cb="0"/><line nr="277" mi="0" ci="10" mb="0" cb="2"/><line nr="278" mi="0" ci="9" mb="0" cb="2"/><line nr="279" mi="0" ci="5" mb="0" cb="0"/><line nr="280" mi="0" ci="8" mb="0" cb="0"/><line nr="300" mi="0" ci="10" mb="0" cb="2"/><line nr="301" mi="0" ci="9" mb="0" cb="2"/><line nr="302" mi="0" ci="5" mb="0" cb="0"/><line nr="303" mi="0" ci="4" mb="1" cb="1"/><line nr="304" mi="3" ci="0" mb="0" cb="0"/><line nr="306" mi="0" ci="2" mb="0" cb="0"/><line nr="327" mi="0" ci="10" mb="0" cb="2"/><line nr="328" mi="0" ci="9" mb="0" cb="2"/><line nr="329" mi="0" ci="5" mb="0" cb="0"/><line nr="330" mi="0" ci="4" mb="1" cb="1"/><line nr="331" mi="0" ci="3" mb="0" cb="0"/><line nr="333" mi="2" ci="0" mb="0" cb="0"/><line nr="353" mi="0" ci="10" mb="0" cb="2"/><line nr="354" mi="0" ci="9" mb="0" cb="2"/><line nr="355" mi="0" ci="5" mb="0" cb="0"/><line nr="356" mi="0" ci="8" mb="0" cb="0"/><line nr="361" mi="0" ci="2" mb="0" cb="0"/><line nr="362" mi="0" ci="3" mb="0" cb="0"/><line nr="363" mi="0" ci="5" mb="0" cb="2"/><line nr="364" mi="0" ci="5" mb="0" cb="2"/><line nr="365" mi="0" ci="5" mb="0" cb="0"/><line nr="368" mi="0" ci="6" mb="0" cb="2"/><line nr="369" mi="0" ci="5" mb="0" cb="0"/><line nr="372" mi="0" ci="2" mb="0" cb="0"/><line nr="396" mi="0" ci="10" mb="0" cb="2"/><line nr="397" mi="0" ci="9" mb="0" cb="2"/><line nr="398" mi="0" ci="8" mb="0" cb="2"/><line nr="399" mi="0" ci="5" mb="0" cb="0"/><line nr="400" mi="0" ci="7" mb="0" cb="2"/><line nr="401" mi="0" ci="7" mb="0" cb="0"/><line nr="403" mi="0" ci="2" mb="0" cb="0"/><line nr="427" mi="0" ci="10" mb="0" cb="2"/><line nr="428" mi="0" ci="9" mb="0" cb="2"/><line nr="429" mi="0" ci="8" mb="0" cb="2"/><line nr="430" mi="0" ci="5" mb="0" cb="0"/><line nr="431" mi="0" ci="7" mb="0" cb="2"/><line nr="432" mi="0" ci="7" mb="0" cb="0"/><line nr="434" mi="0" ci="2" mb="0" cb="0"/><line nr="458" mi="0" ci="10" mb="0" cb="2"/><line nr="459" mi="0" ci="9" mb="0" cb="2"/><line nr="460" mi="0" ci="8" mb="0" cb="2"/><line nr="461" mi="0" ci="5" mb="0" cb="0"/><line nr="462" mi="0" ci="7" mb="0" cb="2"/><line nr="463" mi="0" ci="7" mb="0" cb="0"/><line nr="465" mi="0" ci="2" mb="0" cb="0"/><line nr="490" mi="0" ci="10" mb="0" cb="2"/><line nr="491" mi="0" ci="9" mb="0" cb="2"/><line nr="492" mi="0" ci="8" mb="0" cb="2"/><line nr="493" mi="0" ci="5" mb="0" cb="0"/><line nr="494" mi="0" ci="7" mb="0" cb="2"/><line nr="495" mi="0" ci="7" mb="0" cb="0"/><line nr="497" mi="0" ci="2" mb="0" cb="0"/><line nr="522" mi="0" ci="10" mb="0" cb="2"/><line nr="523" mi="0" ci="9" mb="0" cb="2"/><line nr="524" mi="0" ci="8" mb="0" cb="2"/><line nr="525" mi="0" ci="5" mb="0" cb="0"/><line nr="526" mi="0" ci="7" mb="0" cb="2"/><line nr="527" mi="0" ci="7" mb="0" cb="0"/><line nr="529" mi="0" ci="2" mb="0" cb="0"/><line nr="554" mi="0" ci="10" mb="0" cb="2"/><line nr="555" mi="0" ci="9" mb="0" cb="2"/><line nr="556" mi="0" ci="8" mb="0" cb="2"/><line nr="557" mi="0" ci="5" mb="0" cb="0"/><line nr="558" mi="0" ci="7" mb="0" cb="2"/><line nr="559" mi="0" ci="7" mb="0" cb="0"/><line nr="561" mi="0" ci="2" mb="0" cb="0"/><line nr="578" mi="0" ci="10" mb="0" cb="2"/><line nr="579" mi="0" ci="5" mb="0" cb="0"/><line nr="580" mi="0" ci="5" mb="0" cb="0"/><line nr="581" mi="0" ci="6" mb="0" cb="0"/><line nr="598" mi="0" ci="10" mb="0" cb="2"/><line nr="599" mi="0" ci="5" mb="0" cb="0"/><line nr="616" mi="0" ci="10" mb="0" cb="2"/><line nr="617" mi="0" ci="4" mb="0" cb="2"/><line nr="618" mi="0" ci="4" mb="0" cb="0"/><line nr="620" mi="0" ci="4" mb="0" cb="0"/><line nr="636" mi="0" ci="10" mb="0" cb="2"/><line nr="637" mi="0" ci="5" mb="0" cb="0"/><line nr="638" mi="0" ci="5" mb="0" cb="0"/><line nr="639" mi="0" ci="6" mb="0" cb="0"/><line nr="655" mi="0" ci="10" mb="0" cb="2"/><line nr="656" mi="0" ci="5" mb="0" cb="0"/><line nr="672" mi="0" ci="10" mb="0" cb="2"/><line nr="673" mi="0" ci="4" mb="0" cb="2"/><line nr="674" mi="0" ci="4" mb="0" cb="0"/><line nr="676" mi="0" ci="4" mb="0" cb="0"/><line nr="696" mi="0" ci="10" mb="0" cb="2"/><line nr="697" mi="0" ci="8" mb="0" cb="2"/><line nr="698" mi="0" ci="5" mb="0" cb="0"/><line nr="699" mi="0" ci="7" mb="0" cb="2"/><line nr="700" mi="0" ci="6" mb="0" cb="0"/><line nr="702" mi="0" ci="2" mb="0" cb="0"/><line nr="722" mi="0" ci="10" mb="0" cb="2"/><line nr="723" mi="0" ci="8" mb="0" cb="2"/><line nr="724" mi="0" ci="5" mb="0" cb="0"/><line nr="725" mi="0" ci="7" mb="0" cb="2"/><line nr="726" mi="0" ci="6" mb="0" cb="0"/><line nr="728" mi="0" ci="2" mb="0" cb="0"/><line nr="748" mi="0" ci="10" mb="0" cb="2"/><line nr="749" mi="0" ci="8" mb="0" cb="2"/><line nr="750" mi="0" ci="5" mb="0" cb="0"/><line nr="751" mi="0" ci="7" mb="0" cb="2"/><line nr="752" mi="0" ci="6" mb="0" cb="0"/><line nr="754" mi="0" ci="2" mb="0" cb="0"/><line nr="775" mi="0" ci="10" mb="0" cb="2"/><line nr="776" mi="0" ci="8" mb="0" cb="2"/><line nr="777" mi="0" ci="5" mb="0" cb="0"/><line nr="778" mi="0" ci="7" mb="0" cb="2"/><line nr="779" mi="0" ci="6" mb="0" cb="0"/><line nr="781" mi="0" ci="2" mb="0" cb="0"/><line nr="802" mi="0" ci="10" mb="0" cb="2"/><line nr="803" mi="0" ci="8" mb="0" cb="2"/><line nr="804" mi="0" ci="5" mb="0" cb="0"/><line nr="805" mi="0" ci="7" mb="0" cb="2"/><line nr="806" mi="0" ci="6" mb="0" cb="0"/><line nr="808" mi="0" ci="2" mb="0" cb="0"/><line nr="828" mi="0" ci="10" mb="0" cb="2"/><line nr="829" mi="0" ci="8" mb="0" cb="2"/><line nr="830" mi="0" ci="5" mb="0" cb="0"/><line nr="831" mi="0" ci="7" mb="0" cb="2"/><line nr="832" mi="0" ci="6" mb="0" cb="0"/><line nr="834" mi="0" ci="2" mb="0" cb="0"/><line nr="850" mi="0" ci="10" mb="0" cb="2"/><line nr="851" mi="0" ci="5" mb="0" cb="0"/><line nr="852" mi="0" ci="5" mb="0" cb="0"/><line nr="853" mi="0" ci="6" mb="0" cb="0"/><line nr="869" mi="0" ci="10" mb="0" cb="2"/><line nr="870" mi="0" ci="5" mb="0" cb="0"/><line nr="871" mi="0" ci="12" mb="0" cb="2"/><line nr="872" mi="0" ci="4" mb="0" cb="2"/><line nr="873" mi="0" ci="7" mb="0" cb="0"/><line nr="875" mi="0" ci="7" mb="0" cb="0"/><line nr="895" mi="0" ci="10" mb="0" cb="2"/><line nr="896" mi="0" ci="8" mb="0" cb="2"/><line nr="897" mi="0" ci="5" mb="0" cb="0"/><line nr="898" mi="0" ci="7" mb="0" cb="2"/><line nr="899" mi="0" ci="6" mb="0" cb="0"/><line nr="901" mi="0" ci="2" mb="0" cb="0"/><line nr="922" mi="0" ci="10" mb="0" cb="2"/><line nr="923" mi="0" ci="8" mb="0" cb="2"/><line nr="924" mi="0" ci="5" mb="0" cb="0"/><line nr="925" mi="0" ci="7" mb="0" cb="2"/><line nr="926" mi="0" ci="6" mb="0" cb="0"/><line nr="928" mi="0" ci="2" mb="0" cb="0"/><line nr="946" mi="0" ci="10" mb="0" cb="2"/><line nr="947" mi="0" ci="9" mb="0" cb="2"/><line nr="948" mi="0" ci="5" mb="0" cb="0"/><line nr="949" mi="0" ci="5" mb="0" cb="0"/><line nr="950" mi="0" ci="6" mb="0" cb="0"/><line nr="968" mi="0" ci="10" mb="0" cb="2"/><line nr="969" mi="0" ci="9" mb="0" cb="2"/><line nr="970" mi="0" ci="5" mb="0" cb="0"/><line nr="972" mi="0" ci="14" mb="0" cb="2"/><line nr="973" mi="0" ci="4" mb="0" cb="2"/><line nr="974" mi="0" ci="6" mb="0" cb="0"/><line nr="976" mi="0" ci="6" mb="0" cb="0"/><line nr="1000" mi="0" ci="10" mb="0" cb="2"/><line nr="1001" mi="0" ci="9" mb="0" cb="2"/><line nr="1002" mi="0" ci="8" mb="0" cb="2"/><line nr="1003" mi="0" ci="5" mb="0" cb="0"/><line nr="1004" mi="0" ci="7" mb="0" cb="2"/><line nr="1005" mi="0" ci="7" mb="0" cb="0"/><line nr="1007" mi="0" ci="2" mb="0" cb="0"/><line nr="1033" mi="0" ci="10" mb="0" cb="2"/><line nr="1034" mi="0" ci="9" mb="0" cb="2"/><line nr="1035" mi="0" ci="8" mb="0" cb="2"/><line nr="1036" mi="0" ci="5" mb="0" cb="0"/><line nr="1037" mi="0" ci="7" mb="0" cb="2"/><line nr="1038" mi="0" ci="7" mb="0" cb="0"/><line nr="1040" mi="0" ci="2" mb="0" cb="0"/><line nr="1060" mi="1" ci="9" mb="1" cb="1"/><line nr="1061" mi="1" ci="8" mb="1" cb="1"/><line nr="1062" mi="0" ci="12" mb="0" cb="0"/><line nr="1086" mi="10" ci="0" mb="2" cb="0"/><line nr="1087" mi="9" ci="0" mb="2" cb="0"/><line nr="1088" mi="8" ci="0" mb="2" cb="0"/><line nr="1089" mi="5" ci="0" mb="0" cb="0"/><line nr="1090" mi="7" ci="0" mb="2" cb="0"/><line nr="1091" mi="7" ci="0" mb="0" cb="0"/><line nr="1093" mi="2" ci="0" mb="0" cb="0"/><line nr="1113" mi="0" ci="10" mb="0" cb="2"/><line nr="1114" mi="0" ci="8" mb="0" cb="2"/><line nr="1115" mi="0" ci="3" mb="0" cb="0"/><line nr="1116" mi="0" ci="7" mb="0" cb="2"/><line nr="1117" mi="0" ci="7" mb="0" cb="0"/><line nr="1119" mi="0" ci="3" mb="0" cb="0"/><line nr="1141" mi="0" ci="10" mb="0" cb="2"/><line nr="1142" mi="0" ci="8" mb="0" cb="2"/><line nr="1143" mi="0" ci="8" mb="0" cb="2"/><line nr="1144" mi="0" ci="5" mb="0" cb="0"/><line nr="1145" mi="0" ci="7" mb="0" cb="2"/><line nr="1146" mi="0" ci="7" mb="0" cb="0"/><line nr="1148" mi="0" ci="2" mb="0" cb="0"/><line nr="1172" mi="0" ci="10" mb="0" cb="2"/><line nr="1173" mi="0" ci="8" mb="0" cb="2"/><line nr="1174" mi="0" ci="8" mb="0" cb="2"/><line nr="1175" mi="0" ci="4" mb="0" cb="0"/><line nr="1176" mi="0" ci="13" mb="0" cb="0"/><line nr="1177" mi="0" ci="13" mb="0" cb="0"/><line nr="1178" mi="0" ci="9" mb="0" cb="0"/><line nr="1179" mi="0" ci="1" mb="0" cb="0"/><line nr="1180" mi="0" ci="1" mb="0" cb="0"/><line nr="1181" mi="0" ci="3" mb="0" cb="0"/><line nr="1202" mi="0" ci="10" mb="0" cb="2"/><line nr="1203" mi="0" ci="8" mb="0" cb="2"/><line nr="1204" mi="0" ci="4" mb="0" cb="0"/><line nr="1205" mi="0" ci="13" mb="0" cb="0"/><line nr="1206" mi="0" ci="13" mb="0" cb="0"/><line nr="1207" mi="0" ci="5" mb="0" cb="2"/><line nr="1208" mi="0" ci="10" mb="0" cb="0"/><line nr="1210" mi="0" ci="6" mb="0" cb="0"/><line nr="1212" mi="0" ci="1" mb="0" cb="0"/><line nr="1213" mi="0" ci="1" mb="0" cb="0"/><line nr="1214" mi="0" ci="3" mb="0" cb="0"/><line nr="1235" mi="0" ci="10" mb="0" cb="2"/><line nr="1236" mi="0" ci="8" mb="0" cb="2"/><line nr="1237" mi="0" ci="4" mb="0" cb="0"/><line nr="1238" mi="0" ci="13" mb="0" cb="0"/><line nr="1239" mi="0" ci="13" mb="0" cb="0"/><line nr="1240" mi="0" ci="5" mb="0" cb="2"/><line nr="1241" mi="0" ci="10" mb="0" cb="0"/><line nr="1243" mi="0" ci="6" mb="0" cb="0"/><line nr="1245" mi="0" ci="1" mb="0" cb="0"/><line nr="1246" mi="0" ci="1" mb="0" cb="0"/><line nr="1247" mi="0" ci="3" mb="0" cb="0"/><line nr="1269" mi="0" ci="10" mb="0" cb="2"/><line nr="1270" mi="0" ci="8" mb="0" cb="2"/><line nr="1271" mi="0" ci="4" mb="0" cb="2"/><line nr="1272" mi="0" ci="5" mb="0" cb="0"/><line nr="1274" mi="0" ci="5" mb="0" cb="0"/><line nr="1294" mi="0" ci="10" mb="0" cb="2"/><line nr="1295" mi="0" ci="8" mb="0" cb="2"/><line nr="1296" mi="0" ci="4" mb="0" cb="0"/><line nr="1297" mi="0" ci="13" mb="0" cb="0"/><line nr="1298" mi="0" ci="13" mb="0" cb="0"/><line nr="1299" mi="0" ci="4" mb="0" cb="2"/><line nr="1300" mi="0" ci="10" mb="0" cb="0"/><line nr="1302" mi="0" ci="6" mb="0" cb="0"/><line nr="1304" mi="0" ci="1" mb="0" cb="0"/><line nr="1305" mi="0" ci="1" mb="0" cb="0"/><line nr="1306" mi="0" ci="3" mb="0" cb="0"/><line nr="1326" mi="0" ci="10" mb="0" cb="2"/><line nr="1327" mi="0" ci="8" mb="0" cb="2"/><line nr="1328" mi="0" ci="4" mb="0" cb="0"/><line nr="1329" mi="0" ci="13" mb="0" cb="0"/><line nr="1330" mi="0" ci="13" mb="0" cb="0"/><line nr="1331" mi="0" ci="5" mb="0" cb="0"/><line nr="1332" mi="0" ci="5" mb="0" cb="2"/><line nr="1333" mi="0" ci="6" mb="0" cb="0"/><line nr="1334" mi="0" ci="6" mb="0" cb="0"/><line nr="1336" mi="0" ci="4" mb="0" cb="2"/><line nr="1337" mi="0" ci="6" mb="0" cb="0"/><line nr="1339" mi="0" ci="1" mb="0" cb="0"/><line nr="1340" mi="0" ci="1" mb="0" cb="0"/><line nr="1341" mi="0" ci="3" mb="0" cb="0"/><line nr="1361" mi="0" ci="10" mb="0" cb="2"/><line nr="1362" mi="0" ci="8" mb="0" cb="2"/><line nr="1363" mi="0" ci="4" mb="0" cb="0"/><line nr="1364" mi="0" ci="13" mb="0" cb="0"/><line nr="1365" mi="0" ci="13" mb="0" cb="0"/><line nr="1366" mi="0" ci="5" mb="0" cb="2"/><line nr="1367" mi="0" ci="5" mb="0" cb="0"/><line nr="1368" mi="0" ci="6" mb="0" cb="0"/><line nr="1369" mi="0" ci="7" mb="0" cb="0"/><line nr="1371" mi="0" ci="4" mb="0" cb="2"/><line nr="1372" mi="0" ci="6" mb="0" cb="0"/><line nr="1374" mi="0" ci="1" mb="0" cb="0"/><line nr="1375" mi="0" ci="1" mb="0" cb="0"/><line nr="1376" mi="0" ci="3" mb="0" cb="0"/><line nr="1405" mi="0" ci="10" mb="0" cb="2"/><line nr="1406" mi="0" ci="8" mb="0" cb="2"/><line nr="1407" mi="0" ci="8" mb="0" cb="2"/><line nr="1408" mi="0" ci="8" mb="0" cb="2"/><line nr="1409" mi="0" ci="5" mb="0" cb="0"/><line nr="1410" mi="0" ci="7" mb="0" cb="2"/><line nr="1411" mi="0" ci="8" mb="0" cb="0"/><line nr="1413" mi="0" ci="2" mb="0" cb="0"/><line nr="1438" mi="0" ci="10" mb="0" cb="2"/><line nr="1439" mi="0" ci="8" mb="0" cb="2"/><line nr="1440" mi="0" ci="8" mb="0" cb="2"/><line nr="1441" mi="0" ci="5" mb="0" cb="0"/><line nr="1442" mi="0" ci="7" mb="0" cb="2"/><line nr="1443" mi="0" ci="7" mb="0" cb="0"/><line nr="1445" mi="0" ci="2" mb="0" cb="0"/><line nr="1470" mi="0" ci="10" mb="0" cb="2"/><line nr="1471" mi="0" ci="8" mb="0" cb="2"/><line nr="1472" mi="0" ci="8" mb="0" cb="2"/><line nr="1473" mi="0" ci="5" mb="0" cb="0"/><line nr="1474" mi="0" ci="7" mb="0" cb="2"/><line nr="1475" mi="0" ci="7" mb="0" cb="0"/><line nr="1477" mi="0" ci="2" mb="0" cb="0"/><line nr="1501" mi="0" ci="10" mb="0" cb="2"/><line nr="1502" mi="0" ci="8" mb="0" cb="2"/><line nr="1503" mi="0" ci="8" mb="0" cb="2"/><line nr="1504" mi="0" ci="5" mb="0" cb="0"/><line nr="1505" mi="0" ci="7" mb="0" cb="2"/><line nr="1506" mi="0" ci="7" mb="0" cb="0"/><line nr="1508" mi="0" ci="2" mb="0" cb="0"/><line nr="1532" mi="0" ci="10" mb="0" cb="2"/><line nr="1533" mi="0" ci="8" mb="0" cb="2"/><line nr="1534" mi="0" ci="8" mb="0" cb="2"/><line nr="1535" mi="0" ci="5" mb="0" cb="0"/><line nr="1536" mi="0" ci="7" mb="0" cb="2"/><line nr="1537" mi="0" ci="7" mb="0" cb="0"/><line nr="1539" mi="0" ci="2" mb="0" cb="0"/><line nr="1563" mi="0" ci="10" mb="0" cb="2"/><line nr="1564" mi="0" ci="8" mb="0" cb="2"/><line nr="1565" mi="0" ci="8" mb="0" cb="2"/><line nr="1566" mi="0" ci="5" mb="0" cb="0"/><line nr="1567" mi="0" ci="7" mb="0" cb="2"/><line nr="1568" mi="0" ci="7" mb="0" cb="0"/><line nr="1570" mi="0" ci="2" mb="0" cb="0"/><line nr="1595" mi="0" ci="10" mb="0" cb="2"/><line nr="1596" mi="0" ci="8" mb="0" cb="2"/><line nr="1597" mi="0" ci="8" mb="0" cb="2"/><line nr="1598" mi="0" ci="5" mb="0" cb="0"/><line nr="1599" mi="0" ci="7" mb="0" cb="2"/><line nr="1600" mi="0" ci="7" mb="0" cb="0"/><line nr="1602" mi="0" ci="2" mb="0" cb="0"/><line nr="1626" mi="0" ci="10" mb="0" cb="2"/><line nr="1627" mi="0" ci="9" mb="0" cb="2"/><line nr="1628" mi="0" ci="8" mb="0" cb="2"/><line nr="1629" mi="0" ci="3" mb="0" cb="0"/><line nr="1630" mi="0" ci="7" mb="0" cb="2"/><line nr="1631" mi="0" ci="7" mb="0" cb="0"/><line nr="1633" mi="0" ci="3" mb="0" cb="0"/><line nr="1664" mi="0" ci="10" mb="0" cb="2"/><line nr="1665" mi="0" ci="9" mb="0" cb="2"/><line nr="1666" mi="0" ci="8" mb="0" cb="2"/><line nr="1667" mi="0" ci="8" mb="0" cb="2"/><line nr="1668" mi="0" ci="5" mb="0" cb="0"/><line nr="1669" mi="0" ci="7" mb="0" cb="2"/><line nr="1670" mi="0" ci="8" mb="0" cb="0"/><line nr="1672" mi="0" ci="2" mb="0" cb="0"/><line nr="1700" mi="0" ci="10" mb="0" cb="2"/><line nr="1701" mi="0" ci="9" mb="0" cb="2"/><line nr="1702" mi="0" ci="8" mb="0" cb="2"/><line nr="1703" mi="0" ci="8" mb="0" cb="2"/><line nr="1704" mi="0" ci="4" mb="0" cb="0"/><line nr="1705" mi="0" ci="14" mb="0" cb="0"/><line nr="1706" mi="0" ci="14" mb="0" cb="0"/><line nr="1707" mi="0" ci="9" mb="0" cb="0"/><line nr="1708" mi="0" ci="1" mb="0" cb="0"/><line nr="1709" mi="0" ci="1" mb="0" cb="0"/><line nr="1710" mi="0" ci="3" mb="0" cb="0"/><line nr="1735" mi="0" ci="10" mb="0" cb="2"/><line nr="1736" mi="0" ci="8" mb="0" cb="2"/><line nr="1737" mi="0" ci="4" mb="0" cb="0"/><line nr="1738" mi="0" ci="14" mb="0" cb="0"/><line nr="1739" mi="0" ci="14" mb="0" cb="0"/><line nr="1740" mi="0" ci="5" mb="0" cb="2"/><line nr="1741" mi="0" ci="10" mb="0" cb="0"/><line nr="1743" mi="0" ci="6" mb="0" cb="0"/><line nr="1745" mi="0" ci="1" mb="0" cb="0"/><line nr="1746" mi="0" ci="1" mb="0" cb="0"/><line nr="1747" mi="0" ci="3" mb="0" cb="0"/><line nr="1772" mi="0" ci="10" mb="0" cb="2"/><line nr="1773" mi="0" ci="8" mb="0" cb="2"/><line nr="1774" mi="0" ci="4" mb="0" cb="0"/><line nr="1775" mi="0" ci="14" mb="0" cb="0"/><line nr="1776" mi="0" ci="14" mb="0" cb="0"/><line nr="1777" mi="0" ci="5" mb="0" cb="2"/><line nr="1778" mi="0" ci="10" mb="0" cb="0"/><line nr="1780" mi="0" ci="6" mb="0" cb="0"/><line nr="1782" mi="0" ci="1" mb="0" cb="0"/><line nr="1783" mi="0" ci="1" mb="0" cb="0"/><line nr="1784" mi="0" ci="3" mb="0" cb="0"/><line nr="1810" mi="0" ci="10" mb="0" cb="2"/><line nr="1811" mi="0" ci="8" mb="0" cb="2"/><line nr="1812" mi="0" ci="4" mb="0" cb="2"/><line nr="1813" mi="0" ci="6" mb="0" cb="0"/><line nr="1815" mi="0" ci="6" mb="0" cb="0"/><line nr="1839" mi="0" ci="10" mb="0" cb="2"/><line nr="1840" mi="0" ci="8" mb="0" cb="2"/><line nr="1841" mi="0" ci="4" mb="0" cb="0"/><line nr="1842" mi="0" ci="14" mb="0" cb="0"/><line nr="1843" mi="0" ci="14" mb="0" cb="0"/><line nr="1844" mi="0" ci="4" mb="0" cb="2"/><line nr="1845" mi="0" ci="10" mb="0" cb="0"/><line nr="1847" mi="0" ci="6" mb="0" cb="0"/><line nr="1849" mi="0" ci="1" mb="0" cb="0"/><line nr="1850" mi="0" ci="1" mb="0" cb="0"/><line nr="1851" mi="0" ci="3" mb="0" cb="0"/><line nr="1875" mi="0" ci="10" mb="0" cb="2"/><line nr="1876" mi="0" ci="8" mb="0" cb="2"/><line nr="1877" mi="0" ci="4" mb="0" cb="0"/><line nr="1878" mi="0" ci="14" mb="0" cb="0"/><line nr="1879" mi="0" ci="14" mb="0" cb="0"/><line nr="1880" mi="0" ci="5" mb="0" cb="0"/><line nr="1881" mi="0" ci="5" mb="0" cb="2"/><line nr="1882" mi="0" ci="6" mb="0" cb="0"/><line nr="1883" mi="0" ci="6" mb="0" cb="0"/><line nr="1885" mi="0" ci="4" mb="0" cb="2"/><line nr="1886" mi="0" ci="6" mb="0" cb="0"/><line nr="1888" mi="0" ci="1" mb="0" cb="0"/><line nr="1889" mi="0" ci="1" mb="0" cb="0"/><line nr="1890" mi="0" ci="3" mb="0" cb="0"/><line nr="1914" mi="0" ci="10" mb="0" cb="2"/><line nr="1915" mi="0" ci="8" mb="0" cb="2"/><line nr="1916" mi="0" ci="4" mb="0" cb="0"/><line nr="1917" mi="0" ci="14" mb="0" cb="0"/><line nr="1918" mi="0" ci="14" mb="0" cb="0"/><line nr="1919" mi="0" ci="5" mb="0" cb="2"/><line nr="1920" mi="0" ci="5" mb="0" cb="0"/><line nr="1921" mi="0" ci="6" mb="0" cb="0"/><line nr="1922" mi="0" ci="7" mb="0" cb="0"/><line nr="1924" mi="0" ci="4" mb="0" cb="2"/><line nr="1925" mi="0" ci="6" mb="0" cb="0"/><line nr="1927" mi="0" ci="1" mb="0" cb="0"/><line nr="1929" mi="0" ci="1" mb="0" cb="0"/><line nr="1930" mi="0" ci="3" mb="0" cb="0"/><line nr="1963" mi="0" ci="10" mb="0" cb="2"/><line nr="1964" mi="0" ci="9" mb="0" cb="2"/><line nr="1965" mi="0" ci="8" mb="0" cb="2"/><line nr="1966" mi="0" ci="8" mb="0" cb="2"/><line nr="1967" mi="0" ci="8" mb="0" cb="2"/><line nr="1968" mi="0" ci="5" mb="0" cb="0"/><line nr="1969" mi="0" ci="7" mb="0" cb="2"/><line nr="1970" mi="0" ci="9" mb="0" cb="0"/><line nr="1972" mi="0" ci="2" mb="0" cb="0"/><line nr="2002" mi="0" ci="10" mb="0" cb="2"/><line nr="2003" mi="0" ci="9" mb="0" cb="2"/><line nr="2004" mi="0" ci="8" mb="0" cb="2"/><line nr="2005" mi="0" ci="8" mb="0" cb="2"/><line nr="2006" mi="0" ci="5" mb="0" cb="0"/><line nr="2007" mi="0" ci="7" mb="0" cb="2"/><line nr="2008" mi="0" ci="8" mb="0" cb="0"/><line nr="2010" mi="0" ci="2" mb="0" cb="0"/><line nr="2040" mi="0" ci="10" mb="0" cb="2"/><line nr="2041" mi="0" ci="9" mb="0" cb="2"/><line nr="2042" mi="0" ci="8" mb="0" cb="2"/><line nr="2043" mi="0" ci="8" mb="0" cb="2"/><line nr="2044" mi="0" ci="5" mb="0" cb="0"/><line nr="2045" mi="0" ci="7" mb="0" cb="2"/><line nr="2046" mi="0" ci="8" mb="0" cb="0"/><line nr="2048" mi="0" ci="2" mb="0" cb="0"/><line nr="2077" mi="0" ci="10" mb="0" cb="2"/><line nr="2078" mi="0" ci="9" mb="0" cb="2"/><line nr="2079" mi="0" ci="8" mb="0" cb="2"/><line nr="2080" mi="0" ci="8" mb="0" cb="2"/><line nr="2081" mi="0" ci="5" mb="0" cb="0"/><line nr="2082" mi="0" ci="7" mb="0" cb="2"/><line nr="2083" mi="0" ci="8" mb="0" cb="0"/><line nr="2085" mi="0" ci="2" mb="0" cb="0"/><line nr="2114" mi="0" ci="10" mb="0" cb="2"/><line nr="2115" mi="0" ci="9" mb="0" cb="2"/><line nr="2116" mi="0" ci="8" mb="0" cb="2"/><line nr="2117" mi="0" ci="8" mb="0" cb="2"/><line nr="2118" mi="0" ci="5" mb="0" cb="0"/><line nr="2119" mi="0" ci="7" mb="0" cb="2"/><line nr="2120" mi="0" ci="8" mb="0" cb="0"/><line nr="2122" mi="0" ci="2" mb="0" cb="0"/><line nr="2151" mi="0" ci="10" mb="0" cb="2"/><line nr="2152" mi="0" ci="9" mb="0" cb="2"/><line nr="2153" mi="0" ci="8" mb="0" cb="2"/><line nr="2154" mi="0" ci="8" mb="0" cb="2"/><line nr="2155" mi="0" ci="5" mb="0" cb="0"/><line nr="2156" mi="0" ci="7" mb="0" cb="2"/><line nr="2157" mi="0" ci="8" mb="0" cb="0"/><line nr="2159" mi="0" ci="2" mb="0" cb="0"/><line nr="2189" mi="0" ci="10" mb="0" cb="2"/><line nr="2190" mi="0" ci="9" mb="0" cb="2"/><line nr="2191" mi="0" ci="8" mb="0" cb="2"/><line nr="2192" mi="0" ci="8" mb="0" cb="2"/><line nr="2193" mi="0" ci="5" mb="0" cb="0"/><line nr="2194" mi="0" ci="7" mb="0" cb="2"/><line nr="2195" mi="0" ci="8" mb="0" cb="0"/><line nr="2197" mi="0" ci="2" mb="0" cb="0"/><line nr="2202" mi="0" ci="8" mb="0" cb="0"/><line nr="2207" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="61" covered="3355"/><counter type="BRANCH" missed="16" covered="464"/><counter type="LINE" missed="10" covered="508"/><counter type="COMPLEXITY" missed="13" covered="328"/><counter type="METHOD" missed="1" covered="100"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SquareRootCalculator.java"><line nr="46" mi="0" ci="3" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="0" ci="3" mb="0" cb="0"/><line nr="83" mi="0" ci="3" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><line nr="85" mi="0" ci="1" mb="0" cb="0"/><line nr="99" mi="0" ci="2" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="14" mb="0" cb="4"/><line nr="103" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="3" mb="0" cb="0"/><line nr="105" mi="0" ci="3" mb="0" cb="0"/><line nr="106" mi="0" ci="1" mb="0" cb="0"/><line nr="122" mi="0" ci="2" mb="0" cb="0"/><line nr="123" mi="0" ci="8" mb="0" cb="2"/><line nr="124" mi="0" ci="3" mb="0" cb="0"/><line nr="125" mi="0" ci="3" mb="0" cb="0"/><line nr="126" mi="0" ci="3" mb="0" cb="0"/><line nr="127" mi="0" ci="1" mb="0" cb="0"/><line nr="149" mi="0" ci="2" mb="0" cb="0"/><line nr="150" mi="0" ci="4" mb="0" cb="0"/><line nr="151" mi="0" ci="14" mb="0" cb="4"/><line nr="153" mi="0" ci="8" mb="0" cb="2"/><line nr="154" mi="0" ci="3" mb="0" cb="0"/><line nr="155" mi="0" ci="3" mb="0" cb="0"/><line nr="156" mi="0" ci="3" mb="0" cb="0"/><line nr="157" mi="0" ci="1" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="11" mb="0" cb="2"/><line nr="176" mi="0" ci="7" mb="0" cb="0"/><line nr="194" mi="0" ci="4" mb="0" cb="0"/><line nr="195" mi="1" ci="10" mb="1" cb="1"/><line nr="196" mi="0" ci="9" mb="0" cb="0"/><line nr="218" mi="0" ci="4" mb="0" cb="0"/><line nr="219" mi="1" ci="10" mb="1" cb="1"/><line nr="220" mi="0" ci="6" mb="0" cb="0"/><line nr="221" mi="0" ci="4" mb="0" cb="0"/><line nr="239" mi="0" ci="4" mb="0" cb="0"/><line nr="240" mi="1" ci="10" mb="1" cb="1"/><line nr="241" mi="0" ci="2" mb="0" cb="0"/><line nr="242" mi="0" ci="12" mb="0" cb="2"/><line nr="243" mi="0" ci="4" mb="0" cb="0"/><line nr="245" mi="0" ci="4" mb="0" cb="0"/><line nr="249" mi="0" ci="7" mb="0" cb="0"/><line nr="250" mi="0" ci="1" mb="0" cb="0"/><line nr="251" mi="0" ci="4" mb="0" cb="0"/><line nr="252" mi="0" ci="5" mb="0" cb="0"/><line nr="253" mi="0" ci="5" mb="0" cb="0"/><line nr="254" mi="0" ci="2" mb="0" cb="0"/><line nr="255" mi="0" ci="9" mb="0" cb="2"/><line nr="256" mi="0" ci="8" mb="0" cb="0"/><line nr="257" mi="0" ci="2" mb="0" cb="0"/><line nr="258" mi="0" ci="5" mb="0" cb="0"/><line nr="259" mi="0" ci="5" mb="0" cb="0"/><line nr="261" mi="0" ci="5" mb="0" cb="0"/><line nr="262" mi="0" ci="7" mb="0" cb="0"/><line nr="263" mi="0" ci="2" mb="0" cb="0"/><line nr="267" mi="0" ci="3" mb="0" cb="0"/><line nr="268" mi="0" ci="5" mb="0" cb="0"/><line nr="269" mi="0" ci="5" mb="0" cb="0"/><line nr="270" mi="0" ci="4" mb="1" cb="1"/><line nr="271" mi="1" ci="13" mb="0" cb="0"/><line nr="272" mi="0" ci="5" mb="0" cb="0"/><line nr="273" mi="0" ci="2" mb="0" cb="0"/><line nr="277" mi="0" ci="4" mb="0" cb="0"/><line nr="278" mi="0" ci="7" mb="0" cb="0"/><line nr="279" mi="0" ci="6" mb="0" cb="2"/><line nr="280" mi="0" ci="10" mb="0" cb="0"/><line nr="282" mi="0" ci="10" mb="0" cb="0"/><line nr="287" mi="0" ci="5" mb="0" cb="0"/><line nr="288" mi="0" ci="2" mb="0" cb="0"/><line nr="289" mi="0" ci="2" mb="0" cb="0"/><line nr="290" mi="0" ci="5" mb="0" cb="0"/><line nr="291" mi="0" ci="5" mb="0" cb="0"/><line nr="292" mi="0" ci="6" mb="0" cb="2"/><line nr="293" mi="0" ci="3" mb="0" cb="0"/><line nr="294" mi="0" ci="7" mb="0" cb="0"/><line nr="295" mi="0" ci="4" mb="0" cb="0"/><line nr="296" mi="0" ci="5" mb="0" cb="0"/><line nr="297" mi="0" ci="6" mb="0" cb="0"/><line nr="299" mi="0" ci="6" mb="0" cb="0"/><line nr="304" mi="0" ci="14" mb="0" cb="0"/><line nr="305" mi="0" ci="2" mb="0" cb="0"/><line nr="309" mi="0" ci="3" mb="0" cb="0"/><line nr="313" mi="0" ci="3" mb="0" cb="0"/><line nr="317" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="436"/><counter type="BRANCH" missed="4" covered="26"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="4" covered="28"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="65" covered="3791"/><counter type="BRANCH" missed="20" covered="490"/><counter type="LINE" missed="10" covered="596"/><counter type="COMPLEXITY" missed="17" covered="356"/><counter type="METHOD" missed="1" covered="117"/><counter type="CLASS" missed="0" covered="2"/></package><counter type="INSTRUCTION" missed="421" covered="9796"/><counter type="BRANCH" missed="69" covered="937"/><counter type="LINE" missed="70" covered="1546"/><counter type="COMPLEXITY" missed="67" covered="845"/><counter type="METHOD" missed="21" covered="388"/><counter type="CLASS" missed="0" covered="20"/></report>