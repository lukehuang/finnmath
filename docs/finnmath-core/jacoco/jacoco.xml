<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="finnMath Core"><sessioninfo id="devbox-5cffcf10" start="1520190694583" dump="1520190706234"/><package name="com/github/ltennstedt/finnmath/core/util"><class name="com/github/ltennstedt/finnmath/core/util/SquareRootCalculator"><method name="&lt;init&gt;" desc="()V" line="92"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;)V" line="109"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(ILjava/math/RoundingMode;)V" line="131"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)V" line="157"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;)Ljava/math/BigDecimal;" line="181"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="200"><counter type="INSTRUCTION" missed="1" covered="23"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrtOfPerfectSquare" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="223"><counter type="INSTRUCTION" missed="1" covered="24"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="perfectSquare" desc="(Ljava/math/BigInteger;)Z" line="243"><counter type="INSTRUCTION" missed="1" covered="36"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="heronsMethod" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="253"><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="calculateSuccessor" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="271"><counter type="INSTRUCTION" missed="1" covered="37"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="seedValue" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="281"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scientificNotationForSqrt" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/number/ScientificNotation;" line="290"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="307"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getPrecision" desc="()Ljava/math/BigDecimal;" line="312"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getScale" desc="()I" line="316"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRoundingMode" desc="()Ljava/math/RoundingMode;" line="320"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="48"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="436"/><counter type="BRANCH" missed="4" covered="26"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="4" covered="28"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/util/MathRandom"><method name="&lt;init&gt;" desc="()V" line="70"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(J)V" line="81"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigInteger" desc="(J)Ljava/math/BigInteger;" line="97"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigInteger" desc="(J)Ljava/math/BigInteger;" line="114"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigInteger" desc="(J)Ljava/math/BigInteger;" line="132"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigIntegers" desc="(JI)Ljava/util/List;" line="153"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigIntegers" desc="(JI)Ljava/util/List;" line="177"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegers" desc="(JI)Ljava/util/List;" line="201"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="224"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="246"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="268"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="290"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="313"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="335"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keepBigDecimalInBound" desc="(Ljava/math/BigDecimal;J)Ljava/math/BigDecimal;" line="343"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigDecimals" desc="(JII)Ljava/util/List;" line="378"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigDecimals" desc="(JII)Ljava/util/List;" line="407"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimals" desc="(JII)Ljava/util/List;" line="436"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveBigDecimals" desc="(JII)Ljava/util/List;" line="465"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeBigDecimals" desc="(JII)Ljava/util/List;" line="494"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleBigDecimals" desc="(JII)Ljava/util/List;" line="523"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="545"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="565"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="583"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="599"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="617"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="633"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFractions" desc="(JI)Ljava/util/List;" line="654"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFractions" desc="(JI)Ljava/util/List;" line="678"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFractions" desc="(JI)Ljava/util/List;" line="702"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFractions" desc="(JI)Ljava/util/List;" line="726"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFractions" desc="(JI)Ljava/util/List;" line="750"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFractions" desc="(JI)Ljava/util/List;" line="774"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="795"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="811"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="836"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="861"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="883"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="904"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumbers" desc="(JII)Ljava/util/List;" line="935"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumbers" desc="(JII)Ljava/util/List;" line="966"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPolarForm" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="990"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPolarForms" desc="(JII)Ljava/util/List;" line="1017"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerVector" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="1041"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerVectors" desc="(JII)Ljava/util/List;" line="1069"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1097"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1124"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1155"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1187"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1209"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1239"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1271"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerMatrices" desc="(JIII)Ljava/util/List;" line="1316"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1349"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1381"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1413"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1444"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1475"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1507"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalVector" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="1535"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalVectors" desc="(JIII)Ljava/util/List;" line="1573"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalMatrix" desc="(JIII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1607"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1639"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1674"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1710"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1736"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1770"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1806"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalMatrices" desc="(JIIII)Ljava/util/List;" line="1855"><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1893"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1930"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1967"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2004"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2041"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2078"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberVector" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="2103"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberVectors" desc="(JII)Ljava/util/List;" line="2133"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2162"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2189"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2220"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2253"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2276"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2307"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2340"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="2385"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2419"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2452"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2485"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2517"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2549"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2581"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberVector" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="2609"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberVectors" desc="(JIII)Ljava/util/List;" line="2643"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberMatrix" desc="(JIII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2677"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2711"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2749"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2788"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2817"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2854"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2893"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberMatrices" desc="(JIIII)Ljava/util/List;" line="2943"><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="2982"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3020"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3058"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3096"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3133"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3171"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="3183"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRandom" desc="()Ljava/util/Random;" line="3188"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricRealComplexNumberMatrices$103" desc="(Ljava/util/List;JIII)V" line="3177"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricRealComplexNumberMatrices$102" desc="(Ljava/util/List;JIII)V" line="3139"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalRealComplexNumberMatrices$101" desc="(Ljava/util/List;JIII)V" line="3101"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextTriangularRealComplexNumberMatrices$100" desc="(Ljava/util/List;JIII)V" line="3064"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularRealComplexNumberMatrices$99" desc="(Ljava/util/List;JIII)V" line="3026"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularRealComplexNumberMatrices$98" desc="(Ljava/util/List;JIII)V" line="2988"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberMatrices$97" desc="(Ljava/util/List;JIIII)V" line="2950"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricRealComplexNumberMatrix$96" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2898"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricRealComplexNumberMatrix$95" desc="(Ljava/lang/Integer;JILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2899"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricRealComplexNumberMatrix$94" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2859"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricRealComplexNumberMatrix$93" desc="(JILjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2860"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalRealComplexNumberMatrix$92" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2822"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalRealComplexNumberMatrix$91" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2823"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularRealComplexNumberMatrix$90" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2754"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularRealComplexNumberMatrix$89" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2755"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularRealComplexNumberMatrix$88" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2716"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularRealComplexNumberMatrix$87" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2717"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberMatrix$86" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2683"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberMatrix$85" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="2684"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberVectors$84" desc="(Ljava/util/List;JIII)V" line="2648"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberVector$83" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;JII)V" line="2613"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricSimpleComplexNumberMatrices$82" desc="(Ljava/util/List;JII)V" line="2585"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricSimpleComplexNumberMatrices$81" desc="(Ljava/util/List;JII)V" line="2553"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalSimpleComplexNumberMatrices$80" desc="(Ljava/util/List;JII)V" line="2521"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextTriangularSimpleComplexNumberMatrices$79" desc="(Ljava/util/List;JII)V" line="2489"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularSimpleComplexNumberMatrices$78" desc="(Ljava/util/List;JII)V" line="2457"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularSimpleComplexNumberMatrices$77" desc="(Ljava/util/List;JII)V" line="2424"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberMatrices$76" desc="(Ljava/util/List;JIII)V" line="2391"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricSimpleComplexNumberMatrix$75" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2344"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricSimpleComplexNumberMatrix$74" desc="(Ljava/lang/Integer;JLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2345"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricSimpleComplexNumberMatrix$73" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2311"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricSimpleComplexNumberMatrix$72" desc="(JLjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2312"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalSimpleComplexNumberMatrix$71" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2280"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalSimpleComplexNumberMatrix$70" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2281"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularSimpleComplexNumberMatrix$69" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2224"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularSimpleComplexNumberMatrix$68" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2225"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularSimpleComplexNumberMatrix$67" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2193"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularSimpleComplexNumberMatrix$66" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2194"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberMatrix$65" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2167"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberMatrix$64" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="2168"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberVectors$63" desc="(Ljava/util/List;JII)V" line="2137"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberVector$62" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;JI)V" line="2107"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigDecimalMatrices$61" desc="(Ljava/util/List;JIII)V" line="2083"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigDecimalMatrices$60" desc="(Ljava/util/List;JIII)V" line="2046"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigDecimalMatrices$59" desc="(Ljava/util/List;JIII)V" line="2009"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextTriangularBigDecimalMatrices$58" desc="(Ljava/util/List;JIII)V" line="1972"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigDecimalMatrices$57" desc="(Ljava/util/List;JIII)V" line="1935"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigDecimalMatrices$56" desc="(Ljava/util/List;JIII)V" line="1898"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalMatrices$55" desc="(Ljava/util/List;JIIII)V" line="1861"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigDecimalMatrix$54" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1810"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigDecimalMatrix$53" desc="(Ljava/lang/Integer;JILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1811"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigDecimalMatrix$52" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1774"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigDecimalMatrix$51" desc="(JILjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1775"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigDecimalMatrix$50" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1740"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigDecimalMatrix$49" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1741"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigDecimalMatrix$48" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1678"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigDecimalMatrix$47" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1679"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigDecimalMatrix$46" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1643"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigDecimalMatrix$45" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1644"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalMatrix$44" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1613"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalMatrix$43" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="1614"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalVectors$42" desc="(Ljava/util/List;JIII)V" line="1578"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalVector$41" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;JII)V" line="1539"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntegerMatrices$40" desc="(Ljava/util/List;JII)V" line="1511"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntegerMatrices$39" desc="(Ljava/util/List;JII)V" line="1479"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntegerMatrices$38" desc="(Ljava/util/List;JII)V" line="1448"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextTriangularBigIntegerMatrices$37" desc="(Ljava/util/List;JII)V" line="1417"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntegerMatrices$36" desc="(Ljava/util/List;JII)V" line="1385"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntegerMatrices$35" desc="(Ljava/util/List;JII)V" line="1353"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerMatrices$34" desc="(Ljava/util/List;JIII)V" line="1321"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntegerMatrix$33" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1275"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntegerMatrix$32" desc="(Ljava/lang/Integer;JLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1276"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntegerMatrix$31" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1243"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntegerMatrix$30" desc="(JLjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1244"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntegerMatrix$29" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1213"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntegerMatrix$28" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1214"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntegerMatrix$27" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1159"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntegerMatrix$26" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1160"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntegerMatrix$25" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1128"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntegerMatrix$24" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1129"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerMatrix$23" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1102"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerMatrix$22" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="1103"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerVectors$21" desc="(Ljava/util/List;JII)V" line="1073"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerVector$20" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;JI)V" line="1044"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextPolarForms$19" desc="(Ljava/util/List;JII)V" line="1021"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleRealComplexNumbers$18" desc="(Ljava/util/List;JII)V" line="970"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumbers$17" desc="(Ljava/util/List;JII)V" line="939"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleSimpleComplexNumbers$16" desc="(Ljava/util/List;JI)V" line="864"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumbers$15" desc="(Ljava/util/List;JI)V" line="839"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleFractions$14" desc="(Ljava/util/List;JI)V" line="777"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleNegativeFractions$13" desc="(Ljava/util/List;JI)V" line="753"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertiblePositiveFractions$12" desc="(Ljava/util/List;JI)V" line="729"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextFractions$11" desc="(Ljava/util/List;JI)V" line="705"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextNegativeFractions$10" desc="(Ljava/util/List;JI)V" line="681"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextPositiveFractions$9" desc="(Ljava/util/List;JI)V" line="657"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleBigDecimals$8" desc="(Ljava/util/List;JII)V" line="527"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleNegativeBigDecimals$7" desc="(Ljava/util/List;JII)V" line="498"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertiblePositiveBigDecimals$6" desc="(Ljava/util/List;JII)V" line="469"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimals$5" desc="(Ljava/util/List;JII)V" line="440"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextNegativeBigDecimals$4" desc="(Ljava/util/List;JII)V" line="411"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextPositiveBigDecimals$3" desc="(Ljava/util/List;JII)V" line="382"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegers$2" desc="(Ljava/util/List;JI)V" line="204"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextNegativeBigIntegers$1" desc="(Ljava/util/List;JI)V" line="180"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextPositiveBigIntegers$0" desc="(Ljava/util/List;JI)V" line="156"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="10" covered="5549"/><counter type="BRANCH" missed="6" covered="628"/><counter type="LINE" missed="0" covered="716"/><counter type="COMPLEXITY" missed="6" covered="524"/><counter type="METHOD" missed="0" covered="213"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="MathRandom.java"><line nr="70" mi="0" ci="2" mb="0" cb="0"/><line nr="71" mi="0" ci="5" mb="0" cb="0"/><line nr="72" mi="0" ci="1" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="0" ci="6" mb="0" cb="0"/><line nr="83" mi="0" ci="1" mb="0" cb="0"/><line nr="97" mi="0" ci="10" mb="0" cb="2"/><line nr="98" mi="0" ci="5" mb="0" cb="0"/><line nr="114" mi="0" ci="10" mb="0" cb="2"/><line nr="115" mi="0" ci="5" mb="0" cb="0"/><line nr="132" mi="0" ci="10" mb="0" cb="2"/><line nr="133" mi="0" ci="12" mb="0" cb="2"/><line nr="153" mi="1" ci="9" mb="1" cb="1"/><line nr="154" mi="0" ci="8" mb="0" cb="2"/><line nr="155" mi="0" ci="5" mb="0" cb="0"/><line nr="156" mi="0" ci="15" mb="0" cb="0"/><line nr="157" mi="0" ci="2" mb="0" cb="0"/><line nr="177" mi="1" ci="9" mb="1" cb="1"/><line nr="178" mi="0" ci="8" mb="0" cb="2"/><line nr="179" mi="0" ci="5" mb="0" cb="0"/><line nr="180" mi="0" ci="15" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="0"/><line nr="201" mi="1" ci="9" mb="1" cb="1"/><line nr="202" mi="0" ci="8" mb="0" cb="2"/><line nr="203" mi="0" ci="5" mb="0" cb="0"/><line nr="204" mi="0" ci="15" mb="0" cb="0"/><line nr="205" mi="0" ci="2" mb="0" cb="0"/><line nr="224" mi="0" ci="10" mb="0" cb="2"/><line nr="225" mi="0" ci="9" mb="0" cb="2"/><line nr="226" mi="0" ci="5" mb="0" cb="0"/><line nr="227" mi="3" ci="6" mb="1" cb="1"/><line nr="246" mi="0" ci="10" mb="0" cb="2"/><line nr="247" mi="0" ci="9" mb="0" cb="2"/><line nr="248" mi="0" ci="5" mb="0" cb="0"/><line nr="249" mi="0" ci="9" mb="0" cb="2"/><line nr="268" mi="0" ci="10" mb="0" cb="2"/><line nr="269" mi="0" ci="9" mb="0" cb="2"/><line nr="270" mi="0" ci="5" mb="0" cb="0"/><line nr="271" mi="0" ci="8" mb="0" cb="0"/><line nr="290" mi="0" ci="10" mb="0" cb="2"/><line nr="291" mi="0" ci="9" mb="0" cb="2"/><line nr="292" mi="0" ci="5" mb="0" cb="0"/><line nr="293" mi="3" ci="6" mb="1" cb="1"/><line nr="313" mi="0" ci="10" mb="0" cb="2"/><line nr="314" mi="0" ci="9" mb="0" cb="2"/><line nr="315" mi="0" ci="5" mb="0" cb="0"/><line nr="316" mi="1" ci="8" mb="1" cb="1"/><line nr="335" mi="0" ci="10" mb="0" cb="2"/><line nr="336" mi="0" ci="9" mb="0" cb="2"/><line nr="337" mi="0" ci="5" mb="0" cb="0"/><line nr="338" mi="0" ci="8" mb="0" cb="0"/><line nr="343" mi="0" ci="2" mb="0" cb="0"/><line nr="344" mi="0" ci="3" mb="0" cb="0"/><line nr="345" mi="0" ci="5" mb="0" cb="2"/><line nr="346" mi="0" ci="5" mb="0" cb="2"/><line nr="347" mi="0" ci="5" mb="0" cb="0"/><line nr="350" mi="0" ci="6" mb="0" cb="2"/><line nr="351" mi="0" ci="5" mb="0" cb="0"/><line nr="354" mi="0" ci="2" mb="0" cb="0"/><line nr="378" mi="0" ci="10" mb="0" cb="2"/><line nr="379" mi="0" ci="9" mb="0" cb="2"/><line nr="380" mi="0" ci="8" mb="0" cb="2"/><line nr="381" mi="0" ci="5" mb="0" cb="0"/><line nr="382" mi="0" ci="17" mb="0" cb="0"/><line nr="383" mi="0" ci="2" mb="0" cb="0"/><line nr="407" mi="0" ci="10" mb="0" cb="2"/><line nr="408" mi="0" ci="9" mb="0" cb="2"/><line nr="409" mi="0" ci="8" mb="0" cb="2"/><line nr="410" mi="0" ci="5" mb="0" cb="0"/><line nr="411" mi="0" ci="17" mb="0" cb="0"/><line nr="412" mi="0" ci="2" mb="0" cb="0"/><line nr="436" mi="0" ci="10" mb="0" cb="2"/><line nr="437" mi="0" ci="9" mb="0" cb="2"/><line nr="438" mi="0" ci="8" mb="0" cb="2"/><line nr="439" mi="0" ci="5" mb="0" cb="0"/><line nr="440" mi="0" ci="17" mb="0" cb="0"/><line nr="441" mi="0" ci="2" mb="0" cb="0"/><line nr="465" mi="0" ci="10" mb="0" cb="2"/><line nr="466" mi="0" ci="9" mb="0" cb="2"/><line nr="467" mi="0" ci="8" mb="0" cb="2"/><line nr="468" mi="0" ci="5" mb="0" cb="0"/><line nr="469" mi="0" ci="17" mb="0" cb="0"/><line nr="470" mi="0" ci="2" mb="0" cb="0"/><line nr="494" mi="0" ci="10" mb="0" cb="2"/><line nr="495" mi="0" ci="9" mb="0" cb="2"/><line nr="496" mi="0" ci="8" mb="0" cb="2"/><line nr="497" mi="0" ci="5" mb="0" cb="0"/><line nr="498" mi="0" ci="17" mb="0" cb="0"/><line nr="499" mi="0" ci="2" mb="0" cb="0"/><line nr="523" mi="0" ci="10" mb="0" cb="2"/><line nr="524" mi="0" ci="9" mb="0" cb="2"/><line nr="525" mi="0" ci="8" mb="0" cb="2"/><line nr="526" mi="0" ci="5" mb="0" cb="0"/><line nr="527" mi="0" ci="17" mb="0" cb="0"/><line nr="528" mi="0" ci="2" mb="0" cb="0"/><line nr="545" mi="0" ci="10" mb="0" cb="2"/><line nr="546" mi="0" ci="5" mb="0" cb="0"/><line nr="547" mi="0" ci="5" mb="0" cb="0"/><line nr="548" mi="0" ci="4" mb="0" cb="0"/><line nr="565" mi="0" ci="10" mb="0" cb="2"/><line nr="566" mi="0" ci="5" mb="0" cb="0"/><line nr="583" mi="0" ci="10" mb="0" cb="2"/><line nr="584" mi="0" ci="12" mb="0" cb="2"/><line nr="599" mi="0" ci="10" mb="0" cb="2"/><line nr="600" mi="0" ci="5" mb="0" cb="0"/><line nr="601" mi="0" ci="5" mb="0" cb="0"/><line nr="602" mi="0" ci="4" mb="0" cb="0"/><line nr="617" mi="0" ci="10" mb="0" cb="2"/><line nr="618" mi="0" ci="5" mb="0" cb="0"/><line nr="633" mi="0" ci="10" mb="0" cb="2"/><line nr="634" mi="0" ci="12" mb="0" cb="2"/><line nr="654" mi="0" ci="10" mb="0" cb="2"/><line nr="655" mi="0" ci="8" mb="0" cb="2"/><line nr="656" mi="0" ci="5" mb="0" cb="0"/><line nr="657" mi="0" ci="15" mb="0" cb="0"/><line nr="658" mi="0" ci="2" mb="0" cb="0"/><line nr="678" mi="0" ci="10" mb="0" cb="2"/><line nr="679" mi="0" ci="8" mb="0" cb="2"/><line nr="680" mi="0" ci="5" mb="0" cb="0"/><line nr="681" mi="0" ci="15" mb="0" cb="0"/><line nr="682" mi="0" ci="2" mb="0" cb="0"/><line nr="702" mi="0" ci="10" mb="0" cb="2"/><line nr="703" mi="0" ci="8" mb="0" cb="2"/><line nr="704" mi="0" ci="5" mb="0" cb="0"/><line nr="705" mi="0" ci="15" mb="0" cb="0"/><line nr="706" mi="0" ci="2" mb="0" cb="0"/><line nr="726" mi="0" ci="10" mb="0" cb="2"/><line nr="727" mi="0" ci="8" mb="0" cb="2"/><line nr="728" mi="0" ci="5" mb="0" cb="0"/><line nr="729" mi="0" ci="15" mb="0" cb="0"/><line nr="730" mi="0" ci="2" mb="0" cb="0"/><line nr="750" mi="0" ci="10" mb="0" cb="2"/><line nr="751" mi="0" ci="8" mb="0" cb="2"/><line nr="752" mi="0" ci="5" mb="0" cb="0"/><line nr="753" mi="0" ci="15" mb="0" cb="0"/><line nr="754" mi="0" ci="2" mb="0" cb="0"/><line nr="774" mi="0" ci="10" mb="0" cb="2"/><line nr="775" mi="0" ci="8" mb="0" cb="2"/><line nr="776" mi="0" ci="5" mb="0" cb="0"/><line nr="777" mi="0" ci="15" mb="0" cb="0"/><line nr="778" mi="0" ci="2" mb="0" cb="0"/><line nr="795" mi="0" ci="10" mb="0" cb="2"/><line nr="796" mi="0" ci="8" mb="0" cb="0"/><line nr="811" mi="0" ci="10" mb="0" cb="2"/><line nr="812" mi="0" ci="5" mb="0" cb="0"/><line nr="813" mi="0" ci="4" mb="0" cb="0"/><line nr="814" mi="0" ci="9" mb="0" cb="2"/><line nr="815" mi="0" ci="3" mb="0" cb="0"/><line nr="836" mi="0" ci="10" mb="0" cb="2"/><line nr="837" mi="0" ci="8" mb="0" cb="2"/><line nr="838" mi="0" ci="5" mb="0" cb="0"/><line nr="839" mi="0" ci="15" mb="0" cb="0"/><line nr="840" mi="0" ci="2" mb="0" cb="0"/><line nr="861" mi="0" ci="10" mb="0" cb="2"/><line nr="862" mi="0" ci="8" mb="0" cb="2"/><line nr="863" mi="0" ci="5" mb="0" cb="0"/><line nr="864" mi="0" ci="15" mb="0" cb="0"/><line nr="865" mi="0" ci="2" mb="0" cb="0"/><line nr="883" mi="0" ci="10" mb="0" cb="2"/><line nr="884" mi="0" ci="9" mb="0" cb="2"/><line nr="885" mi="0" ci="5" mb="0" cb="0"/><line nr="886" mi="0" ci="5" mb="0" cb="0"/><line nr="887" mi="0" ci="4" mb="0" cb="0"/><line nr="904" mi="0" ci="10" mb="0" cb="2"/><line nr="905" mi="0" ci="9" mb="0" cb="2"/><line nr="906" mi="0" ci="5" mb="0" cb="0"/><line nr="908" mi="0" ci="14" mb="0" cb="2"/><line nr="909" mi="0" ci="9" mb="0" cb="2"/><line nr="910" mi="0" ci="3" mb="0" cb="0"/><line nr="935" mi="0" ci="10" mb="0" cb="2"/><line nr="936" mi="0" ci="9" mb="0" cb="2"/><line nr="937" mi="0" ci="8" mb="0" cb="2"/><line nr="938" mi="0" ci="5" mb="0" cb="0"/><line nr="939" mi="0" ci="17" mb="0" cb="0"/><line nr="940" mi="0" ci="2" mb="0" cb="0"/><line nr="966" mi="0" ci="10" mb="0" cb="2"/><line nr="967" mi="0" ci="9" mb="0" cb="2"/><line nr="968" mi="0" ci="8" mb="0" cb="2"/><line nr="969" mi="0" ci="5" mb="0" cb="0"/><line nr="970" mi="0" ci="17" mb="0" cb="0"/><line nr="971" mi="0" ci="2" mb="0" cb="0"/><line nr="990" mi="0" ci="10" mb="0" cb="2"/><line nr="991" mi="0" ci="9" mb="0" cb="2"/><line nr="992" mi="0" ci="12" mb="0" cb="0"/><line nr="1017" mi="0" ci="10" mb="0" cb="2"/><line nr="1018" mi="0" ci="9" mb="0" cb="2"/><line nr="1019" mi="0" ci="8" mb="0" cb="2"/><line nr="1020" mi="0" ci="5" mb="0" cb="0"/><line nr="1021" mi="0" ci="17" mb="0" cb="0"/><line nr="1022" mi="0" ci="2" mb="0" cb="0"/><line nr="1041" mi="0" ci="10" mb="0" cb="2"/><line nr="1042" mi="0" ci="8" mb="0" cb="2"/><line nr="1043" mi="0" ci="3" mb="0" cb="0"/><line nr="1044" mi="0" ci="16" mb="0" cb="0"/><line nr="1045" mi="0" ci="3" mb="0" cb="0"/><line nr="1069" mi="0" ci="10" mb="0" cb="2"/><line nr="1070" mi="0" ci="8" mb="0" cb="2"/><line nr="1071" mi="0" ci="8" mb="0" cb="2"/><line nr="1072" mi="0" ci="5" mb="0" cb="0"/><line nr="1073" mi="0" ci="17" mb="0" cb="0"/><line nr="1074" mi="0" ci="2" mb="0" cb="0"/><line nr="1097" mi="0" ci="10" mb="0" cb="2"/><line nr="1098" mi="0" ci="8" mb="0" cb="2"/><line nr="1099" mi="0" ci="8" mb="0" cb="2"/><line nr="1100" mi="0" ci="4" mb="0" cb="0"/><line nr="1101" mi="0" ci="12" mb="0" cb="0"/><line nr="1102" mi="0" ci="14" mb="0" cb="0"/><line nr="1103" mi="0" ci="11" mb="0" cb="0"/><line nr="1104" mi="0" ci="3" mb="0" cb="0"/><line nr="1124" mi="0" ci="10" mb="0" cb="2"/><line nr="1125" mi="0" ci="8" mb="0" cb="2"/><line nr="1126" mi="0" ci="4" mb="0" cb="0"/><line nr="1127" mi="0" ci="13" mb="0" cb="0"/><line nr="1128" mi="0" ci="14" mb="0" cb="0"/><line nr="1129" mi="0" ci="5" mb="0" cb="2"/><line nr="1130" mi="0" ci="9" mb="0" cb="0"/><line nr="1132" mi="0" ci="6" mb="0" cb="0"/><line nr="1134" mi="0" ci="1" mb="0" cb="0"/><line nr="1135" mi="0" ci="3" mb="0" cb="0"/><line nr="1155" mi="0" ci="10" mb="0" cb="2"/><line nr="1156" mi="0" ci="8" mb="0" cb="2"/><line nr="1157" mi="0" ci="4" mb="0" cb="0"/><line nr="1158" mi="0" ci="13" mb="0" cb="0"/><line nr="1159" mi="0" ci="14" mb="0" cb="0"/><line nr="1160" mi="0" ci="5" mb="0" cb="2"/><line nr="1161" mi="0" ci="9" mb="0" cb="0"/><line nr="1163" mi="0" ci="6" mb="0" cb="0"/><line nr="1165" mi="0" ci="1" mb="0" cb="0"/><line nr="1166" mi="0" ci="3" mb="0" cb="0"/><line nr="1187" mi="0" ci="10" mb="0" cb="2"/><line nr="1188" mi="0" ci="8" mb="0" cb="2"/><line nr="1189" mi="0" ci="10" mb="0" cb="2"/><line nr="1190" mi="0" ci="4" mb="0" cb="0"/><line nr="1209" mi="0" ci="10" mb="0" cb="2"/><line nr="1210" mi="0" ci="8" mb="0" cb="2"/><line nr="1211" mi="0" ci="4" mb="0" cb="0"/><line nr="1212" mi="0" ci="13" mb="0" cb="0"/><line nr="1213" mi="0" ci="14" mb="0" cb="0"/><line nr="1214" mi="0" ci="4" mb="0" cb="2"/><line nr="1215" mi="0" ci="9" mb="0" cb="0"/><line nr="1217" mi="0" ci="6" mb="0" cb="0"/><line nr="1219" mi="0" ci="1" mb="0" cb="0"/><line nr="1220" mi="0" ci="3" mb="0" cb="0"/><line nr="1239" mi="0" ci="10" mb="0" cb="2"/><line nr="1240" mi="0" ci="8" mb="0" cb="2"/><line nr="1241" mi="0" ci="4" mb="0" cb="0"/><line nr="1242" mi="0" ci="13" mb="0" cb="0"/><line nr="1243" mi="0" ci="14" mb="0" cb="0"/><line nr="1244" mi="0" ci="4" mb="0" cb="0"/><line nr="1245" mi="0" ci="4" mb="0" cb="2"/><line nr="1246" mi="0" ci="6" mb="0" cb="0"/><line nr="1247" mi="0" ci="7" mb="0" cb="0"/><line nr="1248" mi="0" ci="4" mb="0" cb="2"/><line nr="1249" mi="0" ci="6" mb="0" cb="0"/><line nr="1251" mi="0" ci="1" mb="0" cb="0"/><line nr="1252" mi="0" ci="3" mb="0" cb="0"/><line nr="1271" mi="0" ci="10" mb="0" cb="2"/><line nr="1272" mi="0" ci="8" mb="0" cb="2"/><line nr="1273" mi="0" ci="4" mb="0" cb="0"/><line nr="1274" mi="0" ci="13" mb="0" cb="0"/><line nr="1275" mi="0" ci="14" mb="0" cb="0"/><line nr="1276" mi="0" ci="4" mb="0" cb="2"/><line nr="1277" mi="0" ci="4" mb="0" cb="0"/><line nr="1278" mi="0" ci="6" mb="0" cb="0"/><line nr="1279" mi="0" ci="7" mb="0" cb="0"/><line nr="1280" mi="0" ci="5" mb="0" cb="2"/><line nr="1281" mi="0" ci="6" mb="0" cb="0"/><line nr="1283" mi="0" ci="1" mb="0" cb="0"/><line nr="1284" mi="0" ci="3" mb="0" cb="0"/><line nr="1316" mi="0" ci="10" mb="0" cb="2"/><line nr="1317" mi="0" ci="8" mb="0" cb="2"/><line nr="1318" mi="0" ci="8" mb="0" cb="2"/><line nr="1319" mi="0" ci="8" mb="0" cb="2"/><line nr="1320" mi="0" ci="5" mb="0" cb="0"/><line nr="1321" mi="0" ci="19" mb="0" cb="0"/><line nr="1322" mi="0" ci="2" mb="0" cb="0"/><line nr="1349" mi="0" ci="10" mb="0" cb="2"/><line nr="1350" mi="0" ci="8" mb="0" cb="2"/><line nr="1351" mi="0" ci="8" mb="0" cb="2"/><line nr="1352" mi="0" ci="5" mb="0" cb="0"/><line nr="1353" mi="0" ci="17" mb="0" cb="0"/><line nr="1354" mi="0" ci="2" mb="0" cb="0"/><line nr="1381" mi="0" ci="10" mb="0" cb="2"/><line nr="1382" mi="0" ci="8" mb="0" cb="2"/><line nr="1383" mi="0" ci="8" mb="0" cb="2"/><line nr="1384" mi="0" ci="5" mb="0" cb="0"/><line nr="1385" mi="0" ci="17" mb="0" cb="0"/><line nr="1386" mi="0" ci="2" mb="0" cb="0"/><line nr="1413" mi="0" ci="10" mb="0" cb="2"/><line nr="1414" mi="0" ci="8" mb="0" cb="2"/><line nr="1415" mi="0" ci="8" mb="0" cb="2"/><line nr="1416" mi="0" ci="5" mb="0" cb="0"/><line nr="1417" mi="0" ci="17" mb="0" cb="0"/><line nr="1418" mi="0" ci="2" mb="0" cb="0"/><line nr="1444" mi="0" ci="10" mb="0" cb="2"/><line nr="1445" mi="0" ci="8" mb="0" cb="2"/><line nr="1446" mi="0" ci="8" mb="0" cb="2"/><line nr="1447" mi="0" ci="5" mb="0" cb="0"/><line nr="1448" mi="0" ci="17" mb="0" cb="0"/><line nr="1449" mi="0" ci="2" mb="0" cb="0"/><line nr="1475" mi="0" ci="10" mb="0" cb="2"/><line nr="1476" mi="0" ci="8" mb="0" cb="2"/><line nr="1477" mi="0" ci="8" mb="0" cb="2"/><line nr="1478" mi="0" ci="5" mb="0" cb="0"/><line nr="1479" mi="0" ci="17" mb="0" cb="0"/><line nr="1480" mi="0" ci="2" mb="0" cb="0"/><line nr="1507" mi="0" ci="10" mb="0" cb="2"/><line nr="1508" mi="0" ci="8" mb="0" cb="2"/><line nr="1509" mi="0" ci="8" mb="0" cb="2"/><line nr="1510" mi="0" ci="5" mb="0" cb="0"/><line nr="1511" mi="0" ci="17" mb="0" cb="0"/><line nr="1512" mi="0" ci="2" mb="0" cb="0"/><line nr="1535" mi="0" ci="10" mb="0" cb="2"/><line nr="1536" mi="0" ci="9" mb="0" cb="2"/><line nr="1537" mi="0" ci="8" mb="0" cb="2"/><line nr="1538" mi="0" ci="3" mb="0" cb="0"/><line nr="1539" mi="0" ci="18" mb="0" cb="0"/><line nr="1540" mi="0" ci="3" mb="0" cb="0"/><line nr="1573" mi="0" ci="10" mb="0" cb="2"/><line nr="1574" mi="0" ci="9" mb="0" cb="2"/><line nr="1575" mi="0" ci="8" mb="0" cb="2"/><line nr="1576" mi="0" ci="8" mb="0" cb="2"/><line nr="1577" mi="0" ci="5" mb="0" cb="0"/><line nr="1578" mi="0" ci="19" mb="0" cb="0"/><line nr="1579" mi="0" ci="2" mb="0" cb="0"/><line nr="1607" mi="0" ci="10" mb="0" cb="2"/><line nr="1608" mi="0" ci="9" mb="0" cb="2"/><line nr="1609" mi="0" ci="8" mb="0" cb="2"/><line nr="1610" mi="0" ci="8" mb="0" cb="2"/><line nr="1611" mi="0" ci="4" mb="0" cb="0"/><line nr="1612" mi="0" ci="13" mb="0" cb="0"/><line nr="1613" mi="0" ci="15" mb="0" cb="0"/><line nr="1614" mi="0" ci="12" mb="0" cb="0"/><line nr="1615" mi="0" ci="3" mb="0" cb="0"/><line nr="1639" mi="0" ci="10" mb="0" cb="2"/><line nr="1640" mi="0" ci="8" mb="0" cb="2"/><line nr="1641" mi="0" ci="4" mb="0" cb="0"/><line nr="1642" mi="0" ci="14" mb="0" cb="0"/><line nr="1643" mi="0" ci="15" mb="0" cb="0"/><line nr="1644" mi="0" ci="5" mb="0" cb="2"/><line nr="1645" mi="0" ci="10" mb="0" cb="0"/><line nr="1647" mi="0" ci="6" mb="0" cb="0"/><line nr="1649" mi="0" ci="1" mb="0" cb="0"/><line nr="1650" mi="0" ci="3" mb="0" cb="0"/><line nr="1674" mi="0" ci="10" mb="0" cb="2"/><line nr="1675" mi="0" ci="8" mb="0" cb="2"/><line nr="1676" mi="0" ci="4" mb="0" cb="0"/><line nr="1677" mi="0" ci="14" mb="0" cb="0"/><line nr="1678" mi="0" ci="15" mb="0" cb="0"/><line nr="1679" mi="0" ci="5" mb="0" cb="2"/><line nr="1680" mi="0" ci="10" mb="0" cb="0"/><line nr="1682" mi="0" ci="6" mb="0" cb="0"/><line nr="1684" mi="0" ci="1" mb="0" cb="0"/><line nr="1685" mi="0" ci="3" mb="0" cb="0"/><line nr="1710" mi="0" ci="10" mb="0" cb="2"/><line nr="1711" mi="0" ci="8" mb="0" cb="2"/><line nr="1712" mi="0" ci="11" mb="0" cb="2"/><line nr="1713" mi="0" ci="5" mb="0" cb="0"/><line nr="1736" mi="0" ci="10" mb="0" cb="2"/><line nr="1737" mi="0" ci="8" mb="0" cb="2"/><line nr="1738" mi="0" ci="4" mb="0" cb="0"/><line nr="1739" mi="0" ci="14" mb="0" cb="0"/><line nr="1740" mi="0" ci="15" mb="0" cb="0"/><line nr="1741" mi="0" ci="4" mb="0" cb="2"/><line nr="1742" mi="0" ci="10" mb="0" cb="0"/><line nr="1744" mi="0" ci="6" mb="0" cb="0"/><line nr="1746" mi="0" ci="1" mb="0" cb="0"/><line nr="1747" mi="0" ci="3" mb="0" cb="0"/><line nr="1770" mi="0" ci="10" mb="0" cb="2"/><line nr="1771" mi="0" ci="8" mb="0" cb="2"/><line nr="1772" mi="0" ci="4" mb="0" cb="0"/><line nr="1773" mi="0" ci="14" mb="0" cb="0"/><line nr="1774" mi="0" ci="15" mb="0" cb="0"/><line nr="1775" mi="0" ci="5" mb="0" cb="0"/><line nr="1776" mi="0" ci="4" mb="0" cb="2"/><line nr="1777" mi="0" ci="6" mb="0" cb="0"/><line nr="1778" mi="0" ci="7" mb="0" cb="0"/><line nr="1779" mi="0" ci="4" mb="0" cb="2"/><line nr="1780" mi="0" ci="6" mb="0" cb="0"/><line nr="1782" mi="0" ci="1" mb="0" cb="0"/><line nr="1783" mi="0" ci="3" mb="0" cb="0"/><line nr="1806" mi="0" ci="10" mb="0" cb="2"/><line nr="1807" mi="0" ci="8" mb="0" cb="2"/><line nr="1808" mi="0" ci="4" mb="0" cb="0"/><line nr="1809" mi="0" ci="14" mb="0" cb="0"/><line nr="1810" mi="0" ci="15" mb="0" cb="0"/><line nr="1811" mi="0" ci="4" mb="0" cb="2"/><line nr="1812" mi="0" ci="5" mb="0" cb="0"/><line nr="1813" mi="0" ci="6" mb="0" cb="0"/><line nr="1814" mi="0" ci="7" mb="0" cb="0"/><line nr="1815" mi="0" ci="5" mb="0" cb="2"/><line nr="1816" mi="0" ci="6" mb="0" cb="0"/><line nr="1818" mi="0" ci="1" mb="0" cb="0"/><line nr="1819" mi="0" ci="3" mb="0" cb="0"/><line nr="1855" mi="0" ci="10" mb="0" cb="2"/><line nr="1856" mi="0" ci="9" mb="0" cb="2"/><line nr="1857" mi="0" ci="8" mb="0" cb="2"/><line nr="1858" mi="0" ci="8" mb="0" cb="2"/><line nr="1859" mi="0" ci="8" mb="0" cb="2"/><line nr="1860" mi="0" ci="5" mb="0" cb="0"/><line nr="1861" mi="0" ci="21" mb="0" cb="0"/><line nr="1862" mi="0" ci="2" mb="0" cb="0"/><line nr="1893" mi="0" ci="10" mb="0" cb="2"/><line nr="1894" mi="0" ci="9" mb="0" cb="2"/><line nr="1895" mi="0" ci="8" mb="0" cb="2"/><line nr="1896" mi="0" ci="8" mb="0" cb="2"/><line nr="1897" mi="0" ci="5" mb="0" cb="0"/><line nr="1898" mi="0" ci="19" mb="0" cb="0"/><line nr="1899" mi="0" ci="2" mb="0" cb="0"/><line nr="1930" mi="0" ci="10" mb="0" cb="2"/><line nr="1931" mi="0" ci="9" mb="0" cb="2"/><line nr="1932" mi="0" ci="8" mb="0" cb="2"/><line nr="1933" mi="0" ci="8" mb="0" cb="2"/><line nr="1934" mi="0" ci="5" mb="0" cb="0"/><line nr="1935" mi="0" ci="19" mb="0" cb="0"/><line nr="1936" mi="0" ci="2" mb="0" cb="0"/><line nr="1967" mi="0" ci="10" mb="0" cb="2"/><line nr="1968" mi="0" ci="9" mb="0" cb="2"/><line nr="1969" mi="0" ci="8" mb="0" cb="2"/><line nr="1970" mi="0" ci="8" mb="0" cb="2"/><line nr="1971" mi="0" ci="5" mb="0" cb="0"/><line nr="1972" mi="0" ci="19" mb="0" cb="0"/><line nr="1973" mi="0" ci="2" mb="0" cb="0"/><line nr="2004" mi="0" ci="10" mb="0" cb="2"/><line nr="2005" mi="0" ci="9" mb="0" cb="2"/><line nr="2006" mi="0" ci="8" mb="0" cb="2"/><line nr="2007" mi="0" ci="8" mb="0" cb="2"/><line nr="2008" mi="0" ci="5" mb="0" cb="0"/><line nr="2009" mi="0" ci="19" mb="0" cb="0"/><line nr="2010" mi="0" ci="2" mb="0" cb="0"/><line nr="2041" mi="0" ci="10" mb="0" cb="2"/><line nr="2042" mi="0" ci="9" mb="0" cb="2"/><line nr="2043" mi="0" ci="8" mb="0" cb="2"/><line nr="2044" mi="0" ci="8" mb="0" cb="2"/><line nr="2045" mi="0" ci="5" mb="0" cb="0"/><line nr="2046" mi="0" ci="19" mb="0" cb="0"/><line nr="2047" mi="0" ci="2" mb="0" cb="0"/><line nr="2078" mi="0" ci="10" mb="0" cb="2"/><line nr="2079" mi="0" ci="9" mb="0" cb="2"/><line nr="2080" mi="0" ci="8" mb="0" cb="2"/><line nr="2081" mi="0" ci="8" mb="0" cb="2"/><line nr="2082" mi="0" ci="5" mb="0" cb="0"/><line nr="2083" mi="0" ci="19" mb="0" cb="0"/><line nr="2084" mi="0" ci="2" mb="0" cb="0"/><line nr="2103" mi="0" ci="10" mb="0" cb="2"/><line nr="2104" mi="0" ci="8" mb="0" cb="2"/><line nr="2105" mi="0" ci="1" mb="0" cb="0"/><line nr="2106" mi="0" ci="2" mb="0" cb="0"/><line nr="2107" mi="0" ci="16" mb="0" cb="0"/><line nr="2108" mi="0" ci="3" mb="0" cb="0"/><line nr="2133" mi="0" ci="10" mb="0" cb="2"/><line nr="2134" mi="0" ci="8" mb="0" cb="2"/><line nr="2135" mi="0" ci="8" mb="0" cb="2"/><line nr="2136" mi="0" ci="5" mb="0" cb="0"/><line nr="2137" mi="0" ci="17" mb="0" cb="0"/><line nr="2138" mi="0" ci="2" mb="0" cb="0"/><line nr="2162" mi="0" ci="10" mb="0" cb="2"/><line nr="2163" mi="0" ci="8" mb="0" cb="2"/><line nr="2164" mi="0" ci="8" mb="0" cb="2"/><line nr="2165" mi="0" ci="4" mb="0" cb="0"/><line nr="2166" mi="0" ci="12" mb="0" cb="0"/><line nr="2167" mi="0" ci="14" mb="0" cb="0"/><line nr="2168" mi="0" ci="11" mb="0" cb="0"/><line nr="2169" mi="0" ci="3" mb="0" cb="0"/><line nr="2189" mi="0" ci="10" mb="0" cb="2"/><line nr="2190" mi="0" ci="8" mb="0" cb="2"/><line nr="2191" mi="0" ci="4" mb="0" cb="0"/><line nr="2192" mi="0" ci="13" mb="0" cb="0"/><line nr="2193" mi="0" ci="14" mb="0" cb="0"/><line nr="2194" mi="0" ci="5" mb="0" cb="2"/><line nr="2195" mi="0" ci="9" mb="0" cb="0"/><line nr="2197" mi="0" ci="6" mb="0" cb="0"/><line nr="2199" mi="0" ci="1" mb="0" cb="0"/><line nr="2200" mi="0" ci="3" mb="0" cb="0"/><line nr="2220" mi="0" ci="10" mb="0" cb="2"/><line nr="2221" mi="0" ci="8" mb="0" cb="2"/><line nr="2222" mi="0" ci="4" mb="0" cb="0"/><line nr="2223" mi="0" ci="13" mb="0" cb="0"/><line nr="2224" mi="0" ci="14" mb="0" cb="0"/><line nr="2225" mi="0" ci="5" mb="0" cb="2"/><line nr="2226" mi="0" ci="9" mb="0" cb="0"/><line nr="2228" mi="0" ci="6" mb="0" cb="0"/><line nr="2230" mi="0" ci="1" mb="0" cb="0"/><line nr="2231" mi="0" ci="3" mb="0" cb="0"/><line nr="2253" mi="0" ci="10" mb="0" cb="2"/><line nr="2254" mi="0" ci="8" mb="0" cb="2"/><line nr="2255" mi="0" ci="10" mb="0" cb="2"/><line nr="2256" mi="0" ci="4" mb="0" cb="0"/><line nr="2276" mi="0" ci="10" mb="0" cb="2"/><line nr="2277" mi="0" ci="8" mb="0" cb="2"/><line nr="2278" mi="0" ci="4" mb="0" cb="0"/><line nr="2279" mi="0" ci="13" mb="0" cb="0"/><line nr="2280" mi="0" ci="14" mb="0" cb="0"/><line nr="2281" mi="0" ci="4" mb="0" cb="2"/><line nr="2282" mi="0" ci="9" mb="0" cb="0"/><line nr="2284" mi="0" ci="6" mb="0" cb="0"/><line nr="2286" mi="0" ci="1" mb="0" cb="0"/><line nr="2287" mi="0" ci="3" mb="0" cb="0"/><line nr="2307" mi="0" ci="10" mb="0" cb="2"/><line nr="2308" mi="0" ci="8" mb="0" cb="2"/><line nr="2309" mi="0" ci="4" mb="0" cb="0"/><line nr="2310" mi="0" ci="13" mb="0" cb="0"/><line nr="2311" mi="0" ci="14" mb="0" cb="0"/><line nr="2312" mi="0" ci="4" mb="0" cb="0"/><line nr="2313" mi="0" ci="4" mb="0" cb="2"/><line nr="2314" mi="0" ci="6" mb="0" cb="0"/><line nr="2315" mi="0" ci="7" mb="0" cb="0"/><line nr="2316" mi="0" ci="4" mb="0" cb="2"/><line nr="2317" mi="0" ci="6" mb="0" cb="0"/><line nr="2319" mi="0" ci="1" mb="0" cb="0"/><line nr="2320" mi="0" ci="3" mb="0" cb="0"/><line nr="2340" mi="0" ci="10" mb="0" cb="2"/><line nr="2341" mi="0" ci="8" mb="0" cb="2"/><line nr="2342" mi="0" ci="4" mb="0" cb="0"/><line nr="2343" mi="0" ci="13" mb="0" cb="0"/><line nr="2344" mi="0" ci="14" mb="0" cb="0"/><line nr="2345" mi="0" ci="4" mb="0" cb="2"/><line nr="2346" mi="0" ci="4" mb="0" cb="0"/><line nr="2347" mi="0" ci="6" mb="0" cb="0"/><line nr="2348" mi="0" ci="7" mb="0" cb="0"/><line nr="2349" mi="0" ci="5" mb="0" cb="2"/><line nr="2350" mi="0" ci="6" mb="0" cb="0"/><line nr="2352" mi="0" ci="1" mb="0" cb="0"/><line nr="2353" mi="0" ci="3" mb="0" cb="0"/><line nr="2385" mi="0" ci="10" mb="0" cb="2"/><line nr="2386" mi="0" ci="8" mb="0" cb="2"/><line nr="2387" mi="0" ci="8" mb="0" cb="2"/><line nr="2388" mi="0" ci="8" mb="0" cb="2"/><line nr="2389" mi="0" ci="5" mb="0" cb="0"/><line nr="2390" mi="0" ci="9" mb="0" cb="0"/><line nr="2391" mi="0" ci="10" mb="0" cb="0"/><line nr="2392" mi="0" ci="2" mb="0" cb="0"/><line nr="2419" mi="0" ci="10" mb="0" cb="2"/><line nr="2420" mi="0" ci="8" mb="0" cb="2"/><line nr="2421" mi="0" ci="8" mb="0" cb="2"/><line nr="2422" mi="0" ci="5" mb="0" cb="0"/><line nr="2423" mi="0" ci="8" mb="0" cb="0"/><line nr="2424" mi="0" ci="9" mb="0" cb="0"/><line nr="2425" mi="0" ci="2" mb="0" cb="0"/><line nr="2452" mi="0" ci="10" mb="0" cb="2"/><line nr="2453" mi="0" ci="8" mb="0" cb="2"/><line nr="2454" mi="0" ci="8" mb="0" cb="2"/><line nr="2455" mi="0" ci="5" mb="0" cb="0"/><line nr="2456" mi="0" ci="8" mb="0" cb="0"/><line nr="2457" mi="0" ci="9" mb="0" cb="0"/><line nr="2458" mi="0" ci="2" mb="0" cb="0"/><line nr="2485" mi="0" ci="10" mb="0" cb="2"/><line nr="2486" mi="0" ci="8" mb="0" cb="2"/><line nr="2487" mi="0" ci="8" mb="0" cb="2"/><line nr="2488" mi="0" ci="5" mb="0" cb="0"/><line nr="2489" mi="0" ci="17" mb="0" cb="0"/><line nr="2490" mi="0" ci="2" mb="0" cb="0"/><line nr="2517" mi="0" ci="10" mb="0" cb="2"/><line nr="2518" mi="0" ci="8" mb="0" cb="2"/><line nr="2519" mi="0" ci="8" mb="0" cb="2"/><line nr="2520" mi="0" ci="5" mb="0" cb="0"/><line nr="2521" mi="0" ci="17" mb="0" cb="0"/><line nr="2522" mi="0" ci="2" mb="0" cb="0"/><line nr="2549" mi="0" ci="10" mb="0" cb="2"/><line nr="2550" mi="0" ci="8" mb="0" cb="2"/><line nr="2551" mi="0" ci="8" mb="0" cb="2"/><line nr="2552" mi="0" ci="5" mb="0" cb="0"/><line nr="2553" mi="0" ci="17" mb="0" cb="0"/><line nr="2554" mi="0" ci="2" mb="0" cb="0"/><line nr="2581" mi="0" ci="10" mb="0" cb="2"/><line nr="2582" mi="0" ci="8" mb="0" cb="2"/><line nr="2583" mi="0" ci="8" mb="0" cb="2"/><line nr="2584" mi="0" ci="5" mb="0" cb="0"/><line nr="2585" mi="0" ci="17" mb="0" cb="0"/><line nr="2586" mi="0" ci="2" mb="0" cb="0"/><line nr="2609" mi="0" ci="10" mb="0" cb="2"/><line nr="2610" mi="0" ci="9" mb="0" cb="2"/><line nr="2611" mi="0" ci="8" mb="0" cb="2"/><line nr="2612" mi="0" ci="3" mb="0" cb="0"/><line nr="2613" mi="0" ci="18" mb="0" cb="0"/><line nr="2614" mi="0" ci="3" mb="0" cb="0"/><line nr="2643" mi="0" ci="10" mb="0" cb="2"/><line nr="2644" mi="0" ci="9" mb="0" cb="2"/><line nr="2645" mi="0" ci="8" mb="0" cb="2"/><line nr="2646" mi="0" ci="8" mb="0" cb="2"/><line nr="2647" mi="0" ci="5" mb="0" cb="0"/><line nr="2648" mi="0" ci="19" mb="0" cb="0"/><line nr="2649" mi="0" ci="2" mb="0" cb="0"/><line nr="2677" mi="0" ci="10" mb="0" cb="2"/><line nr="2678" mi="0" ci="9" mb="0" cb="2"/><line nr="2679" mi="0" ci="8" mb="0" cb="2"/><line nr="2680" mi="0" ci="8" mb="0" cb="2"/><line nr="2681" mi="0" ci="4" mb="0" cb="0"/><line nr="2682" mi="0" ci="13" mb="0" cb="0"/><line nr="2683" mi="0" ci="15" mb="0" cb="0"/><line nr="2684" mi="0" ci="12" mb="0" cb="0"/><line nr="2685" mi="0" ci="3" mb="0" cb="0"/><line nr="2711" mi="0" ci="10" mb="0" cb="2"/><line nr="2712" mi="0" ci="9" mb="0" cb="2"/><line nr="2713" mi="0" ci="8" mb="0" cb="2"/><line nr="2714" mi="0" ci="4" mb="0" cb="0"/><line nr="2715" mi="0" ci="14" mb="0" cb="0"/><line nr="2716" mi="0" ci="15" mb="0" cb="0"/><line nr="2717" mi="0" ci="5" mb="0" cb="2"/><line nr="2718" mi="0" ci="10" mb="0" cb="0"/><line nr="2720" mi="0" ci="6" mb="0" cb="0"/><line nr="2722" mi="0" ci="1" mb="0" cb="0"/><line nr="2723" mi="0" ci="3" mb="0" cb="0"/><line nr="2749" mi="0" ci="10" mb="0" cb="2"/><line nr="2750" mi="0" ci="9" mb="0" cb="2"/><line nr="2751" mi="0" ci="8" mb="0" cb="2"/><line nr="2752" mi="0" ci="4" mb="0" cb="0"/><line nr="2753" mi="0" ci="14" mb="0" cb="0"/><line nr="2754" mi="0" ci="15" mb="0" cb="0"/><line nr="2755" mi="0" ci="5" mb="0" cb="2"/><line nr="2756" mi="0" ci="10" mb="0" cb="0"/><line nr="2758" mi="0" ci="6" mb="0" cb="0"/><line nr="2760" mi="0" ci="1" mb="0" cb="0"/><line nr="2761" mi="0" ci="3" mb="0" cb="0"/><line nr="2788" mi="0" ci="10" mb="0" cb="2"/><line nr="2789" mi="0" ci="9" mb="0" cb="2"/><line nr="2790" mi="0" ci="8" mb="0" cb="2"/><line nr="2791" mi="0" ci="11" mb="0" cb="2"/><line nr="2792" mi="0" ci="5" mb="0" cb="0"/><line nr="2817" mi="0" ci="10" mb="0" cb="2"/><line nr="2818" mi="0" ci="9" mb="0" cb="2"/><line nr="2819" mi="0" ci="8" mb="0" cb="2"/><line nr="2820" mi="0" ci="4" mb="0" cb="0"/><line nr="2821" mi="0" ci="14" mb="0" cb="0"/><line nr="2822" mi="0" ci="15" mb="0" cb="0"/><line nr="2823" mi="0" ci="4" mb="0" cb="2"/><line nr="2824" mi="0" ci="10" mb="0" cb="0"/><line nr="2826" mi="0" ci="6" mb="0" cb="0"/><line nr="2828" mi="0" ci="1" mb="0" cb="0"/><line nr="2829" mi="0" ci="3" mb="0" cb="0"/><line nr="2854" mi="0" ci="10" mb="0" cb="2"/><line nr="2855" mi="0" ci="9" mb="0" cb="2"/><line nr="2856" mi="0" ci="8" mb="0" cb="2"/><line nr="2857" mi="0" ci="4" mb="0" cb="0"/><line nr="2858" mi="0" ci="14" mb="0" cb="0"/><line nr="2859" mi="0" ci="15" mb="0" cb="0"/><line nr="2860" mi="0" ci="5" mb="0" cb="0"/><line nr="2861" mi="0" ci="4" mb="0" cb="2"/><line nr="2862" mi="0" ci="6" mb="0" cb="0"/><line nr="2863" mi="0" ci="7" mb="0" cb="0"/><line nr="2864" mi="0" ci="4" mb="0" cb="2"/><line nr="2865" mi="0" ci="6" mb="0" cb="0"/><line nr="2867" mi="0" ci="1" mb="0" cb="0"/><line nr="2868" mi="0" ci="3" mb="0" cb="0"/><line nr="2893" mi="0" ci="10" mb="0" cb="2"/><line nr="2894" mi="0" ci="9" mb="0" cb="2"/><line nr="2895" mi="0" ci="8" mb="0" cb="2"/><line nr="2896" mi="0" ci="4" mb="0" cb="0"/><line nr="2897" mi="0" ci="14" mb="0" cb="0"/><line nr="2898" mi="0" ci="15" mb="0" cb="0"/><line nr="2899" mi="0" ci="4" mb="0" cb="2"/><line nr="2900" mi="0" ci="5" mb="0" cb="0"/><line nr="2901" mi="0" ci="6" mb="0" cb="0"/><line nr="2902" mi="0" ci="7" mb="0" cb="0"/><line nr="2903" mi="0" ci="5" mb="0" cb="2"/><line nr="2904" mi="0" ci="6" mb="0" cb="0"/><line nr="2906" mi="0" ci="1" mb="0" cb="0"/><line nr="2907" mi="0" ci="3" mb="0" cb="0"/><line nr="2943" mi="0" ci="10" mb="0" cb="2"/><line nr="2944" mi="0" ci="9" mb="0" cb="2"/><line nr="2945" mi="0" ci="8" mb="0" cb="2"/><line nr="2946" mi="0" ci="8" mb="0" cb="2"/><line nr="2947" mi="0" ci="8" mb="0" cb="2"/><line nr="2948" mi="0" ci="5" mb="0" cb="0"/><line nr="2949" mi="0" ci="10" mb="0" cb="0"/><line nr="2950" mi="0" ci="11" mb="0" cb="0"/><line nr="2951" mi="0" ci="2" mb="0" cb="0"/><line nr="2982" mi="0" ci="10" mb="0" cb="2"/><line nr="2983" mi="0" ci="9" mb="0" cb="2"/><line nr="2984" mi="0" ci="8" mb="0" cb="2"/><line nr="2985" mi="0" ci="8" mb="0" cb="2"/><line nr="2986" mi="0" ci="5" mb="0" cb="0"/><line nr="2987" mi="0" ci="9" mb="0" cb="0"/><line nr="2988" mi="0" ci="10" mb="0" cb="0"/><line nr="2989" mi="0" ci="2" mb="0" cb="0"/><line nr="3020" mi="0" ci="10" mb="0" cb="2"/><line nr="3021" mi="0" ci="9" mb="0" cb="2"/><line nr="3022" mi="0" ci="8" mb="0" cb="2"/><line nr="3023" mi="0" ci="8" mb="0" cb="2"/><line nr="3024" mi="0" ci="5" mb="0" cb="0"/><line nr="3025" mi="0" ci="9" mb="0" cb="0"/><line nr="3026" mi="0" ci="10" mb="0" cb="0"/><line nr="3027" mi="0" ci="2" mb="0" cb="0"/><line nr="3058" mi="0" ci="10" mb="0" cb="2"/><line nr="3059" mi="0" ci="9" mb="0" cb="2"/><line nr="3060" mi="0" ci="8" mb="0" cb="2"/><line nr="3061" mi="0" ci="8" mb="0" cb="2"/><line nr="3062" mi="0" ci="5" mb="0" cb="0"/><line nr="3063" mi="0" ci="9" mb="0" cb="0"/><line nr="3064" mi="0" ci="10" mb="0" cb="0"/><line nr="3065" mi="0" ci="2" mb="0" cb="0"/><line nr="3096" mi="0" ci="10" mb="0" cb="2"/><line nr="3097" mi="0" ci="9" mb="0" cb="2"/><line nr="3098" mi="0" ci="8" mb="0" cb="2"/><line nr="3099" mi="0" ci="8" mb="0" cb="2"/><line nr="3100" mi="0" ci="5" mb="0" cb="0"/><line nr="3101" mi="0" ci="19" mb="0" cb="0"/><line nr="3102" mi="0" ci="2" mb="0" cb="0"/><line nr="3133" mi="0" ci="10" mb="0" cb="2"/><line nr="3134" mi="0" ci="9" mb="0" cb="2"/><line nr="3135" mi="0" ci="8" mb="0" cb="2"/><line nr="3136" mi="0" ci="8" mb="0" cb="2"/><line nr="3137" mi="0" ci="5" mb="0" cb="0"/><line nr="3138" mi="0" ci="9" mb="0" cb="0"/><line nr="3139" mi="0" ci="10" mb="0" cb="0"/><line nr="3140" mi="0" ci="2" mb="0" cb="0"/><line nr="3171" mi="0" ci="10" mb="0" cb="2"/><line nr="3172" mi="0" ci="9" mb="0" cb="2"/><line nr="3173" mi="0" ci="8" mb="0" cb="2"/><line nr="3174" mi="0" ci="8" mb="0" cb="2"/><line nr="3175" mi="0" ci="5" mb="0" cb="0"/><line nr="3176" mi="0" ci="9" mb="0" cb="0"/><line nr="3177" mi="0" ci="10" mb="0" cb="0"/><line nr="3178" mi="0" ci="2" mb="0" cb="0"/><line nr="3183" mi="0" ci="8" mb="0" cb="0"/><line nr="3188" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="10" covered="5549"/><counter type="BRANCH" missed="6" covered="628"/><counter type="LINE" missed="0" covered="716"/><counter type="COMPLEXITY" missed="6" covered="524"/><counter type="METHOD" missed="0" covered="213"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SquareRootCalculator.java"><line nr="48" mi="0" ci="3" mb="0" cb="0"/><line nr="62" mi="0" ci="2" mb="0" cb="0"/><line nr="64" mi="0" ci="4" mb="0" cb="0"/><line nr="92" mi="0" ci="2" mb="0" cb="0"/><line nr="93" mi="0" ci="3" mb="0" cb="0"/><line nr="94" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="3" mb="0" cb="0"/><line nr="96" mi="0" ci="1" mb="0" cb="0"/><line nr="109" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="14" mb="0" cb="4"/><line nr="113" mi="0" ci="3" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="0"/><line nr="115" mi="0" ci="3" mb="0" cb="0"/><line nr="116" mi="0" ci="1" mb="0" cb="0"/><line nr="131" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="8" mb="0" cb="2"/><line nr="133" mi="0" ci="3" mb="0" cb="0"/><line nr="134" mi="0" ci="3" mb="0" cb="0"/><line nr="135" mi="0" ci="3" mb="0" cb="0"/><line nr="136" mi="0" ci="1" mb="0" cb="0"/><line nr="157" mi="0" ci="2" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="14" mb="0" cb="4"/><line nr="161" mi="0" ci="8" mb="0" cb="2"/><line nr="162" mi="0" ci="3" mb="0" cb="0"/><line nr="163" mi="0" ci="3" mb="0" cb="0"/><line nr="164" mi="0" ci="3" mb="0" cb="0"/><line nr="165" mi="0" ci="1" mb="0" cb="0"/><line nr="181" mi="0" ci="4" mb="0" cb="0"/><line nr="182" mi="0" ci="11" mb="0" cb="2"/><line nr="183" mi="0" ci="7" mb="0" cb="0"/><line nr="200" mi="0" ci="4" mb="0" cb="0"/><line nr="201" mi="1" ci="10" mb="1" cb="1"/><line nr="202" mi="0" ci="9" mb="0" cb="0"/><line nr="223" mi="0" ci="4" mb="0" cb="0"/><line nr="224" mi="1" ci="10" mb="1" cb="1"/><line nr="225" mi="0" ci="6" mb="0" cb="0"/><line nr="226" mi="0" ci="4" mb="0" cb="0"/><line nr="243" mi="0" ci="4" mb="0" cb="0"/><line nr="244" mi="1" ci="10" mb="1" cb="1"/><line nr="245" mi="0" ci="2" mb="0" cb="0"/><line nr="246" mi="0" ci="12" mb="0" cb="2"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="249" mi="0" ci="4" mb="0" cb="0"/><line nr="253" mi="0" ci="7" mb="0" cb="0"/><line nr="254" mi="0" ci="1" mb="0" cb="0"/><line nr="255" mi="0" ci="4" mb="0" cb="0"/><line nr="256" mi="0" ci="5" mb="0" cb="0"/><line nr="257" mi="0" ci="5" mb="0" cb="0"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="9" mb="0" cb="2"/><line nr="260" mi="0" ci="8" mb="0" cb="0"/><line nr="261" mi="0" ci="2" mb="0" cb="0"/><line nr="262" mi="0" ci="5" mb="0" cb="0"/><line nr="263" mi="0" ci="5" mb="0" cb="0"/><line nr="265" mi="0" ci="5" mb="0" cb="0"/><line nr="266" mi="0" ci="7" mb="0" cb="0"/><line nr="267" mi="0" ci="2" mb="0" cb="0"/><line nr="271" mi="0" ci="3" mb="0" cb="0"/><line nr="272" mi="0" ci="5" mb="0" cb="0"/><line nr="273" mi="0" ci="5" mb="0" cb="0"/><line nr="274" mi="0" ci="4" mb="1" cb="1"/><line nr="275" mi="1" ci="13" mb="0" cb="0"/><line nr="276" mi="0" ci="5" mb="0" cb="0"/><line nr="277" mi="0" ci="2" mb="0" cb="0"/><line nr="281" mi="0" ci="4" mb="0" cb="0"/><line nr="282" mi="0" ci="7" mb="0" cb="0"/><line nr="283" mi="0" ci="7" mb="0" cb="2"/><line nr="284" mi="0" ci="10" mb="0" cb="0"/><line nr="285" mi="0" ci="9" mb="0" cb="0"/><line nr="290" mi="0" ci="5" mb="0" cb="0"/><line nr="291" mi="0" ci="2" mb="0" cb="0"/><line nr="292" mi="0" ci="2" mb="0" cb="0"/><line nr="293" mi="0" ci="5" mb="0" cb="0"/><line nr="294" mi="0" ci="5" mb="0" cb="0"/><line nr="295" mi="0" ci="6" mb="0" cb="2"/><line nr="296" mi="0" ci="3" mb="0" cb="0"/><line nr="297" mi="0" ci="7" mb="0" cb="0"/><line nr="298" mi="0" ci="4" mb="0" cb="0"/><line nr="299" mi="0" ci="5" mb="0" cb="0"/><line nr="300" mi="0" ci="6" mb="0" cb="0"/><line nr="302" mi="0" ci="6" mb="0" cb="0"/><line nr="307" mi="0" ci="14" mb="0" cb="0"/><line nr="308" mi="0" ci="2" mb="0" cb="0"/><line nr="312" mi="0" ci="3" mb="0" cb="0"/><line nr="316" mi="0" ci="3" mb="0" cb="0"/><line nr="320" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="436"/><counter type="BRANCH" missed="4" covered="26"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="4" covered="28"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="14" covered="5985"/><counter type="BRANCH" missed="10" covered="654"/><counter type="LINE" missed="0" covered="804"/><counter type="COMPLEXITY" missed="10" covered="552"/><counter type="METHOD" missed="0" covered="230"/><counter type="CLASS" missed="0" covered="2"/></package><package name="com/github/ltennstedt/finnmath/core/linear"><class name="com/github/ltennstedt/finnmath/core/linear/AbstractVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="57"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="76"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="entries" desc="()Lcom/google/common/collect/ImmutableSet;" line="90"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="101"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;)Ljava/lang/Object;" line="132"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;)Ljava/lang/Object;" line="163"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;)Ljava/lang/Object;" line="194"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="206"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="211"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="216"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="228"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Lcom/google/common/collect/ImmutableMap;" line="232"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="155"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="17"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="426"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="440"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="441"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="579"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="593"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Lcom/google/common/collect/Table$Cell;)V" line="593"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="48"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="74"><counter type="INSTRUCTION" missed="1" covered="25"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="94"><counter type="INSTRUCTION" missed="1" covered="34"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Object;)Ljava/lang/Object;" line="122"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="144"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nullsToElement" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="165"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="180"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Ljava/util/Map;" line="184"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSize" desc="()I" line="188"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nullsToElement$1" desc="(Ljava/lang/Object;Ljava/util/Map$Entry;)V" line="167"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Object;I)V" line="145"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="30" covered="154"/><counter type="BRANCH" missed="6" covered="8"/><counter type="LINE" missed="7" covered="27"/><counter type="COMPLEXITY" missed="7" covered="11"/><counter type="METHOD" missed="2" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="53"><counter type="INSTRUCTION" missed="2" covered="38"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Object;)Lcom/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder;" line="85"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nullsToElement" desc="(Ljava/lang/Object;)Lcom/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder;" line="112"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/lang/Object;)Lcom/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder;" line="136"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="148"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/Table;" line="152"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$2" desc="(Ljava/lang/Object;Ljava/lang/Integer;)V" line="138"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Integer;)V" line="138"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nullsToElement$0" desc="(Ljava/lang/Object;Lcom/google/common/collect/Table$Cell;)V" line="114"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="158"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="0" covered="31"/><counter type="COMPLEXITY" missed="2" covered="10"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="420"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="434"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="435"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="576"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="590"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Lcom/google/common/collect/Table$Cell;)V" line="590"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="578"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="592"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Lcom/google/common/collect/Table$Cell;)V" line="592"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="40"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="55"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="75"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Ljava/math/BigDecimal;" line="97"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="116"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="131"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="142"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="154"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="167"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="186"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="211"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="241"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Ljava/math/BigDecimal;" line="266"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="294"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="329"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="369"><counter type="INSTRUCTION" missed="0" covered="62"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="387"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equalByComparingTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Z" line="400"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;" line="413"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$equalByComparingTo$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/util/Map$Entry;)Z" line="401"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="118"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$dotProduct$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/util/Map$Entry;)Ljava/math/BigDecimal;" line="99"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="79"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="59"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="27" covered="485"/><counter type="BRANCH" missed="4" covered="40"/><counter type="LINE" missed="2" covered="60"/><counter type="COMPLEXITY" missed="4" covered="42"/><counter type="METHOD" missed="2" covered="22"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/Matrices"><method name="buildZeroBigIntegerMatrix" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="58"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildIdentityBigIntegerMatrix" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="74"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroBigDecimalMatrix" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="95"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildIdentityBigDecimalMatrix" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="111"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroSimpleComplexNumberMatrix" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="133"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildIdentitySimpleComplexNumberMatrix" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="149"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroRealComplexNumberMatrix" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="170"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildIdentityRealComplexNumberMatrix" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="186"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$buildIdentityRealComplexNumberMatrix$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;I)V" line="188"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$buildIdentitySimpleComplexNumberMatrix$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;I)V" line="151"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$buildIdentityBigDecimalMatrix$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;I)V" line="113"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$buildIdentityBigIntegerMatrix$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;I)V" line="76"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="232"/><counter type="BRANCH" missed="0" covered="24"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="49"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="69"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="101"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="131"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="158"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="174"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="199"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="215"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="226"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="244"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="263"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="284"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="302"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="329"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="358"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="372"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigInteger;" line="386"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="399"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="418"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="441"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="468"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="483"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="496"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="510"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="525"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="541"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;" line="565"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$18" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Z" line="527"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$17" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="526"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$16" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Z" line="511"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$15" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="510"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$14" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Z" line="497"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$13" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="496"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsRowSumNorm$12" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="373"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsColumnSumNorm$11" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="359"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$10" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="338"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$9" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="303"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$determinant$8" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="247"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$trace$7" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="228"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Lcom/google/common/collect/Table$Cell;)V" line="202"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Ljava/util/Map;)V" line="163"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="164"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="135"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="136"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="108"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="76"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1225"/><counter type="BRANCH" missed="3" covered="89"/><counter type="LINE" missed="0" covered="150"/><counter type="COMPLEXITY" missed="3" covered="89"/><counter type="METHOD" missed="0" covered="46"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="68"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="99"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="128"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="155"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigInteger;" line="171"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="196"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="212"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigInteger;" line="223"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigInteger;" line="241"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Ljava/math/BigInteger;" line="260"><counter type="INSTRUCTION" missed="0" covered="77"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigInteger;" line="281"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="299"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="326"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigInteger;" line="353"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigInteger;" line="366"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigInteger;" line="379"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="392"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="411"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="436"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="466"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="482"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="495"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="509"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="524"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="540"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;" line="562"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$19" desc="(Ljava/math/BigInteger;)Z" line="526"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$18" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="525"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$17" desc="(Ljava/math/BigInteger;)Z" line="510"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$16" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="509"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$15" desc="(Ljava/math/BigInteger;)Z" line="496"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$14" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="495"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$frobeniusNormPow2$13" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="379"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsRowSumNorm$12" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="367"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsColumnSumNorm$11" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="354"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$10" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="334"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$9" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="300"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$determinant$8" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="244"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$trace$7" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="225"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/math/BigInteger;Lcom/google/common/collect/Table$Cell;)V" line="199"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Ljava/util/Map;)V" line="160"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;)Ljava/math/BigInteger;" line="161"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="132"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="133"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/google/common/collect/Table$Cell;)V" line="106"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/google/common/collect/Table$Cell;)V" line="75"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1227"/><counter type="BRANCH" missed="1" covered="87"/><counter type="LINE" missed="0" covered="149"/><counter type="COMPLEXITY" missed="1" covered="90"/><counter type="METHOD" missed="0" covered="47"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="563"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="577"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Lcom/google/common/collect/Table$Cell;)V" line="577"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="41"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="58"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="80"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="101"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="116"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigInteger;" line="127"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="143"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="156"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="175"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="200"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="230"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Ljava/math/BigInteger;" line="252"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Ljava/math/BigDecimal;" line="278"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="306"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="341"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="381"><counter type="INSTRUCTION" missed="0" covered="62"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="399"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;" line="411"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="103"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="84"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="62"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="504"/><counter type="BRANCH" missed="0" covered="44"/><counter type="LINE" missed="0" covered="67"/><counter type="COMPLEXITY" missed="0" covered="43"/><counter type="METHOD" missed="0" covered="21"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="59"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="82"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="103"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="118"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="129"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="141"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="154"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="173"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="198"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="228"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="251"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Ljava/math/BigDecimal;" line="274"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="302"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="337"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="377"><counter type="INSTRUCTION" missed="0" covered="62"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="395"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;" line="407"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$dotProduct$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/util/Map$Entry;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="253"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="105"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="86"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="63"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="493"/><counter type="BRANCH" missed="0" covered="40"/><counter type="LINE" missed="0" covered="60"/><counter type="COMPLEXITY" missed="0" covered="42"/><counter type="METHOD" missed="0" covered="22"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="46"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="66"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="97"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="126"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="153"><counter type="INSTRUCTION" missed="19" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigDecimal;" line="167"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="192"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="208"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigDecimal;" line="219"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigDecimal;" line="237"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Ljava/math/BigDecimal;" line="256"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigDecimal;" line="277"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="295"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="322"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="349"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="362"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigDecimal;" line="375"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="387"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="405"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="429"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="458"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="474"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="487"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="501"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="516"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="531"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;" line="549"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$19" desc="(Ljava/math/BigDecimal;)Z" line="518"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$18" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="517"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$17" desc="(Ljava/math/BigDecimal;)Z" line="502"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$16" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="501"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$15" desc="(Ljava/math/BigDecimal;)Z" line="488"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$14" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="487"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$frobeniusNormPow2$13" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="375"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsRowSumNorm$12" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="363"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsColumnSumNorm$11" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="350"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$10" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="330"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$9" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="296"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$determinant$8" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="240"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$trace$7" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="221"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/math/BigDecimal;Lcom/google/common/collect/Table$Cell;)V" line="195"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="157"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="158"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="130"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="131"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="104"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="73"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="53" covered="1168"/><counter type="BRANCH" missed="6" covered="82"/><counter type="LINE" missed="6" covered="138"/><counter type="COMPLEXITY" missed="7" covered="84"/><counter type="METHOD" missed="2" covered="45"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/Vectors"><method name="buildZeroBigIntegerVector" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="49"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroBigDecimalVector" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="64"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroSimpleComplexNumberVector" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="79"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroRealComplexNumberVector" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="94"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="60"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="424"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="438"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="439"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="59"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="82"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="103"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="118"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="129"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="141"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="154"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="173"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="196"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="223"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="245"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Ljava/math/BigDecimal;" line="268"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="296"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="329"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="366"><counter type="INSTRUCTION" missed="0" covered="58"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="383"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;" line="395"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$dotProduct$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/util/Map$Entry;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="247"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="105"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="86"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="63"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="477"/><counter type="BRANCH" missed="0" covered="40"/><counter type="LINE" missed="0" covered="56"/><counter type="COMPLEXITY" missed="0" covered="42"/><counter type="METHOD" missed="0" covered="22"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="408"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="422"><counter type="INSTRUCTION" missed="5" covered="15"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="20"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="64"><counter type="INSTRUCTION" missed="4" covered="10"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="square" desc="()Z" line="120"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="triangular" desc="()Z" line="134"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diagonal" desc="()Z" line="152"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="symmetric" desc="()Z" line="170"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="skewSymmetric" desc="()Z" line="185"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="196"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="207"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Object;" line="230"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cells" desc="()Lcom/google/common/collect/ImmutableSet;" line="247"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="row" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="265"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="column" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="286"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rows" desc="()Lcom/google/common/collect/ImmutableMap;" line="300"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columns" desc="()Lcom/google/common/collect/ImmutableMap;" line="311"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="322"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()J" line="332"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowSize" desc="()I" line="343"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnSize" desc="()I" line="354"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="359"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="364"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="376"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/ImmutableTable;" line="380"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="54"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="243"/><counter type="BRANCH" missed="4" covered="24"/><counter type="LINE" missed="0" covered="43"/><counter type="COMPLEXITY" missed="4" covered="33"/><counter type="METHOD" missed="0" covered="23"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="68"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="100"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="129"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="156"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="172"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="197"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="213"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="224"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="242"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="261"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="282"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="300"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="327"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="356"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="370"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigDecimal;" line="384"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="397"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="416"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="441"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="471"><counter type="INSTRUCTION" missed="0" covered="40"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="487"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="500"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="514"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="529"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="545"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;" line="564"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$18" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="531"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$17" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="530"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$16" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="515"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$15" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="514"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$14" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="501"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$13" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="500"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsRowSumNorm$12" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="371"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsColumnSumNorm$11" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="357"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$10" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="336"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$9" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="301"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$determinant$8" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="245"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$trace$7" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="226"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/google/common/collect/Table$Cell;)V" line="200"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="161"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="163"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="133"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="134"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="107"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="75"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1222"/><counter type="BRANCH" missed="1" covered="89"/><counter type="LINE" missed="0" covered="147"/><counter type="COMPLEXITY" missed="1" covered="90"/><counter type="METHOD" missed="0" covered="46"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="RealComplexNumberMatrix.java"><line nr="48" mi="0" ci="3" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="14" mb="0" cb="2"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="14" mb="0" cb="2"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="6" mb="0" cb="0"/><line nr="74" mi="0" ci="7" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="14" mb="0" cb="0"/><line nr="78" mi="0" ci="1" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="14" mb="0" cb="2"/><line nr="102" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="14" mb="0" cb="2"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="6" mb="0" cb="0"/><line nr="106" mi="0" ci="7" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="14" mb="0" cb="0"/><line nr="110" mi="0" ci="1" mb="0" cb="0"/><line nr="111" mi="0" ci="3" mb="0" cb="0"/><line nr="129" mi="0" ci="4" mb="0" cb="0"/><line nr="130" mi="0" ci="14" mb="0" cb="2"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="8" mb="0" cb="0"/><line nr="133" mi="0" ci="17" mb="0" cb="0"/><line nr="134" mi="0" ci="5" mb="0" cb="0"/><line nr="135" mi="0" ci="6" mb="0" cb="0"/><line nr="136" mi="0" ci="1" mb="0" cb="0"/><line nr="137" mi="0" ci="3" mb="0" cb="0"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="0" ci="14" mb="0" cb="2"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="2" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="161" mi="0" ci="14" mb="0" cb="0"/><line nr="163" mi="0" ci="11" mb="0" cb="2"/><line nr="164" mi="0" ci="12" mb="0" cb="0"/><line nr="165" mi="0" ci="1" mb="0" cb="0"/><line nr="166" mi="0" ci="3" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="1" ci="12" mb="1" cb="1"/><line nr="175" mi="0" ci="1" mb="0" cb="0"/><line nr="176" mi="0" ci="2" mb="0" cb="0"/><line nr="177" mi="0" ci="11" mb="0" cb="2"/><line nr="178" mi="0" ci="12" mb="0" cb="0"/><line nr="179" mi="0" ci="1" mb="0" cb="0"/><line nr="180" mi="0" ci="2" mb="0" cb="0"/><line nr="197" mi="0" ci="4" mb="0" cb="0"/><line nr="198" mi="0" ci="10" mb="0" cb="0"/><line nr="199" mi="0" ci="6" mb="0" cb="0"/><line nr="200" mi="0" ci="17" mb="0" cb="0"/><line nr="201" mi="0" ci="3" mb="0" cb="0"/><line nr="213" mi="0" ci="5" mb="0" cb="0"/><line nr="224" mi="0" ci="10" mb="0" cb="0"/><line nr="225" mi="0" ci="2" mb="0" cb="0"/><line nr="226" mi="0" ci="20" mb="0" cb="2"/><line nr="227" mi="0" ci="5" mb="0" cb="0"/><line nr="242" mi="0" ci="5" mb="0" cb="0"/><line nr="243" mi="0" ci="9" mb="0" cb="0"/><line nr="244" mi="0" ci="3" mb="0" cb="2"/><line nr="245" mi="0" ci="20" mb="0" cb="2"/><line nr="246" mi="0" ci="5" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="0" cb="2"/><line nr="249" mi="0" ci="3" mb="0" cb="0"/><line nr="251" mi="0" ci="3" mb="0" cb="2"/><line nr="252" mi="0" ci="3" mb="0" cb="0"/><line nr="256" mi="0" ci="36" mb="0" cb="0"/><line nr="261" mi="0" ci="2" mb="0" cb="0"/><line nr="262" mi="0" ci="13" mb="0" cb="2"/><line nr="263" mi="0" ci="2" mb="0" cb="0"/><line nr="264" mi="0" ci="2" mb="0" cb="0"/><line nr="265" mi="0" ci="5" mb="0" cb="0"/><line nr="266" mi="0" ci="7" mb="0" cb="2"/><line nr="267" mi="0" ci="5" mb="0" cb="0"/><line nr="268" mi="0" ci="9" mb="0" cb="2"/><line nr="269" mi="0" ci="8" mb="0" cb="2"/><line nr="270" mi="0" ci="1" mb="0" cb="0"/><line nr="273" mi="0" ci="12" mb="0" cb="0"/><line nr="275" mi="0" ci="9" mb="0" cb="0"/><line nr="276" mi="0" ci="1" mb="0" cb="0"/><line nr="277" mi="0" ci="2" mb="0" cb="0"/><line nr="282" mi="0" ci="27" mb="0" cb="0"/><line nr="283" mi="0" ci="27" mb="0" cb="0"/><line nr="284" mi="0" ci="27" mb="0" cb="0"/><line nr="285" mi="0" ci="27" mb="0" cb="0"/><line nr="286" mi="0" ci="27" mb="0" cb="0"/><line nr="287" mi="0" ci="27" mb="0" cb="0"/><line nr="288" mi="0" ci="12" mb="0" cb="0"/><line nr="300" mi="0" ci="10" mb="0" cb="0"/><line nr="301" mi="0" ci="20" mb="0" cb="0"/><line nr="302" mi="0" ci="3" mb="0" cb="0"/><line nr="327" mi="0" ci="4" mb="0" cb="0"/><line nr="328" mi="0" ci="4" mb="0" cb="0"/><line nr="329" mi="0" ci="8" mb="0" cb="0"/><line nr="330" mi="0" ci="3" mb="0" cb="0"/><line nr="331" mi="0" ci="8" mb="0" cb="0"/><line nr="332" mi="0" ci="3" mb="0" cb="0"/><line nr="333" mi="0" ci="2" mb="0" cb="0"/><line nr="334" mi="0" ci="12" mb="0" cb="0"/><line nr="335" mi="0" ci="8" mb="0" cb="0"/><line nr="336" mi="0" ci="4" mb="0" cb="0"/><line nr="337" mi="0" ci="4" mb="0" cb="0"/><line nr="338" mi="0" ci="8" mb="0" cb="4"/><line nr="339" mi="0" ci="13" mb="0" cb="2"/><line nr="340" mi="0" ci="13" mb="0" cb="2"/><line nr="341" mi="0" ci="8" mb="0" cb="0"/><line nr="343" mi="0" ci="1" mb="0" cb="0"/><line nr="344" mi="0" ci="3" mb="0" cb="0"/><line nr="356" mi="0" ci="8" mb="0" cb="0"/><line nr="357" mi="0" ci="10" mb="0" cb="0"/><line nr="358" mi="0" ci="5" mb="0" cb="0"/><line nr="370" mi="0" ci="8" mb="0" cb="0"/><line nr="371" mi="0" ci="10" mb="0" cb="0"/><line nr="372" mi="0" ci="5" mb="0" cb="0"/><line nr="384" mi="0" ci="11" mb="0" cb="0"/><line nr="397" mi="0" ci="7" mb="0" cb="0"/><line nr="416" mi="0" ci="4" mb="0" cb="0"/><line nr="417" mi="0" ci="14" mb="0" cb="4"/><line nr="419" mi="0" ci="8" mb="0" cb="0"/><line nr="441" mi="0" ci="8" mb="0" cb="2"/><line nr="442" mi="0" ci="4" mb="0" cb="0"/><line nr="443" mi="0" ci="9" mb="0" cb="0"/><line nr="471" mi="0" ci="4" mb="0" cb="0"/><line nr="472" mi="0" ci="14" mb="0" cb="4"/><line nr="474" mi="0" ci="8" mb="0" cb="2"/><line nr="475" mi="0" ci="4" mb="0" cb="0"/><line nr="476" mi="0" ci="10" mb="0" cb="0"/><line nr="487" mi="0" ci="11" mb="0" cb="0"/><line nr="500" mi="0" ci="23" mb="0" cb="4"/><line nr="501" mi="0" ci="15" mb="0" cb="4"/><line nr="514" mi="0" ci="23" mb="0" cb="4"/><line nr="515" mi="0" ci="15" mb="0" cb="4"/><line nr="529" mi="0" ci="6" mb="0" cb="2"/><line nr="530" mi="0" ci="17" mb="0" cb="2"/><line nr="531" mi="0" ci="15" mb="0" cb="4"/><line nr="545" mi="0" ci="5" mb="0" cb="2"/><line nr="546" mi="0" ci="13" mb="0" cb="4"/><line nr="564" mi="0" ci="8" mb="0" cb="2"/><line nr="565" mi="0" ci="8" mb="0" cb="2"/><line nr="566" mi="0" ci="7" mb="0" cb="0"/><line nr="578" mi="0" ci="4" mb="0" cb="0"/><line nr="579" mi="0" ci="1" mb="0" cb="0"/><line nr="592" mi="0" ci="13" mb="0" cb="0"/><line nr="593" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1248"/><counter type="BRANCH" missed="1" covered="89"/><counter type="LINE" missed="0" covered="151"/><counter type="COMPLEXITY" missed="1" covered="93"/><counter type="METHOD" missed="0" covered="49"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Vectors.java"><line nr="49" mi="0" ci="8" mb="0" cb="2"/><line nr="50" mi="0" ci="7" mb="0" cb="0"/><line nr="64" mi="0" ci="8" mb="0" cb="2"/><line nr="65" mi="0" ci="7" mb="0" cb="0"/><line nr="79" mi="0" ci="8" mb="0" cb="2"/><line nr="80" mi="0" ci="7" mb="0" cb="0"/><line nr="94" mi="0" ci="8" mb="0" cb="2"/><line nr="95" mi="0" ci="7" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="60"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumberMatrix.java"><line nr="49" mi="0" ci="3" mb="0" cb="0"/><line nr="50" mi="0" ci="1" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="14" mb="0" cb="2"/><line nr="71" mi="0" ci="4" mb="0" cb="0"/><line nr="72" mi="0" ci="14" mb="0" cb="2"/><line nr="73" mi="0" ci="4" mb="0" cb="0"/><line nr="74" mi="0" ci="6" mb="0" cb="0"/><line nr="75" mi="0" ci="7" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="78" mi="0" ci="14" mb="0" cb="0"/><line nr="79" mi="0" ci="1" mb="0" cb="0"/><line nr="80" mi="0" ci="3" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="14" mb="0" cb="2"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="14" mb="0" cb="2"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="6" mb="0" cb="0"/><line nr="107" mi="0" ci="7" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="14" mb="0" cb="0"/><line nr="111" mi="0" ci="1" mb="0" cb="0"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="14" mb="0" cb="2"/><line nr="133" mi="0" ci="4" mb="0" cb="0"/><line nr="134" mi="0" ci="8" mb="0" cb="0"/><line nr="135" mi="0" ci="17" mb="0" cb="0"/><line nr="136" mi="0" ci="5" mb="0" cb="0"/><line nr="137" mi="0" ci="6" mb="0" cb="0"/><line nr="138" mi="0" ci="1" mb="0" cb="0"/><line nr="139" mi="0" ci="3" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="14" mb="0" cb="2"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="161" mi="0" ci="6" mb="0" cb="0"/><line nr="162" mi="0" ci="9" mb="0" cb="0"/><line nr="163" mi="0" ci="7" mb="0" cb="0"/><line nr="164" mi="0" ci="12" mb="0" cb="0"/><line nr="165" mi="0" ci="4" mb="0" cb="0"/><line nr="166" mi="0" ci="4" mb="0" cb="0"/><line nr="167" mi="0" ci="1" mb="0" cb="0"/><line nr="168" mi="0" ci="3" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="4" mb="0" cb="0"/><line nr="176" mi="1" ci="12" mb="1" cb="1"/><line nr="177" mi="0" ci="1" mb="0" cb="0"/><line nr="178" mi="0" ci="2" mb="0" cb="0"/><line nr="179" mi="0" ci="11" mb="0" cb="2"/><line nr="180" mi="0" ci="12" mb="0" cb="0"/><line nr="181" mi="0" ci="1" mb="0" cb="0"/><line nr="182" mi="0" ci="2" mb="0" cb="0"/><line nr="199" mi="0" ci="4" mb="0" cb="0"/><line nr="200" mi="0" ci="10" mb="0" cb="0"/><line nr="201" mi="0" ci="6" mb="0" cb="0"/><line nr="202" mi="0" ci="17" mb="0" cb="0"/><line nr="203" mi="0" ci="3" mb="0" cb="0"/><line nr="215" mi="0" ci="5" mb="0" cb="0"/><line nr="226" mi="0" ci="10" mb="0" cb="0"/><line nr="227" mi="0" ci="2" mb="0" cb="0"/><line nr="228" mi="0" ci="20" mb="0" cb="2"/><line nr="229" mi="0" ci="5" mb="0" cb="0"/><line nr="244" mi="0" ci="5" mb="0" cb="0"/><line nr="245" mi="0" ci="9" mb="0" cb="0"/><line nr="246" mi="0" ci="3" mb="0" cb="2"/><line nr="247" mi="0" ci="20" mb="0" cb="2"/><line nr="248" mi="0" ci="5" mb="0" cb="0"/><line nr="250" mi="0" ci="3" mb="0" cb="2"/><line nr="251" mi="0" ci="3" mb="0" cb="0"/><line nr="253" mi="0" ci="3" mb="0" cb="2"/><line nr="254" mi="0" ci="3" mb="0" cb="0"/><line nr="258" mi="0" ci="36" mb="0" cb="0"/><line nr="263" mi="0" ci="2" mb="0" cb="0"/><line nr="264" mi="0" ci="13" mb="0" cb="2"/><line nr="265" mi="0" ci="2" mb="0" cb="0"/><line nr="266" mi="0" ci="2" mb="0" cb="0"/><line nr="267" mi="0" ci="5" mb="0" cb="0"/><line nr="268" mi="0" ci="7" mb="0" cb="2"/><line nr="269" mi="0" ci="5" mb="0" cb="0"/><line nr="270" mi="0" ci="9" mb="0" cb="2"/><line nr="271" mi="0" ci="8" mb="0" cb="2"/><line nr="272" mi="0" ci="1" mb="0" cb="0"/><line nr="275" mi="0" ci="12" mb="0" cb="0"/><line nr="277" mi="0" ci="9" mb="0" cb="0"/><line nr="278" mi="0" ci="1" mb="0" cb="0"/><line nr="279" mi="0" ci="2" mb="0" cb="0"/><line nr="284" mi="0" ci="27" mb="0" cb="0"/><line nr="285" mi="0" ci="27" mb="0" cb="0"/><line nr="286" mi="0" ci="27" mb="0" cb="0"/><line nr="287" mi="0" ci="27" mb="0" cb="0"/><line nr="288" mi="0" ci="27" mb="0" cb="0"/><line nr="289" mi="0" ci="27" mb="0" cb="0"/><line nr="290" mi="0" ci="12" mb="0" cb="0"/><line nr="302" mi="0" ci="10" mb="0" cb="0"/><line nr="303" mi="0" ci="20" mb="0" cb="0"/><line nr="304" mi="0" ci="3" mb="0" cb="0"/><line nr="329" mi="0" ci="4" mb="0" cb="0"/><line nr="330" mi="0" ci="4" mb="0" cb="0"/><line nr="331" mi="0" ci="8" mb="0" cb="0"/><line nr="332" mi="0" ci="3" mb="0" cb="0"/><line nr="333" mi="0" ci="8" mb="0" cb="0"/><line nr="334" mi="0" ci="3" mb="0" cb="0"/><line nr="335" mi="0" ci="2" mb="0" cb="0"/><line nr="336" mi="0" ci="12" mb="0" cb="0"/><line nr="337" mi="0" ci="8" mb="0" cb="0"/><line nr="338" mi="0" ci="4" mb="0" cb="0"/><line nr="339" mi="0" ci="4" mb="0" cb="0"/><line nr="340" mi="0" ci="8" mb="0" cb="4"/><line nr="341" mi="0" ci="13" mb="0" cb="2"/><line nr="342" mi="0" ci="13" mb="0" cb="2"/><line nr="343" mi="0" ci="8" mb="0" cb="0"/><line nr="345" mi="0" ci="1" mb="0" cb="0"/><line nr="346" mi="0" ci="3" mb="0" cb="0"/><line nr="358" mi="0" ci="8" mb="0" cb="0"/><line nr="359" mi="0" ci="10" mb="0" cb="0"/><line nr="360" mi="0" ci="5" mb="0" cb="0"/><line nr="372" mi="0" ci="8" mb="0" cb="0"/><line nr="373" mi="0" ci="10" mb="0" cb="0"/><line nr="374" mi="0" ci="5" mb="0" cb="0"/><line nr="386" mi="0" ci="11" mb="0" cb="0"/><line nr="399" mi="0" ci="7" mb="0" cb="0"/><line nr="418" mi="0" ci="4" mb="0" cb="0"/><line nr="419" mi="0" ci="14" mb="0" cb="4"/><line nr="421" mi="0" ci="8" mb="0" cb="0"/><line nr="441" mi="0" ci="8" mb="0" cb="2"/><line nr="442" mi="0" ci="9" mb="0" cb="0"/><line nr="468" mi="0" ci="4" mb="0" cb="0"/><line nr="469" mi="0" ci="14" mb="0" cb="4"/><line nr="471" mi="0" ci="8" mb="0" cb="2"/><line nr="472" mi="0" ci="10" mb="0" cb="0"/><line nr="483" mi="0" ci="11" mb="0" cb="0"/><line nr="496" mi="0" ci="23" mb="0" cb="4"/><line nr="497" mi="0" ci="15" mb="0" cb="4"/><line nr="510" mi="0" ci="23" mb="0" cb="4"/><line nr="511" mi="0" ci="15" mb="0" cb="4"/><line nr="525" mi="0" ci="6" mb="0" cb="2"/><line nr="526" mi="0" ci="17" mb="0" cb="2"/><line nr="527" mi="0" ci="15" mb="0" cb="4"/><line nr="541" mi="0" ci="3" mb="0" cb="2"/><line nr="542" mi="0" ci="3" mb="0" cb="0"/><line nr="543" mi="0" ci="12" mb="0" cb="4"/><line nr="544" mi="0" ci="4" mb="1" cb="1"/><line nr="545" mi="0" ci="6" mb="1" cb="1"/><line nr="547" mi="0" ci="2" mb="0" cb="0"/><line nr="565" mi="0" ci="8" mb="0" cb="2"/><line nr="566" mi="0" ci="8" mb="0" cb="2"/><line nr="567" mi="0" ci="7" mb="0" cb="0"/><line nr="579" mi="0" ci="4" mb="0" cb="0"/><line nr="580" mi="0" ci="1" mb="0" cb="0"/><line nr="593" mi="0" ci="13" mb="0" cb="0"/><line nr="594" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1251"/><counter type="BRANCH" missed="3" covered="89"/><counter type="LINE" missed="0" covered="154"/><counter type="COMPLEXITY" missed="3" covered="92"/><counter type="METHOD" missed="0" covered="49"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractVectorBuilder.java"><line nr="48" mi="0" ci="5" mb="0" cb="0"/><line nr="55" mi="0" ci="2" mb="0" cb="0"/><line nr="56" mi="1" ci="7" mb="1" cb="1"/><line nr="57" mi="0" ci="3" mb="0" cb="0"/><line nr="58" mi="0" ci="1" mb="0" cb="0"/><line nr="74" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="1" ci="16" mb="2" cb="2"/><line nr="76" mi="0" ci="5" mb="0" cb="0"/><line nr="94" mi="0" ci="4" mb="0" cb="0"/><line nr="95" mi="0" ci="6" mb="0" cb="0"/><line nr="96" mi="1" ci="13" mb="1" cb="1"/><line nr="97" mi="0" ci="7" mb="0" cb="0"/><line nr="100" mi="0" ci="2" mb="0" cb="0"/><line nr="102" mi="0" ci="2" mb="0" cb="0"/><line nr="122" mi="0" ci="4" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="17" mb="0" cb="4"/><line nr="125" mi="0" ci="6" mb="0" cb="0"/><line nr="128" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="144" mi="0" ci="4" mb="0" cb="0"/><line nr="145" mi="0" ci="16" mb="0" cb="0"/><line nr="148" mi="0" ci="2" mb="0" cb="0"/><line nr="150" mi="0" ci="2" mb="0" cb="0"/><line nr="165" mi="4" ci="0" mb="0" cb="0"/><line nr="166" mi="7" ci="0" mb="0" cb="0"/><line nr="167" mi="3" ci="0" mb="2" cb="0"/><line nr="168" mi="8" ci="0" mb="0" cb="0"/><line nr="170" mi="1" ci="0" mb="0" cb="0"/><line nr="173" mi="2" ci="0" mb="0" cb="0"/><line nr="175" mi="2" ci="0" mb="0" cb="0"/><line nr="180" mi="0" ci="12" mb="0" cb="0"/><line nr="184" mi="0" ci="3" mb="0" cb="0"/><line nr="188" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="30" covered="154"/><counter type="BRANCH" missed="6" covered="8"/><counter type="LINE" missed="7" covered="27"/><counter type="COMPLEXITY" missed="7" covered="11"/><counter type="METHOD" missed="2" covered="9"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigDecimalVector.java"><line nr="40" mi="0" ci="3" mb="0" cb="0"/><line nr="41" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="0" ci="4" mb="0" cb="0"/><line nr="56" mi="0" ci="15" mb="0" cb="2"/><line nr="57" mi="0" ci="1" mb="0" cb="0"/><line nr="58" mi="0" ci="5" mb="0" cb="0"/><line nr="59" mi="0" ci="17" mb="0" cb="0"/><line nr="60" mi="0" ci="3" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="15" mb="0" cb="2"/><line nr="77" mi="0" ci="1" mb="0" cb="0"/><line nr="78" mi="0" ci="5" mb="0" cb="0"/><line nr="79" mi="0" ci="17" mb="0" cb="0"/><line nr="80" mi="0" ci="3" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="0" ci="16" mb="0" cb="2"/><line nr="99" mi="0" ci="20" mb="0" cb="0"/><line nr="100" mi="0" ci="3" mb="0" cb="0"/><line nr="116" mi="0" ci="4" mb="0" cb="0"/><line nr="117" mi="0" ci="5" mb="0" cb="0"/><line nr="118" mi="0" ci="15" mb="0" cb="0"/><line nr="119" mi="0" ci="3" mb="0" cb="0"/><line nr="131" mi="0" ci="5" mb="0" cb="0"/><line nr="142" mi="0" ci="11" mb="0" cb="0"/><line nr="154" mi="0" ci="4" mb="0" cb="0"/><line nr="167" mi="0" ci="7" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="187" mi="0" ci="14" mb="0" cb="4"/><line nr="189" mi="0" ci="8" mb="0" cb="0"/><line nr="211" mi="0" ci="8" mb="0" cb="2"/><line nr="212" mi="0" ci="4" mb="0" cb="0"/><line nr="213" mi="0" ci="9" mb="0" cb="0"/><line nr="241" mi="0" ci="4" mb="0" cb="0"/><line nr="242" mi="0" ci="14" mb="0" cb="4"/><line nr="244" mi="0" ci="8" mb="0" cb="2"/><line nr="245" mi="0" ci="4" mb="0" cb="0"/><line nr="246" mi="0" ci="10" mb="0" cb="0"/><line nr="266" mi="0" ci="4" mb="0" cb="0"/><line nr="267" mi="0" ci="16" mb="0" cb="2"/><line nr="268" mi="0" ci="9" mb="0" cb="0"/><line nr="294" mi="0" ci="4" mb="0" cb="0"/><line nr="295" mi="0" ci="16" mb="0" cb="2"/><line nr="296" mi="0" ci="4" mb="0" cb="0"/><line nr="297" mi="0" ci="14" mb="0" cb="4"/><line nr="299" mi="0" ci="10" mb="0" cb="0"/><line nr="329" mi="0" ci="4" mb="0" cb="0"/><line nr="330" mi="0" ci="16" mb="0" cb="2"/><line nr="331" mi="0" ci="8" mb="0" cb="2"/><line nr="332" mi="0" ci="4" mb="0" cb="0"/><line nr="333" mi="0" ci="11" mb="0" cb="0"/><line nr="369" mi="0" ci="4" mb="0" cb="0"/><line nr="370" mi="0" ci="16" mb="0" cb="2"/><line nr="371" mi="0" ci="4" mb="0" cb="0"/><line nr="372" mi="0" ci="14" mb="0" cb="4"/><line nr="374" mi="0" ci="8" mb="0" cb="2"/><line nr="375" mi="0" ci="4" mb="0" cb="0"/><line nr="376" mi="0" ci="12" mb="0" cb="0"/><line nr="387" mi="0" ci="11" mb="0" cb="0"/><line nr="400" mi="7" ci="0" mb="0" cb="0"/><line nr="401" mi="20" ci="0" mb="4" cb="0"/><line nr="413" mi="0" ci="8" mb="0" cb="2"/><line nr="414" mi="0" ci="6" mb="0" cb="0"/><line nr="426" mi="0" ci="3" mb="0" cb="0"/><line nr="427" mi="0" ci="1" mb="0" cb="0"/><line nr="440" mi="0" ci="10" mb="0" cb="0"/><line nr="441" mi="0" ci="11" mb="0" cb="0"/><line nr="442" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="27" covered="518"/><counter type="BRANCH" missed="4" covered="40"/><counter type="LINE" missed="2" covered="65"/><counter type="COMPLEXITY" missed="4" covered="45"/><counter type="METHOD" missed="2" covered="25"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigIntegerMatrix.java"><line nr="48" mi="0" ci="3" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="14" mb="0" cb="2"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="14" mb="0" cb="2"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="6" mb="0" cb="0"/><line nr="74" mi="0" ci="7" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="14" mb="0" cb="0"/><line nr="78" mi="0" ci="1" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="14" mb="0" cb="2"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="14" mb="0" cb="2"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="6" mb="0" cb="0"/><line nr="105" mi="0" ci="7" mb="0" cb="0"/><line nr="106" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="14" mb="0" cb="0"/><line nr="109" mi="0" ci="1" mb="0" cb="0"/><line nr="110" mi="0" ci="3" mb="0" cb="0"/><line nr="128" mi="0" ci="4" mb="0" cb="0"/><line nr="129" mi="0" ci="14" mb="0" cb="2"/><line nr="130" mi="0" ci="4" mb="0" cb="0"/><line nr="131" mi="0" ci="8" mb="0" cb="0"/><line nr="132" mi="0" ci="17" mb="0" cb="0"/><line nr="133" mi="0" ci="5" mb="0" cb="0"/><line nr="134" mi="0" ci="6" mb="0" cb="0"/><line nr="135" mi="0" ci="1" mb="0" cb="0"/><line nr="136" mi="0" ci="3" mb="0" cb="0"/><line nr="155" mi="0" ci="4" mb="0" cb="0"/><line nr="156" mi="0" ci="14" mb="0" cb="2"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="0" ci="6" mb="0" cb="0"/><line nr="159" mi="0" ci="9" mb="0" cb="0"/><line nr="160" mi="0" ci="7" mb="0" cb="0"/><line nr="161" mi="0" ci="13" mb="0" cb="0"/><line nr="162" mi="0" ci="3" mb="0" cb="0"/><line nr="163" mi="0" ci="4" mb="0" cb="0"/><line nr="164" mi="0" ci="1" mb="0" cb="0"/><line nr="165" mi="0" ci="3" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="1" ci="12" mb="1" cb="1"/><line nr="174" mi="0" ci="1" mb="0" cb="0"/><line nr="175" mi="0" ci="2" mb="0" cb="0"/><line nr="176" mi="0" ci="11" mb="0" cb="2"/><line nr="177" mi="0" ci="12" mb="0" cb="0"/><line nr="178" mi="0" ci="1" mb="0" cb="0"/><line nr="179" mi="0" ci="2" mb="0" cb="0"/><line nr="196" mi="0" ci="4" mb="0" cb="0"/><line nr="197" mi="0" ci="10" mb="0" cb="0"/><line nr="198" mi="0" ci="6" mb="0" cb="0"/><line nr="199" mi="0" ci="17" mb="0" cb="0"/><line nr="200" mi="0" ci="3" mb="0" cb="0"/><line nr="212" mi="0" ci="5" mb="0" cb="0"/><line nr="223" mi="0" ci="10" mb="0" cb="0"/><line nr="224" mi="0" ci="2" mb="0" cb="0"/><line nr="225" mi="0" ci="20" mb="0" cb="2"/><line nr="226" mi="0" ci="5" mb="0" cb="0"/><line nr="241" mi="0" ci="5" mb="0" cb="0"/><line nr="242" mi="0" ci="9" mb="0" cb="0"/><line nr="243" mi="0" ci="3" mb="0" cb="2"/><line nr="244" mi="0" ci="20" mb="0" cb="2"/><line nr="245" mi="0" ci="5" mb="0" cb="0"/><line nr="247" mi="0" ci="3" mb="0" cb="2"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="250" mi="0" ci="3" mb="0" cb="2"/><line nr="251" mi="0" ci="3" mb="0" cb="0"/><line nr="255" mi="0" ci="36" mb="0" cb="0"/><line nr="260" mi="0" ci="2" mb="0" cb="0"/><line nr="261" mi="0" ci="13" mb="0" cb="2"/><line nr="262" mi="0" ci="2" mb="0" cb="0"/><line nr="263" mi="0" ci="2" mb="0" cb="0"/><line nr="264" mi="0" ci="5" mb="0" cb="0"/><line nr="265" mi="0" ci="7" mb="0" cb="2"/><line nr="266" mi="0" ci="5" mb="0" cb="0"/><line nr="267" mi="0" ci="9" mb="0" cb="2"/><line nr="268" mi="0" ci="7" mb="0" cb="2"/><line nr="269" mi="0" ci="1" mb="0" cb="0"/><line nr="272" mi="0" ci="12" mb="0" cb="0"/><line nr="274" mi="0" ci="9" mb="0" cb="0"/><line nr="275" mi="0" ci="1" mb="0" cb="0"/><line nr="276" mi="0" ci="2" mb="0" cb="0"/><line nr="281" mi="0" ci="27" mb="0" cb="0"/><line nr="282" mi="0" ci="27" mb="0" cb="0"/><line nr="283" mi="0" ci="27" mb="0" cb="0"/><line nr="284" mi="0" ci="27" mb="0" cb="0"/><line nr="285" mi="0" ci="27" mb="0" cb="0"/><line nr="286" mi="0" ci="27" mb="0" cb="0"/><line nr="287" mi="0" ci="12" mb="0" cb="0"/><line nr="299" mi="0" ci="10" mb="0" cb="0"/><line nr="300" mi="0" ci="20" mb="0" cb="0"/><line nr="301" mi="0" ci="3" mb="0" cb="0"/><line nr="326" mi="0" ci="4" mb="0" cb="0"/><line nr="327" mi="0" ci="4" mb="0" cb="0"/><line nr="328" mi="0" ci="8" mb="0" cb="0"/><line nr="329" mi="0" ci="3" mb="0" cb="0"/><line nr="330" mi="0" ci="8" mb="0" cb="0"/><line nr="331" mi="0" ci="3" mb="0" cb="0"/><line nr="332" mi="0" ci="14" mb="0" cb="0"/><line nr="333" mi="0" ci="8" mb="0" cb="0"/><line nr="334" mi="0" ci="4" mb="0" cb="0"/><line nr="335" mi="0" ci="4" mb="0" cb="0"/><line nr="336" mi="0" ci="8" mb="0" cb="4"/><line nr="337" mi="0" ci="13" mb="0" cb="2"/><line nr="338" mi="0" ci="13" mb="0" cb="2"/><line nr="339" mi="0" ci="8" mb="0" cb="0"/><line nr="341" mi="0" ci="1" mb="0" cb="0"/><line nr="342" mi="0" ci="3" mb="0" cb="0"/><line nr="353" mi="0" ci="8" mb="0" cb="0"/><line nr="354" mi="0" ci="12" mb="0" cb="0"/><line nr="355" mi="0" ci="3" mb="0" cb="0"/><line nr="366" mi="0" ci="8" mb="0" cb="0"/><line nr="367" mi="0" ci="12" mb="0" cb="0"/><line nr="368" mi="0" ci="3" mb="0" cb="0"/><line nr="379" mi="0" ci="15" mb="0" cb="0"/><line nr="392" mi="0" ci="7" mb="0" cb="0"/><line nr="411" mi="0" ci="4" mb="0" cb="0"/><line nr="412" mi="0" ci="14" mb="0" cb="4"/><line nr="414" mi="0" ci="8" mb="0" cb="0"/><line nr="436" mi="0" ci="8" mb="0" cb="2"/><line nr="437" mi="0" ci="4" mb="0" cb="0"/><line nr="438" mi="0" ci="9" mb="0" cb="0"/><line nr="466" mi="0" ci="4" mb="0" cb="0"/><line nr="467" mi="0" ci="14" mb="0" cb="4"/><line nr="469" mi="0" ci="8" mb="0" cb="2"/><line nr="470" mi="0" ci="4" mb="0" cb="0"/><line nr="471" mi="0" ci="10" mb="0" cb="0"/><line nr="482" mi="0" ci="11" mb="0" cb="0"/><line nr="495" mi="0" ci="23" mb="0" cb="4"/><line nr="496" mi="0" ci="15" mb="0" cb="4"/><line nr="509" mi="0" ci="23" mb="0" cb="4"/><line nr="510" mi="0" ci="15" mb="0" cb="4"/><line nr="524" mi="0" ci="6" mb="0" cb="2"/><line nr="525" mi="0" ci="17" mb="0" cb="2"/><line nr="526" mi="0" ci="15" mb="0" cb="4"/><line nr="540" mi="0" ci="3" mb="0" cb="2"/><line nr="541" mi="0" ci="3" mb="0" cb="0"/><line nr="542" mi="0" ci="13" mb="0" cb="4"/><line nr="544" mi="0" ci="2" mb="0" cb="0"/><line nr="562" mi="0" ci="8" mb="0" cb="2"/><line nr="563" mi="0" ci="8" mb="0" cb="2"/><line nr="564" mi="0" ci="7" mb="0" cb="0"/><line nr="576" mi="0" ci="4" mb="0" cb="0"/><line nr="577" mi="0" ci="1" mb="0" cb="0"/><line nr="590" mi="0" ci="13" mb="0" cb="0"/><line nr="591" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1253"/><counter type="BRANCH" missed="1" covered="87"/><counter type="LINE" missed="0" covered="153"/><counter type="COMPLEXITY" missed="1" covered="93"/><counter type="METHOD" missed="0" covered="50"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="Matrices.java"><line nr="58" mi="0" ci="8" mb="0" cb="2"/><line nr="59" mi="0" ci="8" mb="0" cb="2"/><line nr="60" mi="0" ci="8" mb="0" cb="0"/><line nr="74" mi="0" ci="8" mb="0" cb="2"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="16" mb="0" cb="0"/><line nr="77" mi="0" ci="6" mb="0" cb="0"/><line nr="95" mi="0" ci="8" mb="0" cb="2"/><line nr="96" mi="0" ci="8" mb="0" cb="2"/><line nr="97" mi="0" ci="8" mb="0" cb="0"/><line nr="111" mi="0" ci="8" mb="0" cb="2"/><line nr="112" mi="0" ci="4" mb="0" cb="0"/><line nr="113" mi="0" ci="16" mb="0" cb="0"/><line nr="114" mi="0" ci="6" mb="0" cb="0"/><line nr="133" mi="0" ci="8" mb="0" cb="2"/><line nr="134" mi="0" ci="8" mb="0" cb="2"/><line nr="135" mi="0" ci="8" mb="0" cb="0"/><line nr="149" mi="0" ci="8" mb="0" cb="2"/><line nr="150" mi="0" ci="4" mb="0" cb="0"/><line nr="151" mi="0" ci="16" mb="0" cb="0"/><line nr="152" mi="0" ci="6" mb="0" cb="0"/><line nr="170" mi="0" ci="8" mb="0" cb="2"/><line nr="171" mi="0" ci="8" mb="0" cb="2"/><line nr="172" mi="0" ci="8" mb="0" cb="0"/><line nr="186" mi="0" ci="8" mb="0" cb="2"/><line nr="187" mi="0" ci="4" mb="0" cb="0"/><line nr="188" mi="0" ci="16" mb="0" cb="0"/><line nr="189" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="232"/><counter type="BRANCH" missed="0" covered="24"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractMatrix.java"><line nr="54" mi="2" ci="6" mb="1" cb="1"/><line nr="64" mi="0" ci="2" mb="0" cb="0"/><line nr="65" mi="4" ci="4" mb="2" cb="2"/><line nr="66" mi="0" ci="3" mb="0" cb="0"/><line nr="67" mi="0" ci="1" mb="0" cb="0"/><line nr="120" mi="0" ci="13" mb="0" cb="2"/><line nr="134" mi="0" ci="10" mb="0" cb="4"/><line nr="152" mi="0" ci="10" mb="1" cb="3"/><line nr="170" mi="0" ci="12" mb="0" cb="4"/><line nr="185" mi="0" ci="13" mb="0" cb="4"/><line nr="196" mi="0" ci="4" mb="0" cb="0"/><line nr="207" mi="0" ci="4" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="9" mb="0" cb="0"/><line nr="233" mi="0" ci="3" mb="0" cb="0"/><line nr="234" mi="0" ci="9" mb="0" cb="0"/><line nr="235" mi="0" ci="3" mb="0" cb="0"/><line nr="236" mi="0" ci="6" mb="0" cb="0"/><line nr="247" mi="0" ci="4" mb="0" cb="0"/><line nr="265" mi="0" ci="4" mb="0" cb="0"/><line nr="266" mi="0" ci="9" mb="0" cb="0"/><line nr="267" mi="0" ci="3" mb="0" cb="0"/><line nr="268" mi="0" ci="5" mb="0" cb="0"/><line nr="286" mi="0" ci="4" mb="0" cb="0"/><line nr="287" mi="0" ci="9" mb="0" cb="0"/><line nr="288" mi="0" ci="3" mb="0" cb="0"/><line nr="289" mi="0" ci="5" mb="0" cb="0"/><line nr="300" mi="0" ci="4" mb="0" cb="0"/><line nr="311" mi="0" ci="4" mb="0" cb="0"/><line nr="322" mi="0" ci="4" mb="0" cb="0"/><line nr="332" mi="0" ci="16" mb="0" cb="0"/><line nr="343" mi="0" ci="5" mb="0" cb="0"/><line nr="354" mi="0" ci="5" mb="0" cb="0"/><line nr="359" mi="0" ci="9" mb="0" cb="0"/><line nr="364" mi="0" ci="3" mb="0" cb="2"/><line nr="365" mi="0" ci="2" mb="0" cb="0"/><line nr="367" mi="0" ci="3" mb="0" cb="2"/><line nr="368" mi="0" ci="2" mb="0" cb="0"/><line nr="370" mi="0" ci="3" mb="0" cb="0"/><line nr="371" mi="0" ci="6" mb="0" cb="0"/><line nr="376" mi="0" ci="8" mb="0" cb="0"/><line nr="380" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="243"/><counter type="BRANCH" missed="4" covered="24"/><counter type="LINE" missed="0" covered="43"/><counter type="COMPLEXITY" missed="4" covered="33"/><counter type="METHOD" missed="0" covered="23"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractVector.java"><line nr="57" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="0"/><line nr="59" mi="0" ci="3" mb="0" cb="0"/><line nr="60" mi="0" ci="1" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="10" mb="0" cb="0"/><line nr="78" mi="0" ci="5" mb="0" cb="0"/><line nr="90" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="16" mb="0" cb="2"/><line nr="134" mi="0" ci="5" mb="0" cb="0"/><line nr="163" mi="0" ci="4" mb="0" cb="0"/><line nr="164" mi="0" ci="16" mb="0" cb="2"/><line nr="165" mi="0" ci="5" mb="0" cb="0"/><line nr="194" mi="0" ci="4" mb="0" cb="0"/><line nr="195" mi="0" ci="16" mb="0" cb="2"/><line nr="196" mi="0" ci="5" mb="0" cb="0"/><line nr="206" mi="0" ci="4" mb="0" cb="0"/><line nr="211" mi="0" ci="9" mb="0" cb="0"/><line nr="216" mi="0" ci="3" mb="0" cb="2"/><line nr="217" mi="0" ci="2" mb="0" cb="0"/><line nr="219" mi="0" ci="3" mb="0" cb="2"/><line nr="220" mi="0" ci="2" mb="0" cb="0"/><line nr="222" mi="0" ci="3" mb="0" cb="0"/><line nr="223" mi="0" ci="6" mb="0" cb="0"/><line nr="228" mi="0" ci="8" mb="0" cb="0"/><line nr="232" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="155"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="17"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumberVector.java"><line nr="42" mi="0" ci="3" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="0" ci="4" mb="0" cb="0"/><line nr="60" mi="0" ci="15" mb="0" cb="2"/><line nr="61" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="5" mb="0" cb="0"/><line nr="63" mi="0" ci="17" mb="0" cb="0"/><line nr="64" mi="0" ci="3" mb="0" cb="0"/><line nr="82" mi="0" ci="4" mb="0" cb="0"/><line nr="83" mi="0" ci="15" mb="0" cb="2"/><line nr="84" mi="0" ci="1" mb="0" cb="0"/><line nr="85" mi="0" ci="5" mb="0" cb="0"/><line nr="86" mi="0" ci="17" mb="0" cb="0"/><line nr="87" mi="0" ci="3" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="5" mb="0" cb="0"/><line nr="105" mi="0" ci="15" mb="0" cb="0"/><line nr="106" mi="0" ci="3" mb="0" cb="0"/><line nr="118" mi="0" ci="5" mb="0" cb="0"/><line nr="129" mi="0" ci="11" mb="0" cb="0"/><line nr="141" mi="0" ci="11" mb="0" cb="0"/><line nr="154" mi="0" ci="7" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="0" ci="14" mb="0" cb="4"/><line nr="176" mi="0" ci="8" mb="0" cb="0"/><line nr="196" mi="0" ci="8" mb="0" cb="2"/><line nr="197" mi="0" ci="9" mb="0" cb="0"/><line nr="223" mi="0" ci="4" mb="0" cb="0"/><line nr="224" mi="0" ci="14" mb="0" cb="4"/><line nr="226" mi="0" ci="8" mb="0" cb="2"/><line nr="227" mi="0" ci="10" mb="0" cb="0"/><line nr="245" mi="0" ci="4" mb="0" cb="0"/><line nr="246" mi="0" ci="16" mb="0" cb="2"/><line nr="247" mi="0" ci="20" mb="0" cb="0"/><line nr="248" mi="0" ci="3" mb="0" cb="0"/><line nr="268" mi="0" ci="4" mb="0" cb="0"/><line nr="269" mi="0" ci="16" mb="0" cb="2"/><line nr="270" mi="0" ci="9" mb="0" cb="0"/><line nr="296" mi="0" ci="4" mb="0" cb="0"/><line nr="297" mi="0" ci="16" mb="0" cb="2"/><line nr="298" mi="0" ci="4" mb="0" cb="0"/><line nr="299" mi="0" ci="14" mb="0" cb="4"/><line nr="301" mi="0" ci="10" mb="0" cb="0"/><line nr="329" mi="0" ci="4" mb="0" cb="0"/><line nr="330" mi="0" ci="16" mb="0" cb="2"/><line nr="331" mi="0" ci="8" mb="0" cb="2"/><line nr="332" mi="0" ci="11" mb="0" cb="0"/><line nr="366" mi="0" ci="4" mb="0" cb="0"/><line nr="367" mi="0" ci="16" mb="0" cb="2"/><line nr="368" mi="0" ci="4" mb="0" cb="0"/><line nr="369" mi="0" ci="14" mb="0" cb="4"/><line nr="371" mi="0" ci="8" mb="0" cb="2"/><line nr="372" mi="0" ci="12" mb="0" cb="0"/><line nr="383" mi="0" ci="11" mb="0" cb="0"/><line nr="395" mi="0" ci="8" mb="0" cb="2"/><line nr="396" mi="0" ci="7" mb="0" cb="0"/><line nr="408" mi="0" ci="4" mb="0" cb="0"/><line nr="409" mi="0" ci="1" mb="0" cb="0"/><line nr="422" mi="0" ci="7" mb="1" cb="1"/><line nr="423" mi="5" ci="0" mb="0" cb="0"/><line nr="425" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="5" covered="497"/><counter type="BRANCH" missed="1" covered="41"/><counter type="LINE" missed="1" covered="60"/><counter type="COMPLEXITY" missed="1" covered="44"/><counter type="METHOD" missed="0" covered="24"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractMatrixBuilder.java"><line nr="53" mi="0" ci="2" mb="0" cb="0"/><line nr="54" mi="1" ci="7" mb="1" cb="1"/><line nr="55" mi="1" ci="7" mb="1" cb="1"/><line nr="56" mi="0" ci="8" mb="0" cb="0"/><line nr="57" mi="0" ci="8" mb="0" cb="0"/><line nr="58" mi="0" ci="5" mb="0" cb="0"/><line nr="59" mi="0" ci="1" mb="0" cb="0"/><line nr="85" mi="0" ci="4" mb="0" cb="0"/><line nr="86" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="4" mb="0" cb="0"/><line nr="88" mi="0" ci="9" mb="0" cb="0"/><line nr="89" mi="0" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="9" mb="0" cb="0"/><line nr="91" mi="0" ci="3" mb="0" cb="0"/><line nr="92" mi="0" ci="7" mb="0" cb="0"/><line nr="95" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="0" ci="2" mb="0" cb="0"/><line nr="112" mi="0" ci="4" mb="0" cb="0"/><line nr="113" mi="0" ci="7" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="2"/><line nr="115" mi="0" ci="11" mb="0" cb="0"/><line nr="117" mi="0" ci="1" mb="0" cb="0"/><line nr="120" mi="0" ci="2" mb="0" cb="0"/><line nr="122" mi="0" ci="2" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="6" mb="0" cb="0"/><line nr="138" mi="0" ci="18" mb="0" cb="0"/><line nr="141" mi="0" ci="2" mb="0" cb="0"/><line nr="143" mi="0" ci="2" mb="0" cb="0"/><line nr="148" mi="0" ci="8" mb="0" cb="0"/><line nr="152" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="158"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="0" covered="31"/><counter type="COMPLEXITY" missed="2" covered="10"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigDecimalMatrix.java"><line nr="46" mi="0" ci="3" mb="0" cb="0"/><line nr="47" mi="0" ci="1" mb="0" cb="0"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="14" mb="0" cb="2"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="14" mb="0" cb="2"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="6" mb="0" cb="0"/><line nr="72" mi="0" ci="7" mb="0" cb="0"/><line nr="73" mi="0" ci="4" mb="0" cb="0"/><line nr="74" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="0" ci="14" mb="0" cb="0"/><line nr="76" mi="0" ci="1" mb="0" cb="0"/><line nr="77" mi="0" ci="3" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="0" ci="14" mb="0" cb="2"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="14" mb="0" cb="2"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="6" mb="0" cb="0"/><line nr="103" mi="0" ci="7" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="14" mb="0" cb="0"/><line nr="107" mi="0" ci="1" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="127" mi="0" ci="14" mb="0" cb="2"/><line nr="128" mi="0" ci="4" mb="0" cb="0"/><line nr="129" mi="0" ci="8" mb="0" cb="0"/><line nr="130" mi="0" ci="17" mb="0" cb="0"/><line nr="131" mi="0" ci="5" mb="0" cb="0"/><line nr="132" mi="0" ci="6" mb="0" cb="0"/><line nr="133" mi="0" ci="1" mb="0" cb="0"/><line nr="134" mi="0" ci="3" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="154" mi="3" ci="11" mb="1" cb="1"/><line nr="155" mi="0" ci="4" mb="0" cb="0"/><line nr="156" mi="6" ci="0" mb="0" cb="0"/><line nr="157" mi="14" ci="0" mb="0" cb="0"/><line nr="158" mi="11" ci="0" mb="2" cb="0"/><line nr="159" mi="12" ci="0" mb="0" cb="0"/><line nr="160" mi="1" ci="0" mb="0" cb="0"/><line nr="161" mi="3" ci="0" mb="0" cb="0"/><line nr="167" mi="0" ci="4" mb="0" cb="0"/><line nr="168" mi="0" ci="4" mb="0" cb="0"/><line nr="169" mi="1" ci="12" mb="1" cb="1"/><line nr="170" mi="0" ci="1" mb="0" cb="0"/><line nr="171" mi="0" ci="2" mb="0" cb="0"/><line nr="172" mi="0" ci="11" mb="0" cb="2"/><line nr="173" mi="0" ci="12" mb="0" cb="0"/><line nr="174" mi="0" ci="1" mb="0" cb="0"/><line nr="175" mi="0" ci="2" mb="0" cb="0"/><line nr="192" mi="0" ci="4" mb="0" cb="0"/><line nr="193" mi="0" ci="10" mb="0" cb="0"/><line nr="194" mi="0" ci="6" mb="0" cb="0"/><line nr="195" mi="0" ci="17" mb="0" cb="0"/><line nr="196" mi="0" ci="3" mb="0" cb="0"/><line nr="208" mi="0" ci="5" mb="0" cb="0"/><line nr="219" mi="0" ci="10" mb="0" cb="0"/><line nr="220" mi="0" ci="2" mb="0" cb="0"/><line nr="221" mi="0" ci="20" mb="0" cb="2"/><line nr="222" mi="0" ci="5" mb="0" cb="0"/><line nr="237" mi="0" ci="5" mb="0" cb="0"/><line nr="238" mi="0" ci="9" mb="0" cb="0"/><line nr="239" mi="0" ci="3" mb="0" cb="2"/><line nr="240" mi="0" ci="20" mb="0" cb="2"/><line nr="241" mi="0" ci="5" mb="0" cb="0"/><line nr="243" mi="0" ci="3" mb="0" cb="2"/><line nr="244" mi="0" ci="3" mb="0" cb="0"/><line nr="246" mi="0" ci="3" mb="0" cb="2"/><line nr="247" mi="0" ci="3" mb="0" cb="0"/><line nr="251" mi="0" ci="36" mb="0" cb="0"/><line nr="256" mi="0" ci="2" mb="0" cb="0"/><line nr="257" mi="0" ci="13" mb="0" cb="2"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="2" mb="0" cb="0"/><line nr="260" mi="0" ci="5" mb="0" cb="0"/><line nr="261" mi="0" ci="7" mb="0" cb="2"/><line nr="262" mi="0" ci="5" mb="0" cb="0"/><line nr="263" mi="0" ci="9" mb="0" cb="2"/><line nr="264" mi="0" ci="8" mb="0" cb="2"/><line nr="265" mi="0" ci="1" mb="0" cb="0"/><line nr="268" mi="0" ci="12" mb="0" cb="0"/><line nr="270" mi="0" ci="9" mb="0" cb="0"/><line nr="271" mi="0" ci="1" mb="0" cb="0"/><line nr="272" mi="0" ci="2" mb="0" cb="0"/><line nr="277" mi="0" ci="27" mb="0" cb="0"/><line nr="278" mi="0" ci="27" mb="0" cb="0"/><line nr="279" mi="0" ci="27" mb="0" cb="0"/><line nr="280" mi="0" ci="27" mb="0" cb="0"/><line nr="281" mi="0" ci="27" mb="0" cb="0"/><line nr="282" mi="0" ci="27" mb="0" cb="0"/><line nr="283" mi="0" ci="12" mb="0" cb="0"/><line nr="295" mi="0" ci="10" mb="0" cb="0"/><line nr="296" mi="0" ci="20" mb="0" cb="0"/><line nr="297" mi="0" ci="3" mb="0" cb="0"/><line nr="322" mi="0" ci="4" mb="0" cb="0"/><line nr="323" mi="0" ci="4" mb="0" cb="0"/><line nr="324" mi="0" ci="8" mb="0" cb="0"/><line nr="325" mi="0" ci="3" mb="0" cb="0"/><line nr="326" mi="0" ci="8" mb="0" cb="0"/><line nr="327" mi="0" ci="3" mb="0" cb="0"/><line nr="328" mi="0" ci="14" mb="0" cb="0"/><line nr="329" mi="0" ci="8" mb="0" cb="0"/><line nr="330" mi="0" ci="4" mb="0" cb="0"/><line nr="331" mi="0" ci="4" mb="0" cb="0"/><line nr="332" mi="0" ci="8" mb="0" cb="4"/><line nr="333" mi="0" ci="13" mb="0" cb="2"/><line nr="334" mi="0" ci="13" mb="0" cb="2"/><line nr="335" mi="0" ci="8" mb="0" cb="0"/><line nr="337" mi="0" ci="1" mb="0" cb="0"/><line nr="338" mi="0" ci="3" mb="0" cb="0"/><line nr="349" mi="0" ci="8" mb="0" cb="0"/><line nr="350" mi="0" ci="12" mb="0" cb="0"/><line nr="351" mi="0" ci="3" mb="0" cb="0"/><line nr="362" mi="0" ci="8" mb="0" cb="0"/><line nr="363" mi="0" ci="12" mb="0" cb="0"/><line nr="364" mi="0" ci="3" mb="0" cb="0"/><line nr="375" mi="0" ci="15" mb="0" cb="0"/><line nr="387" mi="0" ci="7" mb="0" cb="0"/><line nr="405" mi="0" ci="4" mb="0" cb="0"/><line nr="406" mi="0" ci="14" mb="0" cb="4"/><line nr="408" mi="0" ci="8" mb="0" cb="0"/><line nr="429" mi="0" ci="8" mb="0" cb="2"/><line nr="430" mi="0" ci="4" mb="0" cb="0"/><line nr="431" mi="0" ci="9" mb="0" cb="0"/><line nr="458" mi="0" ci="4" mb="0" cb="0"/><line nr="459" mi="0" ci="14" mb="0" cb="4"/><line nr="461" mi="0" ci="8" mb="0" cb="2"/><line nr="462" mi="0" ci="4" mb="0" cb="0"/><line nr="463" mi="0" ci="10" mb="0" cb="0"/><line nr="474" mi="0" ci="11" mb="0" cb="0"/><line nr="487" mi="0" ci="23" mb="0" cb="4"/><line nr="488" mi="0" ci="15" mb="0" cb="4"/><line nr="501" mi="0" ci="23" mb="0" cb="4"/><line nr="502" mi="0" ci="15" mb="0" cb="4"/><line nr="516" mi="0" ci="6" mb="0" cb="2"/><line nr="517" mi="0" ci="17" mb="0" cb="2"/><line nr="518" mi="2" ci="13" mb="2" cb="2"/><line nr="531" mi="0" ci="12" mb="0" cb="4"/><line nr="549" mi="0" ci="8" mb="0" cb="2"/><line nr="550" mi="0" ci="8" mb="0" cb="2"/><line nr="551" mi="0" ci="7" mb="0" cb="0"/><line nr="563" mi="0" ci="4" mb="0" cb="0"/><line nr="564" mi="0" ci="1" mb="0" cb="0"/><line nr="577" mi="0" ci="13" mb="0" cb="0"/><line nr="578" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="53" covered="1194"/><counter type="BRANCH" missed="6" covered="82"/><counter type="LINE" missed="6" covered="142"/><counter type="COMPLEXITY" missed="7" covered="87"/><counter type="METHOD" missed="2" covered="48"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="RealComplexNumberVector.java"><line nr="42" mi="0" ci="3" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="0" ci="4" mb="0" cb="0"/><line nr="60" mi="0" ci="15" mb="0" cb="2"/><line nr="61" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="5" mb="0" cb="0"/><line nr="63" mi="0" ci="17" mb="0" cb="0"/><line nr="64" mi="0" ci="3" mb="0" cb="0"/><line nr="82" mi="0" ci="4" mb="0" cb="0"/><line nr="83" mi="0" ci="15" mb="0" cb="2"/><line nr="84" mi="0" ci="1" mb="0" cb="0"/><line nr="85" mi="0" ci="5" mb="0" cb="0"/><line nr="86" mi="0" ci="17" mb="0" cb="0"/><line nr="87" mi="0" ci="3" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="5" mb="0" cb="0"/><line nr="105" mi="0" ci="15" mb="0" cb="0"/><line nr="106" mi="0" ci="3" mb="0" cb="0"/><line nr="118" mi="0" ci="5" mb="0" cb="0"/><line nr="129" mi="0" ci="11" mb="0" cb="0"/><line nr="141" mi="0" ci="11" mb="0" cb="0"/><line nr="154" mi="0" ci="7" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="0" ci="14" mb="0" cb="4"/><line nr="176" mi="0" ci="8" mb="0" cb="0"/><line nr="198" mi="0" ci="8" mb="0" cb="2"/><line nr="199" mi="0" ci="4" mb="0" cb="0"/><line nr="200" mi="0" ci="9" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="0" ci="14" mb="0" cb="4"/><line nr="231" mi="0" ci="8" mb="0" cb="2"/><line nr="232" mi="0" ci="4" mb="0" cb="0"/><line nr="233" mi="0" ci="10" mb="0" cb="0"/><line nr="251" mi="0" ci="4" mb="0" cb="0"/><line nr="252" mi="0" ci="16" mb="0" cb="2"/><line nr="253" mi="0" ci="20" mb="0" cb="0"/><line nr="254" mi="0" ci="3" mb="0" cb="0"/><line nr="274" mi="0" ci="4" mb="0" cb="0"/><line nr="275" mi="0" ci="16" mb="0" cb="2"/><line nr="276" mi="0" ci="9" mb="0" cb="0"/><line nr="302" mi="0" ci="4" mb="0" cb="0"/><line nr="303" mi="0" ci="16" mb="0" cb="2"/><line nr="304" mi="0" ci="4" mb="0" cb="0"/><line nr="305" mi="0" ci="14" mb="0" cb="4"/><line nr="307" mi="0" ci="10" mb="0" cb="0"/><line nr="337" mi="0" ci="4" mb="0" cb="0"/><line nr="338" mi="0" ci="16" mb="0" cb="2"/><line nr="339" mi="0" ci="8" mb="0" cb="2"/><line nr="340" mi="0" ci="4" mb="0" cb="0"/><line nr="341" mi="0" ci="11" mb="0" cb="0"/><line nr="377" mi="0" ci="4" mb="0" cb="0"/><line nr="378" mi="0" ci="16" mb="0" cb="2"/><line nr="379" mi="0" ci="4" mb="0" cb="0"/><line nr="380" mi="0" ci="14" mb="0" cb="4"/><line nr="382" mi="0" ci="8" mb="0" cb="2"/><line nr="383" mi="0" ci="4" mb="0" cb="0"/><line nr="384" mi="0" ci="12" mb="0" cb="0"/><line nr="395" mi="0" ci="11" mb="0" cb="0"/><line nr="407" mi="0" ci="8" mb="0" cb="2"/><line nr="408" mi="0" ci="7" mb="0" cb="0"/><line nr="420" mi="0" ci="4" mb="0" cb="0"/><line nr="421" mi="0" ci="1" mb="0" cb="0"/><line nr="434" mi="0" ci="10" mb="0" cb="0"/><line nr="435" mi="0" ci="11" mb="0" cb="0"/><line nr="436" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="527"/><counter type="BRANCH" missed="0" covered="40"/><counter type="LINE" missed="0" covered="65"/><counter type="COMPLEXITY" missed="0" covered="45"/><counter type="METHOD" missed="0" covered="25"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigIntegerVector.java"><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="0" ci="1" mb="0" cb="0"/><line nr="58" mi="0" ci="4" mb="0" cb="0"/><line nr="59" mi="0" ci="15" mb="0" cb="2"/><line nr="60" mi="0" ci="1" mb="0" cb="0"/><line nr="61" mi="0" ci="5" mb="0" cb="0"/><line nr="62" mi="0" ci="17" mb="0" cb="0"/><line nr="63" mi="0" ci="3" mb="0" cb="0"/><line nr="80" mi="0" ci="4" mb="0" cb="0"/><line nr="81" mi="0" ci="15" mb="0" cb="2"/><line nr="82" mi="0" ci="1" mb="0" cb="0"/><line nr="83" mi="0" ci="5" mb="0" cb="0"/><line nr="84" mi="0" ci="17" mb="0" cb="0"/><line nr="85" mi="0" ci="3" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="5" mb="0" cb="0"/><line nr="103" mi="0" ci="15" mb="0" cb="0"/><line nr="104" mi="0" ci="3" mb="0" cb="0"/><line nr="116" mi="0" ci="5" mb="0" cb="0"/><line nr="127" mi="0" ci="2" mb="0" cb="0"/><line nr="128" mi="0" ci="12" mb="0" cb="2"/><line nr="129" mi="0" ci="5" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><line nr="131" mi="0" ci="2" mb="0" cb="0"/><line nr="143" mi="0" ci="4" mb="0" cb="0"/><line nr="156" mi="0" ci="7" mb="0" cb="0"/><line nr="175" mi="0" ci="4" mb="0" cb="0"/><line nr="176" mi="0" ci="14" mb="0" cb="4"/><line nr="178" mi="0" ci="8" mb="0" cb="0"/><line nr="200" mi="0" ci="8" mb="0" cb="2"/><line nr="201" mi="0" ci="4" mb="0" cb="0"/><line nr="202" mi="0" ci="9" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="0" ci="14" mb="0" cb="4"/><line nr="233" mi="0" ci="8" mb="0" cb="2"/><line nr="234" mi="0" ci="4" mb="0" cb="0"/><line nr="235" mi="0" ci="10" mb="0" cb="0"/><line nr="252" mi="0" ci="4" mb="0" cb="0"/><line nr="253" mi="0" ci="16" mb="0" cb="2"/><line nr="254" mi="0" ci="2" mb="0" cb="0"/><line nr="255" mi="0" ci="12" mb="0" cb="2"/><line nr="256" mi="0" ci="13" mb="0" cb="0"/><line nr="257" mi="0" ci="1" mb="0" cb="0"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="278" mi="0" ci="4" mb="0" cb="0"/><line nr="279" mi="0" ci="16" mb="0" cb="2"/><line nr="280" mi="0" ci="9" mb="0" cb="0"/><line nr="306" mi="0" ci="4" mb="0" cb="0"/><line nr="307" mi="0" ci="16" mb="0" cb="2"/><line nr="308" mi="0" ci="4" mb="0" cb="0"/><line nr="309" mi="0" ci="14" mb="0" cb="4"/><line nr="311" mi="0" ci="10" mb="0" cb="0"/><line nr="341" mi="0" ci="4" mb="0" cb="0"/><line nr="342" mi="0" ci="16" mb="0" cb="2"/><line nr="343" mi="0" ci="8" mb="0" cb="2"/><line nr="344" mi="0" ci="4" mb="0" cb="0"/><line nr="345" mi="0" ci="11" mb="0" cb="0"/><line nr="381" mi="0" ci="4" mb="0" cb="0"/><line nr="382" mi="0" ci="16" mb="0" cb="2"/><line nr="383" mi="0" ci="4" mb="0" cb="0"/><line nr="384" mi="0" ci="14" mb="0" cb="4"/><line nr="386" mi="0" ci="8" mb="0" cb="2"/><line nr="387" mi="0" ci="4" mb="0" cb="0"/><line nr="388" mi="0" ci="12" mb="0" cb="0"/><line nr="399" mi="0" ci="11" mb="0" cb="0"/><line nr="411" mi="0" ci="8" mb="0" cb="2"/><line nr="412" mi="0" ci="7" mb="0" cb="0"/><line nr="424" mi="0" ci="4" mb="0" cb="0"/><line nr="425" mi="0" ci="1" mb="0" cb="0"/><line nr="438" mi="0" ci="10" mb="0" cb="0"/><line nr="439" mi="0" ci="11" mb="0" cb="0"/><line nr="440" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="538"/><counter type="BRANCH" missed="0" covered="44"/><counter type="LINE" missed="0" covered="72"/><counter type="COMPLEXITY" missed="0" covered="46"/><counter type="METHOD" missed="0" covered="24"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="126" covered="8028"/><counter type="BRANCH" missed="28" covered="590"/><counter type="LINE" missed="16" covered="1027"/><counter type="COMPLEXITY" missed="30" covered="648"/><counter type="METHOD" missed="6" covered="363"/><counter type="CLASS" missed="0" covered="22"/></package><package name="com/github/ltennstedt/finnmath/core/number"><class name="com/github/ltennstedt/finnmath/core/number/RealComplexNumber$RealComplexNumberComparator"><method name="compare" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)I" line="856"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/PolarForm"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="76"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="88"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="102"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="117"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="136"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="153"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumer" desc="(Lch/obermuhlner/math/big/BigFloat$Context;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="158"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="165"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="170"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="182"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRadial" desc="()Ljava/math/BigDecimal;" line="186"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getAngular" desc="()Ljava/math/BigDecimal;" line="190"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="166"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="0" covered="18"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/RealComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="72"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="87"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="106"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="124"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="144"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="162"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="183"><counter type="INSTRUCTION" missed="52" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="211"><counter type="INSTRUCTION" missed="0" covered="69"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="244"><counter type="INSTRUCTION" missed="80" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="274"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="300"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(ILjava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="326"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="344"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="358"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="374"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="393"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="417"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="438"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invertible" desc="()Z" line="452"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="464"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigDecimal;" line="475"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="486"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="500"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="515"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(I)Ljava/math/BigDecimal;" line="535"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/RoundingMode;)Ljava/math/BigDecimal;" line="556"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="581"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="603"><counter type="INSTRUCTION" missed="6" covered="86"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="1" covered="11"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="()Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="631"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="651"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="672"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="697"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="720"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEqualToByComparingParts" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="739"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="752"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(JJ)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="768"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(DD)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="783"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="802"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="823"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="840"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="48"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="391" covered="693"/><counter type="BRANCH" missed="12" covered="48"/><counter type="LINE" missed="57" covered="89"/><counter type="COMPLEXITY" missed="18" covered="53"/><counter type="METHOD" missed="11" covered="30"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/Fraction"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="65"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="86"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="109"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="132"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="158"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="179"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="200"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="217"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="229"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="245"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)I" line="262"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="283"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="303"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThan" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="318"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThan" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="333"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="351"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="369"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="normalize" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="388"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="411"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="signum" desc="()I" line="423"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equivalent" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="439"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(JJ)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="461"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="487"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="496"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="501"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="513"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNumerator" desc="()Ljava/math/BigInteger;" line="517"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getDenominator" desc="()Ljava/math/BigInteger;" line="521"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="463"/><counter type="BRANCH" missed="0" covered="44"/><counter type="LINE" missed="0" covered="84"/><counter type="COMPLEXITY" missed="0" covered="51"/><counter type="METHOD" missed="0" covered="29"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/SimpleComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="63"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="78"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="94"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="111"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="137"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="157"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="174"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="189"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="202"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="215"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigInteger;" line="226"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="237"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="251"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(I)Ljava/math/BigDecimal;" line="271"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/RoundingMode;)Ljava/math/BigDecimal;" line="292"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="317"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="339"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="()Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="355"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="375"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="396"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="421"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="443"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="457"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(JJ)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="477"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="496"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="46"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="508"/><counter type="BRANCH" missed="0" covered="36"/><counter type="LINE" missed="0" covered="67"/><counter type="COMPLEXITY" missed="0" covered="44"/><counter type="METHOD" missed="0" covered="26"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/AbstractComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="66"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/AbstractComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="86"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="121"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="126"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="138"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getReal" desc="()Ljava/lang/Object;" line="142"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getImaginary" desc="()Ljava/lang/Object;" line="146"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="50"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="91"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="18"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/ScientificNotation"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;I)V" line="64"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="asString" desc="()Ljava/lang/String;" line="76"><counter type="INSTRUCTION" missed="0" covered="62"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="93"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="98"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="110"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getCoefficient" desc="()Ljava/math/BigDecimal;" line="114"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getExponent" desc="()I" line="118"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="135"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="PolarForm.java"><line nr="76" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="0" ci="6" mb="0" cb="0"/><line nr="78" mi="0" ci="6" mb="0" cb="0"/><line nr="79" mi="0" ci="1" mb="0" cb="0"/><line nr="88" mi="0" ci="5" mb="0" cb="0"/><line nr="102" mi="0" ci="9" mb="0" cb="2"/><line nr="103" mi="0" ci="8" mb="0" cb="0"/><line nr="117" mi="0" ci="4" mb="0" cb="0"/><line nr="118" mi="0" ci="9" mb="0" cb="0"/><line nr="136" mi="0" ci="9" mb="0" cb="2"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="138" mi="0" ci="9" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="154" mi="0" ci="5" mb="0" cb="0"/><line nr="158" mi="0" ci="10" mb="0" cb="0"/><line nr="159" mi="0" ci="10" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="165" mi="0" ci="14" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="0" cb="2"/><line nr="171" mi="0" ci="2" mb="0" cb="0"/><line nr="173" mi="0" ci="3" mb="0" cb="2"/><line nr="174" mi="0" ci="2" mb="0" cb="0"/><line nr="176" mi="0" ci="3" mb="0" cb="0"/><line nr="177" mi="0" ci="16" mb="0" cb="4"/><line nr="182" mi="0" ci="12" mb="0" cb="0"/><line nr="186" mi="0" ci="3" mb="0" cb="0"/><line nr="190" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="166"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="0" covered="18"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="RealComplexNumber.java"><line nr="48" mi="0" ci="6" mb="0" cb="0"/><line nr="55" mi="0" ci="6" mb="0" cb="0"/><line nr="62" mi="0" ci="6" mb="0" cb="0"/><line nr="69" mi="0" ci="6" mb="0" cb="0"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="1" mb="0" cb="0"/><line nr="87" mi="0" ci="4" mb="0" cb="0"/><line nr="88" mi="0" ci="18" mb="0" cb="0"/><line nr="106" mi="4" ci="0" mb="0" cb="0"/><line nr="107" mi="4" ci="0" mb="0" cb="0"/><line nr="108" mi="15" ci="0" mb="0" cb="0"/><line nr="109" mi="5" ci="0" mb="0" cb="0"/><line nr="124" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="14" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="144" mi="4" ci="0" mb="0" cb="0"/><line nr="145" mi="4" ci="0" mb="0" cb="0"/><line nr="146" mi="15" ci="0" mb="0" cb="0"/><line nr="147" mi="5" ci="0" mb="0" cb="0"/><line nr="162" mi="0" ci="4" mb="0" cb="0"/><line nr="163" mi="0" ci="16" mb="0" cb="0"/><line nr="164" mi="0" ci="16" mb="0" cb="0"/><line nr="165" mi="0" ci="6" mb="0" cb="0"/><line nr="183" mi="4" ci="0" mb="0" cb="0"/><line nr="184" mi="4" ci="0" mb="0" cb="0"/><line nr="185" mi="12" ci="0" mb="0" cb="0"/><line nr="186" mi="7" ci="0" mb="0" cb="0"/><line nr="187" mi="12" ci="0" mb="0" cb="0"/><line nr="188" mi="7" ci="0" mb="0" cb="0"/><line nr="189" mi="6" ci="0" mb="0" cb="0"/><line nr="211" mi="0" ci="4" mb="0" cb="0"/><line nr="212" mi="0" ci="5" mb="0" cb="0"/><line nr="213" mi="0" ci="4" mb="0" cb="0"/><line nr="214" mi="0" ci="12" mb="0" cb="0"/><line nr="215" mi="0" ci="17" mb="0" cb="0"/><line nr="216" mi="0" ci="2" mb="0" cb="0"/><line nr="217" mi="0" ci="11" mb="0" cb="0"/><line nr="218" mi="0" ci="8" mb="0" cb="0"/><line nr="219" mi="0" ci="6" mb="0" cb="0"/><line nr="244" mi="4" ci="0" mb="0" cb="0"/><line nr="245" mi="5" ci="0" mb="0" cb="0"/><line nr="246" mi="9" ci="0" mb="2" cb="0"/><line nr="247" mi="4" ci="0" mb="0" cb="0"/><line nr="248" mi="12" ci="0" mb="0" cb="0"/><line nr="249" mi="18" ci="0" mb="0" cb="0"/><line nr="250" mi="2" ci="0" mb="0" cb="0"/><line nr="251" mi="11" ci="0" mb="0" cb="0"/><line nr="252" mi="9" ci="0" mb="0" cb="0"/><line nr="253" mi="6" ci="0" mb="0" cb="0"/><line nr="274" mi="4" ci="0" mb="0" cb="0"/><line nr="275" mi="5" ci="0" mb="0" cb="0"/><line nr="276" mi="4" ci="0" mb="0" cb="0"/><line nr="277" mi="1" ci="0" mb="0" cb="0"/><line nr="278" mi="14" ci="0" mb="0" cb="0"/><line nr="279" mi="12" ci="0" mb="0" cb="0"/><line nr="280" mi="10" ci="0" mb="0" cb="0"/><line nr="281" mi="12" ci="0" mb="0" cb="0"/><line nr="282" mi="10" ci="0" mb="0" cb="0"/><line nr="283" mi="6" ci="0" mb="0" cb="0"/><line nr="300" mi="0" ci="9" mb="0" cb="2"/><line nr="301" mi="0" ci="3" mb="0" cb="2"/><line nr="302" mi="0" ci="8" mb="0" cb="0"/><line nr="303" mi="0" ci="3" mb="0" cb="2"/><line nr="304" mi="0" ci="2" mb="0" cb="0"/><line nr="306" mi="0" ci="2" mb="0" cb="0"/><line nr="326" mi="9" ci="0" mb="2" cb="0"/><line nr="327" mi="4" ci="0" mb="0" cb="0"/><line nr="328" mi="3" ci="0" mb="2" cb="0"/><line nr="329" mi="10" ci="0" mb="0" cb="0"/><line nr="330" mi="3" ci="0" mb="2" cb="0"/><line nr="331" mi="2" ci="0" mb="0" cb="0"/><line nr="333" mi="2" ci="0" mb="0" cb="0"/><line nr="344" mi="0" ci="12" mb="0" cb="0"/><line nr="358" mi="4" ci="0" mb="0" cb="0"/><line nr="359" mi="14" ci="0" mb="0" cb="0"/><line nr="374" mi="0" ci="5" mb="0" cb="0"/><line nr="375" mi="0" ci="4" mb="0" cb="0"/><line nr="393" mi="5" ci="0" mb="0" cb="0"/><line nr="394" mi="4" ci="0" mb="0" cb="0"/><line nr="395" mi="5" ci="0" mb="0" cb="0"/><line nr="417" mi="5" ci="0" mb="0" cb="0"/><line nr="418" mi="9" ci="0" mb="2" cb="0"/><line nr="419" mi="4" ci="0" mb="0" cb="0"/><line nr="420" mi="6" ci="0" mb="0" cb="0"/><line nr="438" mi="5" ci="0" mb="0" cb="0"/><line nr="439" mi="4" ci="0" mb="0" cb="0"/><line nr="440" mi="5" ci="0" mb="0" cb="0"/><line nr="452" mi="0" ci="8" mb="0" cb="2"/><line nr="464" mi="0" ci="7" mb="0" cb="0"/><line nr="475" mi="0" ci="12" mb="0" cb="0"/><line nr="486" mi="0" ci="11" mb="0" cb="0"/><line nr="500" mi="4" ci="0" mb="0" cb="0"/><line nr="501" mi="12" ci="0" mb="0" cb="0"/><line nr="515" mi="0" ci="10" mb="0" cb="2"/><line nr="516" mi="0" ci="7" mb="0" cb="0"/><line nr="535" mi="0" ci="10" mb="0" cb="2"/><line nr="536" mi="0" ci="9" mb="0" cb="2"/><line nr="537" mi="0" ci="7" mb="0" cb="0"/><line nr="556" mi="0" ci="10" mb="0" cb="2"/><line nr="557" mi="0" ci="4" mb="0" cb="0"/><line nr="558" mi="0" ci="8" mb="0" cb="0"/><line nr="581" mi="0" ci="10" mb="0" cb="2"/><line nr="582" mi="0" ci="9" mb="0" cb="2"/><line nr="583" mi="0" ci="4" mb="0" cb="0"/><line nr="584" mi="0" ci="8" mb="0" cb="0"/><line nr="603" mi="0" ci="18" mb="0" cb="4"/><line nr="605" mi="0" ci="4" mb="0" cb="0"/><line nr="606" mi="0" ci="3" mb="0" cb="0"/><line nr="607" mi="0" ci="6" mb="0" cb="2"/><line nr="608" mi="0" ci="12" mb="0" cb="0"/><line nr="609" mi="0" ci="6" mb="0" cb="2"/><line nr="610" mi="0" ci="3" mb="0" cb="0"/><line nr="612" mi="0" ci="3" mb="0" cb="0"/><line nr="613" mi="0" ci="13" mb="1" cb="1"/><line nr="614" mi="4" ci="0" mb="0" cb="0"/><line nr="616" mi="0" ci="9" mb="0" cb="0"/><line nr="617" mi="2" ci="9" mb="1" cb="1"/><line nr="631" mi="0" ci="10" mb="0" cb="2"/><line nr="632" mi="0" ci="7" mb="0" cb="0"/><line nr="651" mi="0" ci="10" mb="0" cb="2"/><line nr="652" mi="0" ci="9" mb="0" cb="2"/><line nr="653" mi="0" ci="7" mb="0" cb="0"/><line nr="672" mi="0" ci="10" mb="0" cb="2"/><line nr="673" mi="0" ci="4" mb="0" cb="0"/><line nr="674" mi="0" ci="8" mb="0" cb="0"/><line nr="697" mi="0" ci="10" mb="0" cb="2"/><line nr="698" mi="0" ci="9" mb="0" cb="2"/><line nr="699" mi="0" ci="4" mb="0" cb="0"/><line nr="700" mi="0" ci="8" mb="0" cb="0"/><line nr="720" mi="0" ci="10" mb="0" cb="2"/><line nr="721" mi="0" ci="4" mb="0" cb="0"/><line nr="722" mi="0" ci="9" mb="0" cb="0"/><line nr="739" mi="0" ci="4" mb="0" cb="0"/><line nr="740" mi="0" ci="20" mb="0" cb="4"/><line nr="752" mi="0" ci="33" mb="0" cb="0"/><line nr="753" mi="0" ci="9" mb="0" cb="0"/><line nr="768" mi="0" ci="6" mb="0" cb="0"/><line nr="783" mi="0" ci="6" mb="0" cb="0"/><line nr="802" mi="0" ci="4" mb="0" cb="0"/><line nr="803" mi="0" ci="4" mb="0" cb="0"/><line nr="804" mi="0" ci="10" mb="0" cb="0"/><line nr="823" mi="0" ci="4" mb="0" cb="0"/><line nr="824" mi="0" ci="4" mb="0" cb="0"/><line nr="825" mi="0" ci="6" mb="0" cb="0"/><line nr="840" mi="0" ci="4" mb="0" cb="0"/><line nr="841" mi="0" ci="8" mb="0" cb="0"/><line nr="856" mi="0" ci="2" mb="0" cb="2"/><line nr="857" mi="0" ci="2" mb="0" cb="0"/><line nr="859" mi="0" ci="2" mb="0" cb="2"/><line nr="860" mi="0" ci="2" mb="0" cb="0"/><line nr="862" mi="0" ci="4" mb="0" cb="2"/><line nr="863" mi="0" ci="2" mb="0" cb="0"/><line nr="865" mi="0" ci="8" mb="0" cb="2"/><counter type="INSTRUCTION" missed="391" covered="715"/><counter type="BRANCH" missed="12" covered="56"/><counter type="LINE" missed="57" covered="96"/><counter type="COMPLEXITY" missed="18" covered="58"/><counter type="METHOD" missed="11" covered="31"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="ScientificNotation.java"><line nr="64" mi="0" ci="2" mb="0" cb="0"/><line nr="65" mi="0" ci="6" mb="0" cb="0"/><line nr="66" mi="0" ci="3" mb="0" cb="0"/><line nr="67" mi="0" ci="1" mb="0" cb="0"/><line nr="76" mi="0" ci="5" mb="0" cb="2"/><line nr="77" mi="0" ci="2" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="2"/><line nr="80" mi="0" ci="16" mb="0" cb="0"/><line nr="82" mi="0" ci="3" mb="0" cb="2"/><line nr="83" mi="0" ci="4" mb="0" cb="0"/><line nr="85" mi="0" ci="4" mb="0" cb="2"/><line nr="86" mi="0" ci="11" mb="0" cb="0"/><line nr="88" mi="0" ci="14" mb="0" cb="0"/><line nr="93" mi="0" ci="15" mb="0" cb="0"/><line nr="98" mi="0" ci="3" mb="0" cb="2"/><line nr="99" mi="0" ci="2" mb="0" cb="0"/><line nr="101" mi="0" ci="3" mb="0" cb="2"/><line nr="102" mi="0" ci="2" mb="0" cb="0"/><line nr="104" mi="0" ci="3" mb="0" cb="0"/><line nr="105" mi="0" ci="15" mb="0" cb="4"/><line nr="110" mi="0" ci="12" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="0"/><line nr="118" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="135"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Fraction.java"><line nr="42" mi="0" ci="6" mb="0" cb="0"/><line nr="49" mi="0" ci="7" mb="0" cb="0"/><line nr="65" mi="0" ci="2" mb="0" cb="0"/><line nr="66" mi="0" ci="3" mb="0" cb="0"/><line nr="67" mi="0" ci="3" mb="0" cb="0"/><line nr="68" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="1" mb="0" cb="0"/><line nr="88" mi="0" ci="11" mb="0" cb="0"/><line nr="89" mi="0" ci="6" mb="0" cb="0"/><line nr="90" mi="0" ci="6" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="1" mb="0" cb="0"/><line nr="111" mi="0" ci="11" mb="0" cb="0"/><line nr="112" mi="0" ci="6" mb="0" cb="0"/><line nr="113" mi="0" ci="6" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="6" mb="0" cb="0"/><line nr="134" mi="0" ci="6" mb="0" cb="0"/><line nr="135" mi="0" ci="6" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="5" mb="0" cb="0"/><line nr="160" mi="0" ci="5" mb="0" cb="0"/><line nr="179" mi="0" ci="9" mb="0" cb="2"/><line nr="180" mi="0" ci="3" mb="0" cb="2"/><line nr="181" mi="0" ci="8" mb="0" cb="0"/><line nr="182" mi="0" ci="3" mb="0" cb="2"/><line nr="183" mi="0" ci="2" mb="0" cb="0"/><line nr="185" mi="0" ci="2" mb="0" cb="0"/><line nr="200" mi="0" ci="9" mb="0" cb="0"/><line nr="217" mi="0" ci="5" mb="0" cb="0"/><line nr="218" mi="0" ci="8" mb="0" cb="0"/><line nr="229" mi="0" ci="9" mb="0" cb="2"/><line nr="245" mi="0" ci="10" mb="0" cb="0"/><line nr="262" mi="0" ci="4" mb="0" cb="0"/><line nr="263" mi="0" ci="4" mb="0" cb="2"/><line nr="264" mi="0" ci="2" mb="0" cb="0"/><line nr="266" mi="0" ci="4" mb="0" cb="2"/><line nr="267" mi="0" ci="2" mb="0" cb="0"/><line nr="269" mi="0" ci="2" mb="0" cb="0"/><line nr="283" mi="0" ci="4" mb="0" cb="0"/><line nr="284" mi="0" ci="3" mb="0" cb="0"/><line nr="285" mi="0" ci="3" mb="0" cb="0"/><line nr="286" mi="0" ci="6" mb="0" cb="0"/><line nr="287" mi="0" ci="6" mb="0" cb="0"/><line nr="288" mi="0" ci="9" mb="0" cb="2"/><line nr="303" mi="0" ci="4" mb="0" cb="0"/><line nr="304" mi="0" ci="12" mb="0" cb="4"/><line nr="318" mi="0" ci="4" mb="0" cb="0"/><line nr="319" mi="0" ci="8" mb="0" cb="2"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="8" mb="0" cb="2"/><line nr="351" mi="0" ci="4" mb="0" cb="0"/><line nr="352" mi="0" ci="8" mb="0" cb="2"/><line nr="369" mi="0" ci="4" mb="0" cb="0"/><line nr="370" mi="0" ci="8" mb="0" cb="2"/><line nr="388" mi="0" ci="3" mb="0" cb="2"/><line nr="389" mi="0" ci="11" mb="0" cb="0"/><line nr="391" mi="0" ci="3" mb="0" cb="2"/><line nr="392" mi="0" ci="2" mb="0" cb="0"/><line nr="394" mi="0" ci="5" mb="0" cb="2"/><line nr="395" mi="0" ci="3" mb="0" cb="0"/><line nr="397" mi="0" ci="2" mb="0" cb="0"/><line nr="411" mi="0" ci="6" mb="0" cb="0"/><line nr="412" mi="0" ci="12" mb="0" cb="0"/><line nr="423" mi="0" ci="8" mb="0" cb="0"/><line nr="439" mi="0" ci="4" mb="0" cb="0"/><line nr="440" mi="0" ci="8" mb="0" cb="0"/><line nr="461" mi="0" ci="10" mb="0" cb="2"/><line nr="462" mi="0" ci="6" mb="0" cb="0"/><line nr="487" mi="0" ci="4" mb="0" cb="0"/><line nr="488" mi="0" ci="4" mb="0" cb="0"/><line nr="489" mi="0" ci="10" mb="0" cb="2"/><line nr="491" mi="0" ci="6" mb="0" cb="0"/><line nr="496" mi="0" ci="14" mb="0" cb="0"/><line nr="501" mi="0" ci="3" mb="0" cb="2"/><line nr="502" mi="0" ci="2" mb="0" cb="0"/><line nr="504" mi="0" ci="3" mb="0" cb="2"/><line nr="505" mi="0" ci="2" mb="0" cb="0"/><line nr="507" mi="0" ci="3" mb="0" cb="0"/><line nr="508" mi="0" ci="16" mb="0" cb="4"/><line nr="513" mi="0" ci="12" mb="0" cb="0"/><line nr="517" mi="0" ci="3" mb="0" cb="0"/><line nr="521" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="463"/><counter type="BRANCH" missed="0" covered="44"/><counter type="LINE" missed="0" covered="84"/><counter type="COMPLEXITY" missed="0" covered="51"/><counter type="METHOD" missed="0" covered="29"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumber.java"><line nr="46" mi="0" ci="6" mb="0" cb="0"/><line nr="53" mi="0" ci="6" mb="0" cb="0"/><line nr="60" mi="0" ci="7" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="64" mi="0" ci="1" mb="0" cb="0"/><line nr="78" mi="0" ci="4" mb="0" cb="0"/><line nr="79" mi="0" ci="18" mb="0" cb="0"/><line nr="94" mi="0" ci="4" mb="0" cb="0"/><line nr="95" mi="0" ci="14" mb="0" cb="0"/><line nr="96" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="0" ci="4" mb="0" cb="0"/><line nr="112" mi="0" ci="16" mb="0" cb="0"/><line nr="113" mi="0" ci="16" mb="0" cb="0"/><line nr="114" mi="0" ci="6" mb="0" cb="0"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="138" mi="0" ci="5" mb="0" cb="0"/><line nr="139" mi="0" ci="4" mb="0" cb="0"/><line nr="140" mi="0" ci="7" mb="0" cb="0"/><line nr="157" mi="0" ci="9" mb="0" cb="2"/><line nr="158" mi="0" ci="3" mb="0" cb="2"/><line nr="159" mi="0" ci="8" mb="0" cb="0"/><line nr="160" mi="0" ci="3" mb="0" cb="2"/><line nr="161" mi="0" ci="2" mb="0" cb="0"/><line nr="163" mi="0" ci="2" mb="0" cb="0"/><line nr="174" mi="0" ci="12" mb="0" cb="0"/><line nr="189" mi="0" ci="5" mb="0" cb="0"/><line nr="190" mi="0" ci="4" mb="0" cb="0"/><line nr="202" mi="0" ci="8" mb="0" cb="2"/><line nr="215" mi="0" ci="7" mb="0" cb="0"/><line nr="226" mi="0" ci="12" mb="0" cb="0"/><line nr="237" mi="0" ci="11" mb="0" cb="0"/><line nr="251" mi="0" ci="10" mb="0" cb="2"/><line nr="252" mi="0" ci="7" mb="0" cb="0"/><line nr="271" mi="0" ci="10" mb="0" cb="2"/><line nr="272" mi="0" ci="9" mb="0" cb="2"/><line nr="273" mi="0" ci="7" mb="0" cb="0"/><line nr="292" mi="0" ci="10" mb="0" cb="2"/><line nr="293" mi="0" ci="4" mb="0" cb="0"/><line nr="294" mi="0" ci="8" mb="0" cb="0"/><line nr="317" mi="0" ci="10" mb="0" cb="2"/><line nr="318" mi="0" ci="9" mb="0" cb="2"/><line nr="319" mi="0" ci="4" mb="0" cb="0"/><line nr="320" mi="0" ci="8" mb="0" cb="0"/><line nr="339" mi="0" ci="10" mb="0" cb="2"/><line nr="340" mi="0" ci="4" mb="0" cb="0"/><line nr="341" mi="0" ci="5" mb="0" cb="0"/><line nr="355" mi="0" ci="10" mb="0" cb="2"/><line nr="356" mi="0" ci="7" mb="0" cb="0"/><line nr="375" mi="0" ci="10" mb="0" cb="2"/><line nr="376" mi="0" ci="9" mb="0" cb="2"/><line nr="377" mi="0" ci="7" mb="0" cb="0"/><line nr="396" mi="0" ci="10" mb="0" cb="2"/><line nr="397" mi="0" ci="4" mb="0" cb="0"/><line nr="398" mi="0" ci="8" mb="0" cb="0"/><line nr="421" mi="0" ci="10" mb="0" cb="2"/><line nr="422" mi="0" ci="9" mb="0" cb="2"/><line nr="423" mi="0" ci="4" mb="0" cb="0"/><line nr="424" mi="0" ci="8" mb="0" cb="0"/><line nr="443" mi="0" ci="10" mb="0" cb="2"/><line nr="444" mi="0" ci="4" mb="0" cb="0"/><line nr="445" mi="0" ci="5" mb="0" cb="0"/><line nr="457" mi="0" ci="33" mb="0" cb="0"/><line nr="458" mi="0" ci="9" mb="0" cb="0"/><line nr="477" mi="0" ci="6" mb="0" cb="0"/><line nr="496" mi="0" ci="4" mb="0" cb="0"/><line nr="497" mi="0" ci="4" mb="0" cb="0"/><line nr="498" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="508"/><counter type="BRANCH" missed="0" covered="36"/><counter type="LINE" missed="0" covered="67"/><counter type="COMPLEXITY" missed="0" covered="44"/><counter type="METHOD" missed="0" covered="26"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractComplexNumber.java"><line nr="50" mi="0" ci="3" mb="0" cb="0"/><line nr="66" mi="0" ci="2" mb="0" cb="0"/><line nr="67" mi="0" ci="5" mb="0" cb="0"/><line nr="68" mi="0" ci="5" mb="0" cb="0"/><line nr="69" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="5" mb="0" cb="0"/><line nr="88" mi="0" ci="5" mb="0" cb="0"/><line nr="121" mi="0" ci="14" mb="0" cb="0"/><line nr="126" mi="0" ci="3" mb="0" cb="2"/><line nr="127" mi="0" ci="2" mb="0" cb="0"/><line nr="129" mi="0" ci="3" mb="0" cb="2"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="3" mb="0" cb="0"/><line nr="133" mi="0" ci="16" mb="0" cb="4"/><line nr="138" mi="0" ci="12" mb="0" cb="0"/><line nr="142" mi="0" ci="3" mb="0" cb="0"/><line nr="146" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="91"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="18"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="391" covered="2078"/><counter type="BRANCH" missed="12" covered="172"/><counter type="LINE" missed="57" covered="315"/><counter type="COMPLEXITY" missed="18" covered="198"/><counter type="METHOD" missed="11" covered="113"/><counter type="CLASS" missed="0" covered="7"/></package><counter type="INSTRUCTION" missed="531" covered="16091"/><counter type="BRANCH" missed="50" covered="1416"/><counter type="LINE" missed="73" covered="2146"/><counter type="COMPLEXITY" missed="58" covered="1398"/><counter type="METHOD" missed="17" covered="706"/><counter type="CLASS" missed="0" covered="31"/></report>