<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="finnMath Core"><sessioninfo id="archlinux-972f41e6" start="1526065929043" dump="1526065963343"/><package name="com/github/ltennstedt/finnmath/core/util"><class name="com/github/ltennstedt/finnmath/core/util/MathRandom"><method name="&lt;init&gt;" desc="()V" line="70"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(J)V" line="81"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigInteger" desc="(J)Ljava/math/BigInteger;" line="97"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigInteger" desc="(J)Ljava/math/BigInteger;" line="114"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigInteger" desc="(J)Ljava/math/BigInteger;" line="132"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigIntegers" desc="(JI)Ljava/util/List;" line="153"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigIntegers" desc="(JI)Ljava/util/List;" line="177"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegers" desc="(JI)Ljava/util/List;" line="201"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="224"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="246"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="268"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="290"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="313"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="335"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keepBigDecimalInBound" desc="(Ljava/math/BigDecimal;J)Ljava/math/BigDecimal;" line="343"><counter type="INSTRUCTION" missed="8" covered="43"/><counter type="BRANCH" missed="4" covered="10"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="4" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigDecimals" desc="(JII)Ljava/util/List;" line="380"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigDecimals" desc="(JII)Ljava/util/List;" line="409"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimals" desc="(JII)Ljava/util/List;" line="438"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveBigDecimals" desc="(JII)Ljava/util/List;" line="467"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeBigDecimals" desc="(JII)Ljava/util/List;" line="496"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleBigDecimals" desc="(JII)Ljava/util/List;" line="525"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="547"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="567"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="585"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="601"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="619"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="635"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFractions" desc="(JI)Ljava/util/List;" line="656"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFractions" desc="(JI)Ljava/util/List;" line="680"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFractions" desc="(JI)Ljava/util/List;" line="704"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFractions" desc="(JI)Ljava/util/List;" line="728"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFractions" desc="(JI)Ljava/util/List;" line="752"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFractions" desc="(JI)Ljava/util/List;" line="776"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="797"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="813"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="838"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="863"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="885"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="906"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumbers" desc="(JII)Ljava/util/List;" line="937"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumbers" desc="(JII)Ljava/util/List;" line="968"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPolarForm" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="992"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPolarForms" desc="(JII)Ljava/util/List;" line="1019"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerVector" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="1043"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerVectors" desc="(JII)Ljava/util/List;" line="1070"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1098"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1125"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1156"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1188"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1210"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1240"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1272"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerMatrices" desc="(JIII)Ljava/util/List;" line="1316"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1349"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1381"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1413"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1444"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1475"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1507"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalVector" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="1535"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalVectors" desc="(JIII)Ljava/util/List;" line="1572"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalMatrix" desc="(JIII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1606"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1638"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1673"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1709"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1735"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1769"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1805"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalMatrices" desc="(JIIII)Ljava/util/List;" line="1853"><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1891"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1928"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1965"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2002"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2039"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2076"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberVector" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="2101"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberVectors" desc="(JII)Ljava/util/List;" line="2131"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2160"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2186"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2216"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2248"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2270"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2300"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2332"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="2377"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2411"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2444"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2477"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2509"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2541"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2573"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberVector" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="2601"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberVectors" desc="(JIII)Ljava/util/List;" line="2635"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberMatrix" desc="(JIII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2669"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2702"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2739"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2777"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2805"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2841"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2879"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberMatrices" desc="(JIIII)Ljava/util/List;" line="2929"><counter type="INSTRUCTION" missed="0" covered="61"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="2968"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3006"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3044"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3082"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3119"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3157"><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="3169"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRandom" desc="()Ljava/util/Random;" line="3174"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricRealComplexNumberMatrices$103" desc="(Ljava/util/List;JIII)V" line="3163"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricRealComplexNumberMatrices$102" desc="(Ljava/util/List;JIII)V" line="3125"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalRealComplexNumberMatrices$101" desc="(Ljava/util/List;JIII)V" line="3087"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextTriangularRealComplexNumberMatrices$100" desc="(Ljava/util/List;JIII)V" line="3050"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularRealComplexNumberMatrices$99" desc="(Ljava/util/List;JIII)V" line="3012"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularRealComplexNumberMatrices$98" desc="(Ljava/util/List;JIII)V" line="2974"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberMatrices$97" desc="(Ljava/util/List;JIIII)V" line="2936"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricRealComplexNumberMatrix$96" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2884"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricRealComplexNumberMatrix$95" desc="(Ljava/lang/Integer;JILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2885"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricRealComplexNumberMatrix$94" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2846"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricRealComplexNumberMatrix$93" desc="(JILjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2847"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalRealComplexNumberMatrix$92" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2810"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalRealComplexNumberMatrix$91" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2811"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularRealComplexNumberMatrix$90" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2744"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularRealComplexNumberMatrix$89" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2745"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularRealComplexNumberMatrix$88" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2707"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularRealComplexNumberMatrix$87" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2708"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberMatrix$86" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2675"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberMatrix$85" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="2676"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberVectors$84" desc="(Ljava/util/List;JIII)V" line="2640"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberVector$83" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;JII)V" line="2605"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricSimpleComplexNumberMatrices$82" desc="(Ljava/util/List;JII)V" line="2577"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricSimpleComplexNumberMatrices$81" desc="(Ljava/util/List;JII)V" line="2545"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalSimpleComplexNumberMatrices$80" desc="(Ljava/util/List;JII)V" line="2513"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextTriangularSimpleComplexNumberMatrices$79" desc="(Ljava/util/List;JII)V" line="2481"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularSimpleComplexNumberMatrices$78" desc="(Ljava/util/List;JII)V" line="2449"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularSimpleComplexNumberMatrices$77" desc="(Ljava/util/List;JII)V" line="2416"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberMatrices$76" desc="(Ljava/util/List;JIII)V" line="2383"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricSimpleComplexNumberMatrix$75" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2336"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricSimpleComplexNumberMatrix$74" desc="(Ljava/lang/Integer;JLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2337"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricSimpleComplexNumberMatrix$73" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2304"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricSimpleComplexNumberMatrix$72" desc="(JLjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2305"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalSimpleComplexNumberMatrix$71" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2274"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalSimpleComplexNumberMatrix$70" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2275"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularSimpleComplexNumberMatrix$69" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2220"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularSimpleComplexNumberMatrix$68" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2221"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularSimpleComplexNumberMatrix$67" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2190"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularSimpleComplexNumberMatrix$66" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2191"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberMatrix$65" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2165"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberMatrix$64" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="2166"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberVectors$63" desc="(Ljava/util/List;JII)V" line="2135"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberVector$62" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;JI)V" line="2105"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigDecimalMatrices$61" desc="(Ljava/util/List;JIII)V" line="2081"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigDecimalMatrices$60" desc="(Ljava/util/List;JIII)V" line="2044"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigDecimalMatrices$59" desc="(Ljava/util/List;JIII)V" line="2007"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextTriangularBigDecimalMatrices$58" desc="(Ljava/util/List;JIII)V" line="1970"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigDecimalMatrices$57" desc="(Ljava/util/List;JIII)V" line="1933"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigDecimalMatrices$56" desc="(Ljava/util/List;JIII)V" line="1896"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalMatrices$55" desc="(Ljava/util/List;JIIII)V" line="1859"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigDecimalMatrix$54" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1809"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigDecimalMatrix$53" desc="(Ljava/lang/Integer;JILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1810"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigDecimalMatrix$52" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1773"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigDecimalMatrix$51" desc="(JILjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1774"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigDecimalMatrix$50" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1739"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigDecimalMatrix$49" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1740"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigDecimalMatrix$48" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1677"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigDecimalMatrix$47" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1678"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigDecimalMatrix$46" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1642"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigDecimalMatrix$45" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1643"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalMatrix$44" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1612"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalMatrix$43" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="1613"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalVectors$42" desc="(Ljava/util/List;JIII)V" line="1577"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalVector$41" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;JII)V" line="1539"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntegerMatrices$40" desc="(Ljava/util/List;JII)V" line="1511"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntegerMatrices$39" desc="(Ljava/util/List;JII)V" line="1479"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntegerMatrices$38" desc="(Ljava/util/List;JII)V" line="1448"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextTriangularBigIntegerMatrices$37" desc="(Ljava/util/List;JII)V" line="1417"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntegerMatrices$36" desc="(Ljava/util/List;JII)V" line="1385"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntegerMatrices$35" desc="(Ljava/util/List;JII)V" line="1353"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerMatrices$34" desc="(Ljava/util/List;JIII)V" line="1321"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntegerMatrix$33" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1276"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntegerMatrix$32" desc="(Ljava/lang/Integer;JLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1277"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntegerMatrix$31" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1244"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntegerMatrix$30" desc="(JLjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1245"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntegerMatrix$29" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1214"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntegerMatrix$28" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1215"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntegerMatrix$27" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1160"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntegerMatrix$26" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1161"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntegerMatrix$25" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1129"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntegerMatrix$24" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1130"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerMatrix$23" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1103"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerMatrix$22" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="1104"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerVectors$21" desc="(Ljava/util/List;JII)V" line="1074"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerVector$20" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;JI)V" line="1046"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextPolarForms$19" desc="(Ljava/util/List;JII)V" line="1023"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleRealComplexNumbers$18" desc="(Ljava/util/List;JII)V" line="972"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumbers$17" desc="(Ljava/util/List;JII)V" line="941"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleSimpleComplexNumbers$16" desc="(Ljava/util/List;JI)V" line="866"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumbers$15" desc="(Ljava/util/List;JI)V" line="841"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleFractions$14" desc="(Ljava/util/List;JI)V" line="779"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleNegativeFractions$13" desc="(Ljava/util/List;JI)V" line="755"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertiblePositiveFractions$12" desc="(Ljava/util/List;JI)V" line="731"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextFractions$11" desc="(Ljava/util/List;JI)V" line="707"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextNegativeFractions$10" desc="(Ljava/util/List;JI)V" line="683"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextPositiveFractions$9" desc="(Ljava/util/List;JI)V" line="659"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleBigDecimals$8" desc="(Ljava/util/List;JII)V" line="529"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertibleNegativeBigDecimals$7" desc="(Ljava/util/List;JII)V" line="500"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextInvertiblePositiveBigDecimals$6" desc="(Ljava/util/List;JII)V" line="471"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimals$5" desc="(Ljava/util/List;JII)V" line="442"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextNegativeBigDecimals$4" desc="(Ljava/util/List;JII)V" line="413"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextPositiveBigDecimals$3" desc="(Ljava/util/List;JII)V" line="384"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegers$2" desc="(Ljava/util/List;JI)V" line="204"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextNegativeBigIntegers$1" desc="(Ljava/util/List;JI)V" line="180"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextPositiveBigIntegers$0" desc="(Ljava/util/List;JI)V" line="156"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="61"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="21" covered="5564"/><counter type="BRANCH" missed="12" covered="632"/><counter type="LINE" missed="0" covered="719"/><counter type="COMPLEXITY" missed="12" covered="524"/><counter type="METHOD" missed="0" covered="214"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="MathRandom.java"><line nr="61" mi="2" ci="6" mb="1" cb="1"/><line nr="70" mi="0" ci="2" mb="0" cb="0"/><line nr="71" mi="0" ci="5" mb="0" cb="0"/><line nr="72" mi="0" ci="1" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="82" mi="0" ci="6" mb="0" cb="0"/><line nr="83" mi="0" ci="1" mb="0" cb="0"/><line nr="97" mi="0" ci="10" mb="0" cb="2"/><line nr="98" mi="0" ci="5" mb="0" cb="0"/><line nr="114" mi="0" ci="10" mb="0" cb="2"/><line nr="115" mi="0" ci="5" mb="0" cb="0"/><line nr="132" mi="0" ci="10" mb="0" cb="2"/><line nr="133" mi="0" ci="12" mb="0" cb="2"/><line nr="153" mi="1" ci="9" mb="1" cb="1"/><line nr="154" mi="0" ci="8" mb="0" cb="2"/><line nr="155" mi="0" ci="5" mb="0" cb="0"/><line nr="156" mi="0" ci="15" mb="0" cb="0"/><line nr="157" mi="0" ci="2" mb="0" cb="0"/><line nr="177" mi="1" ci="9" mb="1" cb="1"/><line nr="178" mi="0" ci="8" mb="0" cb="2"/><line nr="179" mi="0" ci="5" mb="0" cb="0"/><line nr="180" mi="0" ci="15" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="0"/><line nr="201" mi="1" ci="9" mb="1" cb="1"/><line nr="202" mi="0" ci="8" mb="0" cb="2"/><line nr="203" mi="0" ci="5" mb="0" cb="0"/><line nr="204" mi="0" ci="15" mb="0" cb="0"/><line nr="205" mi="0" ci="2" mb="0" cb="0"/><line nr="224" mi="0" ci="10" mb="0" cb="2"/><line nr="225" mi="0" ci="9" mb="0" cb="2"/><line nr="226" mi="0" ci="5" mb="0" cb="0"/><line nr="227" mi="3" ci="6" mb="1" cb="1"/><line nr="246" mi="0" ci="10" mb="0" cb="2"/><line nr="247" mi="0" ci="9" mb="0" cb="2"/><line nr="248" mi="0" ci="5" mb="0" cb="0"/><line nr="249" mi="1" ci="8" mb="1" cb="1"/><line nr="268" mi="0" ci="10" mb="0" cb="2"/><line nr="269" mi="0" ci="9" mb="0" cb="2"/><line nr="270" mi="0" ci="5" mb="0" cb="0"/><line nr="271" mi="0" ci="8" mb="0" cb="0"/><line nr="290" mi="0" ci="10" mb="0" cb="2"/><line nr="291" mi="0" ci="9" mb="0" cb="2"/><line nr="292" mi="0" ci="5" mb="0" cb="0"/><line nr="293" mi="3" ci="6" mb="1" cb="1"/><line nr="313" mi="0" ci="10" mb="0" cb="2"/><line nr="314" mi="0" ci="9" mb="0" cb="2"/><line nr="315" mi="0" ci="5" mb="0" cb="0"/><line nr="316" mi="1" ci="8" mb="1" cb="1"/><line nr="335" mi="0" ci="10" mb="0" cb="2"/><line nr="336" mi="0" ci="9" mb="0" cb="2"/><line nr="337" mi="0" ci="5" mb="0" cb="0"/><line nr="338" mi="0" ci="8" mb="0" cb="0"/><line nr="343" mi="4" ci="4" mb="2" cb="2"/><line nr="344" mi="4" ci="6" mb="2" cb="2"/><line nr="345" mi="0" ci="2" mb="0" cb="0"/><line nr="346" mi="0" ci="3" mb="0" cb="0"/><line nr="347" mi="0" ci="5" mb="0" cb="2"/><line nr="348" mi="0" ci="5" mb="0" cb="2"/><line nr="349" mi="0" ci="5" mb="0" cb="0"/><line nr="352" mi="0" ci="6" mb="0" cb="2"/><line nr="353" mi="0" ci="5" mb="0" cb="0"/><line nr="356" mi="0" ci="2" mb="0" cb="0"/><line nr="380" mi="0" ci="10" mb="0" cb="2"/><line nr="381" mi="0" ci="9" mb="0" cb="2"/><line nr="382" mi="0" ci="8" mb="0" cb="2"/><line nr="383" mi="0" ci="5" mb="0" cb="0"/><line nr="384" mi="0" ci="17" mb="0" cb="0"/><line nr="385" mi="0" ci="2" mb="0" cb="0"/><line nr="409" mi="0" ci="10" mb="0" cb="2"/><line nr="410" mi="0" ci="9" mb="0" cb="2"/><line nr="411" mi="0" ci="8" mb="0" cb="2"/><line nr="412" mi="0" ci="5" mb="0" cb="0"/><line nr="413" mi="0" ci="17" mb="0" cb="0"/><line nr="414" mi="0" ci="2" mb="0" cb="0"/><line nr="438" mi="0" ci="10" mb="0" cb="2"/><line nr="439" mi="0" ci="9" mb="0" cb="2"/><line nr="440" mi="0" ci="8" mb="0" cb="2"/><line nr="441" mi="0" ci="5" mb="0" cb="0"/><line nr="442" mi="0" ci="17" mb="0" cb="0"/><line nr="443" mi="0" ci="2" mb="0" cb="0"/><line nr="467" mi="0" ci="10" mb="0" cb="2"/><line nr="468" mi="0" ci="9" mb="0" cb="2"/><line nr="469" mi="0" ci="8" mb="0" cb="2"/><line nr="470" mi="0" ci="5" mb="0" cb="0"/><line nr="471" mi="0" ci="17" mb="0" cb="0"/><line nr="472" mi="0" ci="2" mb="0" cb="0"/><line nr="496" mi="0" ci="10" mb="0" cb="2"/><line nr="497" mi="0" ci="9" mb="0" cb="2"/><line nr="498" mi="0" ci="8" mb="0" cb="2"/><line nr="499" mi="0" ci="5" mb="0" cb="0"/><line nr="500" mi="0" ci="17" mb="0" cb="0"/><line nr="501" mi="0" ci="2" mb="0" cb="0"/><line nr="525" mi="0" ci="10" mb="0" cb="2"/><line nr="526" mi="0" ci="9" mb="0" cb="2"/><line nr="527" mi="0" ci="8" mb="0" cb="2"/><line nr="528" mi="0" ci="5" mb="0" cb="0"/><line nr="529" mi="0" ci="17" mb="0" cb="0"/><line nr="530" mi="0" ci="2" mb="0" cb="0"/><line nr="547" mi="0" ci="10" mb="0" cb="2"/><line nr="548" mi="0" ci="5" mb="0" cb="0"/><line nr="549" mi="0" ci="5" mb="0" cb="0"/><line nr="550" mi="0" ci="4" mb="0" cb="0"/><line nr="567" mi="0" ci="10" mb="0" cb="2"/><line nr="568" mi="0" ci="5" mb="0" cb="0"/><line nr="585" mi="0" ci="10" mb="0" cb="2"/><line nr="586" mi="0" ci="12" mb="0" cb="2"/><line nr="601" mi="0" ci="10" mb="0" cb="2"/><line nr="602" mi="0" ci="5" mb="0" cb="0"/><line nr="603" mi="0" ci="5" mb="0" cb="0"/><line nr="604" mi="0" ci="4" mb="0" cb="0"/><line nr="619" mi="0" ci="10" mb="0" cb="2"/><line nr="620" mi="0" ci="5" mb="0" cb="0"/><line nr="635" mi="0" ci="10" mb="0" cb="2"/><line nr="636" mi="0" ci="12" mb="0" cb="2"/><line nr="656" mi="0" ci="10" mb="0" cb="2"/><line nr="657" mi="0" ci="8" mb="0" cb="2"/><line nr="658" mi="0" ci="5" mb="0" cb="0"/><line nr="659" mi="0" ci="15" mb="0" cb="0"/><line nr="660" mi="0" ci="2" mb="0" cb="0"/><line nr="680" mi="0" ci="10" mb="0" cb="2"/><line nr="681" mi="0" ci="8" mb="0" cb="2"/><line nr="682" mi="0" ci="5" mb="0" cb="0"/><line nr="683" mi="0" ci="15" mb="0" cb="0"/><line nr="684" mi="0" ci="2" mb="0" cb="0"/><line nr="704" mi="0" ci="10" mb="0" cb="2"/><line nr="705" mi="0" ci="8" mb="0" cb="2"/><line nr="706" mi="0" ci="5" mb="0" cb="0"/><line nr="707" mi="0" ci="15" mb="0" cb="0"/><line nr="708" mi="0" ci="2" mb="0" cb="0"/><line nr="728" mi="0" ci="10" mb="0" cb="2"/><line nr="729" mi="0" ci="8" mb="0" cb="2"/><line nr="730" mi="0" ci="5" mb="0" cb="0"/><line nr="731" mi="0" ci="15" mb="0" cb="0"/><line nr="732" mi="0" ci="2" mb="0" cb="0"/><line nr="752" mi="0" ci="10" mb="0" cb="2"/><line nr="753" mi="0" ci="8" mb="0" cb="2"/><line nr="754" mi="0" ci="5" mb="0" cb="0"/><line nr="755" mi="0" ci="15" mb="0" cb="0"/><line nr="756" mi="0" ci="2" mb="0" cb="0"/><line nr="776" mi="0" ci="10" mb="0" cb="2"/><line nr="777" mi="0" ci="8" mb="0" cb="2"/><line nr="778" mi="0" ci="5" mb="0" cb="0"/><line nr="779" mi="0" ci="15" mb="0" cb="0"/><line nr="780" mi="0" ci="2" mb="0" cb="0"/><line nr="797" mi="0" ci="10" mb="0" cb="2"/><line nr="798" mi="0" ci="8" mb="0" cb="0"/><line nr="813" mi="0" ci="10" mb="0" cb="2"/><line nr="814" mi="0" ci="5" mb="0" cb="0"/><line nr="815" mi="0" ci="4" mb="0" cb="0"/><line nr="816" mi="0" ci="9" mb="0" cb="2"/><line nr="817" mi="0" ci="3" mb="0" cb="0"/><line nr="838" mi="0" ci="10" mb="0" cb="2"/><line nr="839" mi="0" ci="8" mb="0" cb="2"/><line nr="840" mi="0" ci="5" mb="0" cb="0"/><line nr="841" mi="0" ci="15" mb="0" cb="0"/><line nr="842" mi="0" ci="2" mb="0" cb="0"/><line nr="863" mi="0" ci="10" mb="0" cb="2"/><line nr="864" mi="0" ci="8" mb="0" cb="2"/><line nr="865" mi="0" ci="5" mb="0" cb="0"/><line nr="866" mi="0" ci="15" mb="0" cb="0"/><line nr="867" mi="0" ci="2" mb="0" cb="0"/><line nr="885" mi="0" ci="10" mb="0" cb="2"/><line nr="886" mi="0" ci="9" mb="0" cb="2"/><line nr="887" mi="0" ci="5" mb="0" cb="0"/><line nr="888" mi="0" ci="5" mb="0" cb="0"/><line nr="889" mi="0" ci="4" mb="0" cb="0"/><line nr="906" mi="0" ci="10" mb="0" cb="2"/><line nr="907" mi="0" ci="9" mb="0" cb="2"/><line nr="908" mi="0" ci="5" mb="0" cb="0"/><line nr="910" mi="0" ci="14" mb="0" cb="2"/><line nr="911" mi="0" ci="9" mb="0" cb="2"/><line nr="912" mi="0" ci="3" mb="0" cb="0"/><line nr="937" mi="0" ci="10" mb="0" cb="2"/><line nr="938" mi="0" ci="9" mb="0" cb="2"/><line nr="939" mi="0" ci="8" mb="0" cb="2"/><line nr="940" mi="0" ci="5" mb="0" cb="0"/><line nr="941" mi="0" ci="17" mb="0" cb="0"/><line nr="942" mi="0" ci="2" mb="0" cb="0"/><line nr="968" mi="0" ci="10" mb="0" cb="2"/><line nr="969" mi="0" ci="9" mb="0" cb="2"/><line nr="970" mi="0" ci="8" mb="0" cb="2"/><line nr="971" mi="0" ci="5" mb="0" cb="0"/><line nr="972" mi="0" ci="17" mb="0" cb="0"/><line nr="973" mi="0" ci="2" mb="0" cb="0"/><line nr="992" mi="0" ci="10" mb="0" cb="2"/><line nr="993" mi="0" ci="9" mb="0" cb="2"/><line nr="994" mi="0" ci="12" mb="0" cb="0"/><line nr="1019" mi="0" ci="10" mb="0" cb="2"/><line nr="1020" mi="0" ci="9" mb="0" cb="2"/><line nr="1021" mi="0" ci="8" mb="0" cb="2"/><line nr="1022" mi="0" ci="5" mb="0" cb="0"/><line nr="1023" mi="0" ci="17" mb="0" cb="0"/><line nr="1024" mi="0" ci="2" mb="0" cb="0"/><line nr="1043" mi="0" ci="10" mb="0" cb="2"/><line nr="1044" mi="0" ci="8" mb="0" cb="2"/><line nr="1045" mi="0" ci="3" mb="0" cb="0"/><line nr="1046" mi="0" ci="16" mb="0" cb="0"/><line nr="1047" mi="0" ci="3" mb="0" cb="0"/><line nr="1070" mi="0" ci="10" mb="0" cb="2"/><line nr="1071" mi="0" ci="8" mb="0" cb="2"/><line nr="1072" mi="0" ci="8" mb="0" cb="2"/><line nr="1073" mi="0" ci="5" mb="0" cb="0"/><line nr="1074" mi="0" ci="17" mb="0" cb="0"/><line nr="1075" mi="0" ci="2" mb="0" cb="0"/><line nr="1098" mi="0" ci="10" mb="0" cb="2"/><line nr="1099" mi="0" ci="8" mb="0" cb="2"/><line nr="1100" mi="0" ci="8" mb="0" cb="2"/><line nr="1101" mi="0" ci="4" mb="0" cb="0"/><line nr="1102" mi="0" ci="12" mb="0" cb="0"/><line nr="1103" mi="0" ci="14" mb="0" cb="0"/><line nr="1104" mi="0" ci="11" mb="0" cb="0"/><line nr="1105" mi="0" ci="3" mb="0" cb="0"/><line nr="1125" mi="0" ci="10" mb="0" cb="2"/><line nr="1126" mi="0" ci="8" mb="0" cb="2"/><line nr="1127" mi="0" ci="4" mb="0" cb="0"/><line nr="1128" mi="0" ci="13" mb="0" cb="0"/><line nr="1129" mi="0" ci="14" mb="0" cb="0"/><line nr="1130" mi="0" ci="5" mb="0" cb="2"/><line nr="1131" mi="0" ci="9" mb="0" cb="0"/><line nr="1133" mi="0" ci="6" mb="0" cb="0"/><line nr="1135" mi="0" ci="1" mb="0" cb="0"/><line nr="1136" mi="0" ci="3" mb="0" cb="0"/><line nr="1156" mi="0" ci="10" mb="0" cb="2"/><line nr="1157" mi="0" ci="8" mb="0" cb="2"/><line nr="1158" mi="0" ci="4" mb="0" cb="0"/><line nr="1159" mi="0" ci="13" mb="0" cb="0"/><line nr="1160" mi="0" ci="14" mb="0" cb="0"/><line nr="1161" mi="0" ci="5" mb="0" cb="2"/><line nr="1162" mi="0" ci="9" mb="0" cb="0"/><line nr="1164" mi="0" ci="6" mb="0" cb="0"/><line nr="1166" mi="0" ci="1" mb="0" cb="0"/><line nr="1167" mi="0" ci="3" mb="0" cb="0"/><line nr="1188" mi="0" ci="10" mb="0" cb="2"/><line nr="1189" mi="0" ci="8" mb="0" cb="2"/><line nr="1190" mi="0" ci="10" mb="0" cb="2"/><line nr="1191" mi="0" ci="4" mb="0" cb="0"/><line nr="1210" mi="0" ci="10" mb="0" cb="2"/><line nr="1211" mi="0" ci="8" mb="0" cb="2"/><line nr="1212" mi="0" ci="4" mb="0" cb="0"/><line nr="1213" mi="0" ci="13" mb="0" cb="0"/><line nr="1214" mi="0" ci="14" mb="0" cb="0"/><line nr="1215" mi="0" ci="4" mb="0" cb="2"/><line nr="1216" mi="0" ci="9" mb="0" cb="0"/><line nr="1218" mi="0" ci="6" mb="0" cb="0"/><line nr="1220" mi="0" ci="1" mb="0" cb="0"/><line nr="1221" mi="0" ci="3" mb="0" cb="0"/><line nr="1240" mi="0" ci="10" mb="0" cb="2"/><line nr="1241" mi="0" ci="8" mb="0" cb="2"/><line nr="1242" mi="0" ci="4" mb="0" cb="0"/><line nr="1243" mi="0" ci="13" mb="0" cb="0"/><line nr="1244" mi="0" ci="14" mb="0" cb="0"/><line nr="1245" mi="0" ci="4" mb="0" cb="0"/><line nr="1246" mi="0" ci="4" mb="0" cb="2"/><line nr="1247" mi="0" ci="6" mb="0" cb="0"/><line nr="1248" mi="0" ci="7" mb="0" cb="0"/><line nr="1249" mi="0" ci="4" mb="0" cb="2"/><line nr="1250" mi="0" ci="6" mb="0" cb="0"/><line nr="1252" mi="0" ci="1" mb="0" cb="0"/><line nr="1253" mi="0" ci="3" mb="0" cb="0"/><line nr="1272" mi="0" ci="10" mb="0" cb="2"/><line nr="1273" mi="0" ci="8" mb="0" cb="2"/><line nr="1274" mi="0" ci="4" mb="0" cb="0"/><line nr="1275" mi="0" ci="13" mb="0" cb="0"/><line nr="1276" mi="0" ci="14" mb="0" cb="0"/><line nr="1277" mi="0" ci="4" mb="0" cb="2"/><line nr="1278" mi="0" ci="4" mb="0" cb="0"/><line nr="1279" mi="0" ci="6" mb="0" cb="0"/><line nr="1280" mi="0" ci="7" mb="0" cb="0"/><line nr="1281" mi="0" ci="5" mb="0" cb="2"/><line nr="1282" mi="0" ci="6" mb="0" cb="0"/><line nr="1284" mi="0" ci="1" mb="0" cb="0"/><line nr="1285" mi="0" ci="3" mb="0" cb="0"/><line nr="1316" mi="0" ci="10" mb="0" cb="2"/><line nr="1317" mi="0" ci="8" mb="0" cb="2"/><line nr="1318" mi="0" ci="8" mb="0" cb="2"/><line nr="1319" mi="0" ci="8" mb="0" cb="2"/><line nr="1320" mi="0" ci="5" mb="0" cb="0"/><line nr="1321" mi="0" ci="19" mb="0" cb="0"/><line nr="1322" mi="0" ci="2" mb="0" cb="0"/><line nr="1349" mi="0" ci="10" mb="0" cb="2"/><line nr="1350" mi="0" ci="8" mb="0" cb="2"/><line nr="1351" mi="0" ci="8" mb="0" cb="2"/><line nr="1352" mi="0" ci="5" mb="0" cb="0"/><line nr="1353" mi="0" ci="17" mb="0" cb="0"/><line nr="1354" mi="0" ci="2" mb="0" cb="0"/><line nr="1381" mi="0" ci="10" mb="0" cb="2"/><line nr="1382" mi="0" ci="8" mb="0" cb="2"/><line nr="1383" mi="0" ci="8" mb="0" cb="2"/><line nr="1384" mi="0" ci="5" mb="0" cb="0"/><line nr="1385" mi="0" ci="17" mb="0" cb="0"/><line nr="1386" mi="0" ci="2" mb="0" cb="0"/><line nr="1413" mi="0" ci="10" mb="0" cb="2"/><line nr="1414" mi="0" ci="8" mb="0" cb="2"/><line nr="1415" mi="0" ci="8" mb="0" cb="2"/><line nr="1416" mi="0" ci="5" mb="0" cb="0"/><line nr="1417" mi="0" ci="17" mb="0" cb="0"/><line nr="1418" mi="0" ci="2" mb="0" cb="0"/><line nr="1444" mi="0" ci="10" mb="0" cb="2"/><line nr="1445" mi="0" ci="8" mb="0" cb="2"/><line nr="1446" mi="0" ci="8" mb="0" cb="2"/><line nr="1447" mi="0" ci="5" mb="0" cb="0"/><line nr="1448" mi="0" ci="17" mb="0" cb="0"/><line nr="1449" mi="0" ci="2" mb="0" cb="0"/><line nr="1475" mi="0" ci="10" mb="0" cb="2"/><line nr="1476" mi="0" ci="8" mb="0" cb="2"/><line nr="1477" mi="0" ci="8" mb="0" cb="2"/><line nr="1478" mi="0" ci="5" mb="0" cb="0"/><line nr="1479" mi="0" ci="17" mb="0" cb="0"/><line nr="1480" mi="0" ci="2" mb="0" cb="0"/><line nr="1507" mi="0" ci="10" mb="0" cb="2"/><line nr="1508" mi="0" ci="8" mb="0" cb="2"/><line nr="1509" mi="0" ci="8" mb="0" cb="2"/><line nr="1510" mi="0" ci="5" mb="0" cb="0"/><line nr="1511" mi="0" ci="17" mb="0" cb="0"/><line nr="1512" mi="0" ci="2" mb="0" cb="0"/><line nr="1535" mi="0" ci="10" mb="0" cb="2"/><line nr="1536" mi="0" ci="9" mb="0" cb="2"/><line nr="1537" mi="0" ci="8" mb="0" cb="2"/><line nr="1538" mi="0" ci="3" mb="0" cb="0"/><line nr="1539" mi="0" ci="18" mb="0" cb="0"/><line nr="1540" mi="0" ci="3" mb="0" cb="0"/><line nr="1572" mi="0" ci="10" mb="0" cb="2"/><line nr="1573" mi="0" ci="9" mb="0" cb="2"/><line nr="1574" mi="0" ci="8" mb="0" cb="2"/><line nr="1575" mi="0" ci="8" mb="0" cb="2"/><line nr="1576" mi="0" ci="5" mb="0" cb="0"/><line nr="1577" mi="0" ci="19" mb="0" cb="0"/><line nr="1578" mi="0" ci="2" mb="0" cb="0"/><line nr="1606" mi="0" ci="10" mb="0" cb="2"/><line nr="1607" mi="0" ci="9" mb="0" cb="2"/><line nr="1608" mi="0" ci="8" mb="0" cb="2"/><line nr="1609" mi="0" ci="8" mb="0" cb="2"/><line nr="1610" mi="0" ci="4" mb="0" cb="0"/><line nr="1611" mi="0" ci="13" mb="0" cb="0"/><line nr="1612" mi="0" ci="15" mb="0" cb="0"/><line nr="1613" mi="0" ci="12" mb="0" cb="0"/><line nr="1614" mi="0" ci="3" mb="0" cb="0"/><line nr="1638" mi="0" ci="10" mb="0" cb="2"/><line nr="1639" mi="0" ci="8" mb="0" cb="2"/><line nr="1640" mi="0" ci="4" mb="0" cb="0"/><line nr="1641" mi="0" ci="14" mb="0" cb="0"/><line nr="1642" mi="0" ci="15" mb="0" cb="0"/><line nr="1643" mi="0" ci="5" mb="0" cb="2"/><line nr="1644" mi="0" ci="10" mb="0" cb="0"/><line nr="1646" mi="0" ci="6" mb="0" cb="0"/><line nr="1648" mi="0" ci="1" mb="0" cb="0"/><line nr="1649" mi="0" ci="3" mb="0" cb="0"/><line nr="1673" mi="0" ci="10" mb="0" cb="2"/><line nr="1674" mi="0" ci="8" mb="0" cb="2"/><line nr="1675" mi="0" ci="4" mb="0" cb="0"/><line nr="1676" mi="0" ci="14" mb="0" cb="0"/><line nr="1677" mi="0" ci="15" mb="0" cb="0"/><line nr="1678" mi="0" ci="5" mb="0" cb="2"/><line nr="1679" mi="0" ci="10" mb="0" cb="0"/><line nr="1681" mi="0" ci="6" mb="0" cb="0"/><line nr="1683" mi="0" ci="1" mb="0" cb="0"/><line nr="1684" mi="0" ci="3" mb="0" cb="0"/><line nr="1709" mi="0" ci="10" mb="0" cb="2"/><line nr="1710" mi="0" ci="8" mb="0" cb="2"/><line nr="1711" mi="0" ci="11" mb="0" cb="2"/><line nr="1712" mi="0" ci="5" mb="0" cb="0"/><line nr="1735" mi="0" ci="10" mb="0" cb="2"/><line nr="1736" mi="0" ci="8" mb="0" cb="2"/><line nr="1737" mi="0" ci="4" mb="0" cb="0"/><line nr="1738" mi="0" ci="14" mb="0" cb="0"/><line nr="1739" mi="0" ci="15" mb="0" cb="0"/><line nr="1740" mi="0" ci="4" mb="0" cb="2"/><line nr="1741" mi="0" ci="10" mb="0" cb="0"/><line nr="1743" mi="0" ci="6" mb="0" cb="0"/><line nr="1745" mi="0" ci="1" mb="0" cb="0"/><line nr="1746" mi="0" ci="3" mb="0" cb="0"/><line nr="1769" mi="0" ci="10" mb="0" cb="2"/><line nr="1770" mi="0" ci="8" mb="0" cb="2"/><line nr="1771" mi="0" ci="4" mb="0" cb="0"/><line nr="1772" mi="0" ci="14" mb="0" cb="0"/><line nr="1773" mi="0" ci="15" mb="0" cb="0"/><line nr="1774" mi="0" ci="5" mb="0" cb="0"/><line nr="1775" mi="0" ci="4" mb="0" cb="2"/><line nr="1776" mi="0" ci="6" mb="0" cb="0"/><line nr="1777" mi="0" ci="7" mb="0" cb="0"/><line nr="1778" mi="0" ci="4" mb="0" cb="2"/><line nr="1779" mi="0" ci="6" mb="0" cb="0"/><line nr="1781" mi="0" ci="1" mb="0" cb="0"/><line nr="1782" mi="0" ci="3" mb="0" cb="0"/><line nr="1805" mi="0" ci="10" mb="0" cb="2"/><line nr="1806" mi="0" ci="8" mb="0" cb="2"/><line nr="1807" mi="0" ci="4" mb="0" cb="0"/><line nr="1808" mi="0" ci="14" mb="0" cb="0"/><line nr="1809" mi="0" ci="15" mb="0" cb="0"/><line nr="1810" mi="0" ci="4" mb="0" cb="2"/><line nr="1811" mi="0" ci="5" mb="0" cb="0"/><line nr="1812" mi="0" ci="6" mb="0" cb="0"/><line nr="1813" mi="0" ci="7" mb="0" cb="0"/><line nr="1814" mi="0" ci="5" mb="0" cb="2"/><line nr="1815" mi="0" ci="6" mb="0" cb="0"/><line nr="1817" mi="0" ci="1" mb="0" cb="0"/><line nr="1818" mi="0" ci="3" mb="0" cb="0"/><line nr="1853" mi="0" ci="10" mb="0" cb="2"/><line nr="1854" mi="0" ci="9" mb="0" cb="2"/><line nr="1855" mi="0" ci="8" mb="0" cb="2"/><line nr="1856" mi="0" ci="8" mb="0" cb="2"/><line nr="1857" mi="0" ci="8" mb="0" cb="2"/><line nr="1858" mi="0" ci="5" mb="0" cb="0"/><line nr="1859" mi="0" ci="21" mb="0" cb="0"/><line nr="1860" mi="0" ci="2" mb="0" cb="0"/><line nr="1891" mi="0" ci="10" mb="0" cb="2"/><line nr="1892" mi="0" ci="9" mb="0" cb="2"/><line nr="1893" mi="0" ci="8" mb="0" cb="2"/><line nr="1894" mi="0" ci="8" mb="0" cb="2"/><line nr="1895" mi="0" ci="5" mb="0" cb="0"/><line nr="1896" mi="0" ci="19" mb="0" cb="0"/><line nr="1897" mi="0" ci="2" mb="0" cb="0"/><line nr="1928" mi="0" ci="10" mb="0" cb="2"/><line nr="1929" mi="0" ci="9" mb="0" cb="2"/><line nr="1930" mi="0" ci="8" mb="0" cb="2"/><line nr="1931" mi="0" ci="8" mb="0" cb="2"/><line nr="1932" mi="0" ci="5" mb="0" cb="0"/><line nr="1933" mi="0" ci="19" mb="0" cb="0"/><line nr="1934" mi="0" ci="2" mb="0" cb="0"/><line nr="1965" mi="0" ci="10" mb="0" cb="2"/><line nr="1966" mi="0" ci="9" mb="0" cb="2"/><line nr="1967" mi="0" ci="8" mb="0" cb="2"/><line nr="1968" mi="0" ci="8" mb="0" cb="2"/><line nr="1969" mi="0" ci="5" mb="0" cb="0"/><line nr="1970" mi="0" ci="19" mb="0" cb="0"/><line nr="1971" mi="0" ci="2" mb="0" cb="0"/><line nr="2002" mi="0" ci="10" mb="0" cb="2"/><line nr="2003" mi="0" ci="9" mb="0" cb="2"/><line nr="2004" mi="0" ci="8" mb="0" cb="2"/><line nr="2005" mi="0" ci="8" mb="0" cb="2"/><line nr="2006" mi="0" ci="5" mb="0" cb="0"/><line nr="2007" mi="0" ci="19" mb="0" cb="0"/><line nr="2008" mi="0" ci="2" mb="0" cb="0"/><line nr="2039" mi="0" ci="10" mb="0" cb="2"/><line nr="2040" mi="0" ci="9" mb="0" cb="2"/><line nr="2041" mi="0" ci="8" mb="0" cb="2"/><line nr="2042" mi="0" ci="8" mb="0" cb="2"/><line nr="2043" mi="0" ci="5" mb="0" cb="0"/><line nr="2044" mi="0" ci="19" mb="0" cb="0"/><line nr="2045" mi="0" ci="2" mb="0" cb="0"/><line nr="2076" mi="0" ci="10" mb="0" cb="2"/><line nr="2077" mi="0" ci="9" mb="0" cb="2"/><line nr="2078" mi="0" ci="8" mb="0" cb="2"/><line nr="2079" mi="0" ci="8" mb="0" cb="2"/><line nr="2080" mi="0" ci="5" mb="0" cb="0"/><line nr="2081" mi="0" ci="19" mb="0" cb="0"/><line nr="2082" mi="0" ci="2" mb="0" cb="0"/><line nr="2101" mi="0" ci="10" mb="0" cb="2"/><line nr="2102" mi="0" ci="8" mb="0" cb="2"/><line nr="2103" mi="0" ci="1" mb="0" cb="0"/><line nr="2104" mi="0" ci="2" mb="0" cb="0"/><line nr="2105" mi="0" ci="16" mb="0" cb="0"/><line nr="2106" mi="0" ci="3" mb="0" cb="0"/><line nr="2131" mi="0" ci="10" mb="0" cb="2"/><line nr="2132" mi="0" ci="8" mb="0" cb="2"/><line nr="2133" mi="0" ci="8" mb="0" cb="2"/><line nr="2134" mi="0" ci="5" mb="0" cb="0"/><line nr="2135" mi="0" ci="17" mb="0" cb="0"/><line nr="2136" mi="0" ci="2" mb="0" cb="0"/><line nr="2160" mi="0" ci="10" mb="0" cb="2"/><line nr="2161" mi="0" ci="8" mb="0" cb="2"/><line nr="2162" mi="0" ci="8" mb="0" cb="2"/><line nr="2163" mi="0" ci="4" mb="0" cb="0"/><line nr="2164" mi="0" ci="12" mb="0" cb="0"/><line nr="2165" mi="0" ci="14" mb="0" cb="0"/><line nr="2166" mi="0" ci="11" mb="0" cb="0"/><line nr="2167" mi="0" ci="3" mb="0" cb="0"/><line nr="2186" mi="0" ci="10" mb="0" cb="2"/><line nr="2187" mi="0" ci="8" mb="0" cb="2"/><line nr="2188" mi="0" ci="4" mb="0" cb="0"/><line nr="2189" mi="0" ci="13" mb="0" cb="0"/><line nr="2190" mi="0" ci="14" mb="0" cb="0"/><line nr="2191" mi="0" ci="5" mb="0" cb="2"/><line nr="2192" mi="0" ci="9" mb="0" cb="0"/><line nr="2194" mi="0" ci="6" mb="0" cb="0"/><line nr="2196" mi="0" ci="1" mb="0" cb="0"/><line nr="2197" mi="0" ci="3" mb="0" cb="0"/><line nr="2216" mi="0" ci="10" mb="0" cb="2"/><line nr="2217" mi="0" ci="8" mb="0" cb="2"/><line nr="2218" mi="0" ci="4" mb="0" cb="0"/><line nr="2219" mi="0" ci="13" mb="0" cb="0"/><line nr="2220" mi="0" ci="14" mb="0" cb="0"/><line nr="2221" mi="0" ci="5" mb="0" cb="2"/><line nr="2222" mi="0" ci="9" mb="0" cb="0"/><line nr="2224" mi="0" ci="6" mb="0" cb="0"/><line nr="2226" mi="0" ci="1" mb="0" cb="0"/><line nr="2227" mi="0" ci="3" mb="0" cb="0"/><line nr="2248" mi="0" ci="10" mb="0" cb="2"/><line nr="2249" mi="0" ci="8" mb="0" cb="2"/><line nr="2250" mi="0" ci="10" mb="0" cb="2"/><line nr="2251" mi="0" ci="4" mb="0" cb="0"/><line nr="2270" mi="0" ci="10" mb="0" cb="2"/><line nr="2271" mi="0" ci="8" mb="0" cb="2"/><line nr="2272" mi="0" ci="4" mb="0" cb="0"/><line nr="2273" mi="0" ci="13" mb="0" cb="0"/><line nr="2274" mi="0" ci="14" mb="0" cb="0"/><line nr="2275" mi="0" ci="4" mb="0" cb="2"/><line nr="2276" mi="0" ci="9" mb="0" cb="0"/><line nr="2278" mi="0" ci="6" mb="0" cb="0"/><line nr="2280" mi="0" ci="1" mb="0" cb="0"/><line nr="2281" mi="0" ci="3" mb="0" cb="0"/><line nr="2300" mi="0" ci="10" mb="0" cb="2"/><line nr="2301" mi="0" ci="8" mb="0" cb="2"/><line nr="2302" mi="0" ci="4" mb="0" cb="0"/><line nr="2303" mi="0" ci="13" mb="0" cb="0"/><line nr="2304" mi="0" ci="14" mb="0" cb="0"/><line nr="2305" mi="0" ci="4" mb="0" cb="0"/><line nr="2306" mi="0" ci="4" mb="0" cb="2"/><line nr="2307" mi="0" ci="6" mb="0" cb="0"/><line nr="2308" mi="0" ci="7" mb="0" cb="0"/><line nr="2309" mi="0" ci="4" mb="0" cb="2"/><line nr="2310" mi="0" ci="6" mb="0" cb="0"/><line nr="2312" mi="0" ci="1" mb="0" cb="0"/><line nr="2313" mi="0" ci="3" mb="0" cb="0"/><line nr="2332" mi="0" ci="10" mb="0" cb="2"/><line nr="2333" mi="0" ci="8" mb="0" cb="2"/><line nr="2334" mi="0" ci="4" mb="0" cb="0"/><line nr="2335" mi="0" ci="13" mb="0" cb="0"/><line nr="2336" mi="0" ci="14" mb="0" cb="0"/><line nr="2337" mi="0" ci="4" mb="0" cb="2"/><line nr="2338" mi="0" ci="4" mb="0" cb="0"/><line nr="2339" mi="0" ci="6" mb="0" cb="0"/><line nr="2340" mi="0" ci="7" mb="0" cb="0"/><line nr="2341" mi="0" ci="5" mb="0" cb="2"/><line nr="2342" mi="0" ci="6" mb="0" cb="0"/><line nr="2344" mi="0" ci="1" mb="0" cb="0"/><line nr="2345" mi="0" ci="3" mb="0" cb="0"/><line nr="2377" mi="0" ci="10" mb="0" cb="2"/><line nr="2378" mi="0" ci="8" mb="0" cb="2"/><line nr="2379" mi="0" ci="8" mb="0" cb="2"/><line nr="2380" mi="0" ci="8" mb="0" cb="2"/><line nr="2381" mi="0" ci="5" mb="0" cb="0"/><line nr="2382" mi="0" ci="9" mb="0" cb="0"/><line nr="2383" mi="0" ci="10" mb="0" cb="0"/><line nr="2384" mi="0" ci="2" mb="0" cb="0"/><line nr="2411" mi="0" ci="10" mb="0" cb="2"/><line nr="2412" mi="0" ci="8" mb="0" cb="2"/><line nr="2413" mi="0" ci="8" mb="0" cb="2"/><line nr="2414" mi="0" ci="5" mb="0" cb="0"/><line nr="2415" mi="0" ci="8" mb="0" cb="0"/><line nr="2416" mi="0" ci="9" mb="0" cb="0"/><line nr="2417" mi="0" ci="2" mb="0" cb="0"/><line nr="2444" mi="0" ci="10" mb="0" cb="2"/><line nr="2445" mi="0" ci="8" mb="0" cb="2"/><line nr="2446" mi="0" ci="8" mb="0" cb="2"/><line nr="2447" mi="0" ci="5" mb="0" cb="0"/><line nr="2448" mi="0" ci="8" mb="0" cb="0"/><line nr="2449" mi="0" ci="9" mb="0" cb="0"/><line nr="2450" mi="0" ci="2" mb="0" cb="0"/><line nr="2477" mi="0" ci="10" mb="0" cb="2"/><line nr="2478" mi="0" ci="8" mb="0" cb="2"/><line nr="2479" mi="0" ci="8" mb="0" cb="2"/><line nr="2480" mi="0" ci="5" mb="0" cb="0"/><line nr="2481" mi="0" ci="17" mb="0" cb="0"/><line nr="2482" mi="0" ci="2" mb="0" cb="0"/><line nr="2509" mi="0" ci="10" mb="0" cb="2"/><line nr="2510" mi="0" ci="8" mb="0" cb="2"/><line nr="2511" mi="0" ci="8" mb="0" cb="2"/><line nr="2512" mi="0" ci="5" mb="0" cb="0"/><line nr="2513" mi="0" ci="17" mb="0" cb="0"/><line nr="2514" mi="0" ci="2" mb="0" cb="0"/><line nr="2541" mi="0" ci="10" mb="0" cb="2"/><line nr="2542" mi="0" ci="8" mb="0" cb="2"/><line nr="2543" mi="0" ci="8" mb="0" cb="2"/><line nr="2544" mi="0" ci="5" mb="0" cb="0"/><line nr="2545" mi="0" ci="17" mb="0" cb="0"/><line nr="2546" mi="0" ci="2" mb="0" cb="0"/><line nr="2573" mi="0" ci="10" mb="0" cb="2"/><line nr="2574" mi="0" ci="8" mb="0" cb="2"/><line nr="2575" mi="0" ci="8" mb="0" cb="2"/><line nr="2576" mi="0" ci="5" mb="0" cb="0"/><line nr="2577" mi="0" ci="17" mb="0" cb="0"/><line nr="2578" mi="0" ci="2" mb="0" cb="0"/><line nr="2601" mi="0" ci="10" mb="0" cb="2"/><line nr="2602" mi="0" ci="9" mb="0" cb="2"/><line nr="2603" mi="0" ci="8" mb="0" cb="2"/><line nr="2604" mi="0" ci="3" mb="0" cb="0"/><line nr="2605" mi="0" ci="18" mb="0" cb="0"/><line nr="2606" mi="0" ci="3" mb="0" cb="0"/><line nr="2635" mi="0" ci="10" mb="0" cb="2"/><line nr="2636" mi="0" ci="9" mb="0" cb="2"/><line nr="2637" mi="0" ci="8" mb="0" cb="2"/><line nr="2638" mi="0" ci="8" mb="0" cb="2"/><line nr="2639" mi="0" ci="5" mb="0" cb="0"/><line nr="2640" mi="0" ci="19" mb="0" cb="0"/><line nr="2641" mi="0" ci="2" mb="0" cb="0"/><line nr="2669" mi="0" ci="10" mb="0" cb="2"/><line nr="2670" mi="0" ci="9" mb="0" cb="2"/><line nr="2671" mi="0" ci="8" mb="0" cb="2"/><line nr="2672" mi="0" ci="8" mb="0" cb="2"/><line nr="2673" mi="0" ci="4" mb="0" cb="0"/><line nr="2674" mi="0" ci="13" mb="0" cb="0"/><line nr="2675" mi="0" ci="15" mb="0" cb="0"/><line nr="2676" mi="0" ci="12" mb="0" cb="0"/><line nr="2677" mi="0" ci="3" mb="0" cb="0"/><line nr="2702" mi="0" ci="10" mb="0" cb="2"/><line nr="2703" mi="0" ci="9" mb="0" cb="2"/><line nr="2704" mi="0" ci="8" mb="0" cb="2"/><line nr="2705" mi="0" ci="4" mb="0" cb="0"/><line nr="2706" mi="0" ci="14" mb="0" cb="0"/><line nr="2707" mi="0" ci="15" mb="0" cb="0"/><line nr="2708" mi="0" ci="5" mb="0" cb="2"/><line nr="2709" mi="0" ci="10" mb="0" cb="0"/><line nr="2711" mi="0" ci="6" mb="0" cb="0"/><line nr="2713" mi="0" ci="1" mb="0" cb="0"/><line nr="2714" mi="0" ci="3" mb="0" cb="0"/><line nr="2739" mi="0" ci="10" mb="0" cb="2"/><line nr="2740" mi="0" ci="9" mb="0" cb="2"/><line nr="2741" mi="0" ci="8" mb="0" cb="2"/><line nr="2742" mi="0" ci="4" mb="0" cb="0"/><line nr="2743" mi="0" ci="14" mb="0" cb="0"/><line nr="2744" mi="0" ci="15" mb="0" cb="0"/><line nr="2745" mi="0" ci="5" mb="0" cb="2"/><line nr="2746" mi="0" ci="10" mb="0" cb="0"/><line nr="2748" mi="0" ci="6" mb="0" cb="0"/><line nr="2750" mi="0" ci="1" mb="0" cb="0"/><line nr="2751" mi="0" ci="3" mb="0" cb="0"/><line nr="2777" mi="0" ci="10" mb="0" cb="2"/><line nr="2778" mi="0" ci="9" mb="0" cb="2"/><line nr="2779" mi="0" ci="8" mb="0" cb="2"/><line nr="2780" mi="0" ci="11" mb="0" cb="2"/><line nr="2781" mi="0" ci="5" mb="0" cb="0"/><line nr="2805" mi="0" ci="10" mb="0" cb="2"/><line nr="2806" mi="0" ci="9" mb="0" cb="2"/><line nr="2807" mi="0" ci="8" mb="0" cb="2"/><line nr="2808" mi="0" ci="4" mb="0" cb="0"/><line nr="2809" mi="0" ci="14" mb="0" cb="0"/><line nr="2810" mi="0" ci="15" mb="0" cb="0"/><line nr="2811" mi="0" ci="4" mb="0" cb="2"/><line nr="2812" mi="0" ci="10" mb="0" cb="0"/><line nr="2814" mi="0" ci="6" mb="0" cb="0"/><line nr="2816" mi="0" ci="1" mb="0" cb="0"/><line nr="2817" mi="0" ci="3" mb="0" cb="0"/><line nr="2841" mi="0" ci="10" mb="0" cb="2"/><line nr="2842" mi="0" ci="9" mb="0" cb="2"/><line nr="2843" mi="0" ci="8" mb="0" cb="2"/><line nr="2844" mi="0" ci="4" mb="0" cb="0"/><line nr="2845" mi="0" ci="14" mb="0" cb="0"/><line nr="2846" mi="0" ci="15" mb="0" cb="0"/><line nr="2847" mi="0" ci="5" mb="0" cb="0"/><line nr="2848" mi="0" ci="4" mb="0" cb="2"/><line nr="2849" mi="0" ci="6" mb="0" cb="0"/><line nr="2850" mi="0" ci="7" mb="0" cb="0"/><line nr="2851" mi="0" ci="4" mb="0" cb="2"/><line nr="2852" mi="0" ci="6" mb="0" cb="0"/><line nr="2854" mi="0" ci="1" mb="0" cb="0"/><line nr="2855" mi="0" ci="3" mb="0" cb="0"/><line nr="2879" mi="0" ci="10" mb="0" cb="2"/><line nr="2880" mi="0" ci="9" mb="0" cb="2"/><line nr="2881" mi="0" ci="8" mb="0" cb="2"/><line nr="2882" mi="0" ci="4" mb="0" cb="0"/><line nr="2883" mi="0" ci="14" mb="0" cb="0"/><line nr="2884" mi="0" ci="15" mb="0" cb="0"/><line nr="2885" mi="0" ci="4" mb="0" cb="2"/><line nr="2886" mi="0" ci="5" mb="0" cb="0"/><line nr="2887" mi="0" ci="6" mb="0" cb="0"/><line nr="2888" mi="0" ci="7" mb="0" cb="0"/><line nr="2889" mi="0" ci="5" mb="0" cb="2"/><line nr="2890" mi="0" ci="6" mb="0" cb="0"/><line nr="2892" mi="0" ci="1" mb="0" cb="0"/><line nr="2893" mi="0" ci="3" mb="0" cb="0"/><line nr="2929" mi="0" ci="10" mb="0" cb="2"/><line nr="2930" mi="0" ci="9" mb="0" cb="2"/><line nr="2931" mi="0" ci="8" mb="0" cb="2"/><line nr="2932" mi="0" ci="8" mb="0" cb="2"/><line nr="2933" mi="0" ci="8" mb="0" cb="2"/><line nr="2934" mi="0" ci="5" mb="0" cb="0"/><line nr="2935" mi="0" ci="10" mb="0" cb="0"/><line nr="2936" mi="0" ci="11" mb="0" cb="0"/><line nr="2937" mi="0" ci="2" mb="0" cb="0"/><line nr="2968" mi="0" ci="10" mb="0" cb="2"/><line nr="2969" mi="0" ci="9" mb="0" cb="2"/><line nr="2970" mi="0" ci="8" mb="0" cb="2"/><line nr="2971" mi="0" ci="8" mb="0" cb="2"/><line nr="2972" mi="0" ci="5" mb="0" cb="0"/><line nr="2973" mi="0" ci="9" mb="0" cb="0"/><line nr="2974" mi="0" ci="10" mb="0" cb="0"/><line nr="2975" mi="0" ci="2" mb="0" cb="0"/><line nr="3006" mi="0" ci="10" mb="0" cb="2"/><line nr="3007" mi="0" ci="9" mb="0" cb="2"/><line nr="3008" mi="0" ci="8" mb="0" cb="2"/><line nr="3009" mi="0" ci="8" mb="0" cb="2"/><line nr="3010" mi="0" ci="5" mb="0" cb="0"/><line nr="3011" mi="0" ci="9" mb="0" cb="0"/><line nr="3012" mi="0" ci="10" mb="0" cb="0"/><line nr="3013" mi="0" ci="2" mb="0" cb="0"/><line nr="3044" mi="0" ci="10" mb="0" cb="2"/><line nr="3045" mi="0" ci="9" mb="0" cb="2"/><line nr="3046" mi="0" ci="8" mb="0" cb="2"/><line nr="3047" mi="0" ci="8" mb="0" cb="2"/><line nr="3048" mi="0" ci="5" mb="0" cb="0"/><line nr="3049" mi="0" ci="9" mb="0" cb="0"/><line nr="3050" mi="0" ci="10" mb="0" cb="0"/><line nr="3051" mi="0" ci="2" mb="0" cb="0"/><line nr="3082" mi="0" ci="10" mb="0" cb="2"/><line nr="3083" mi="0" ci="9" mb="0" cb="2"/><line nr="3084" mi="0" ci="8" mb="0" cb="2"/><line nr="3085" mi="0" ci="8" mb="0" cb="2"/><line nr="3086" mi="0" ci="5" mb="0" cb="0"/><line nr="3087" mi="0" ci="19" mb="0" cb="0"/><line nr="3088" mi="0" ci="2" mb="0" cb="0"/><line nr="3119" mi="0" ci="10" mb="0" cb="2"/><line nr="3120" mi="0" ci="9" mb="0" cb="2"/><line nr="3121" mi="0" ci="8" mb="0" cb="2"/><line nr="3122" mi="0" ci="8" mb="0" cb="2"/><line nr="3123" mi="0" ci="5" mb="0" cb="0"/><line nr="3124" mi="0" ci="9" mb="0" cb="0"/><line nr="3125" mi="0" ci="10" mb="0" cb="0"/><line nr="3126" mi="0" ci="2" mb="0" cb="0"/><line nr="3157" mi="0" ci="10" mb="0" cb="2"/><line nr="3158" mi="0" ci="9" mb="0" cb="2"/><line nr="3159" mi="0" ci="8" mb="0" cb="2"/><line nr="3160" mi="0" ci="8" mb="0" cb="2"/><line nr="3161" mi="0" ci="5" mb="0" cb="0"/><line nr="3162" mi="0" ci="9" mb="0" cb="0"/><line nr="3163" mi="0" ci="10" mb="0" cb="0"/><line nr="3164" mi="0" ci="2" mb="0" cb="0"/><line nr="3169" mi="0" ci="8" mb="0" cb="0"/><line nr="3174" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="21" covered="5564"/><counter type="BRANCH" missed="12" covered="632"/><counter type="LINE" missed="0" covered="719"/><counter type="COMPLEXITY" missed="12" covered="524"/><counter type="METHOD" missed="0" covered="214"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="21" covered="5564"/><counter type="BRANCH" missed="12" covered="632"/><counter type="LINE" missed="0" covered="719"/><counter type="COMPLEXITY" missed="12" covered="524"/><counter type="METHOD" missed="0" covered="214"/><counter type="CLASS" missed="0" covered="1"/></package><package name="com/github/ltennstedt/finnmath/core/linear"><class name="com/github/ltennstedt/finnmath/core/linear/AbstractVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="78"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;)Ljava/lang/Object;" line="198"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;)Ljava/lang/Object;" line="217"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;)Ljava/math/BigDecimal;" line="239"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;)Ljava/lang/Object;" line="270"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="299"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="entries" desc="()Lcom/google/common/collect/ImmutableSet;" line="312"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="322"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="332"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="342"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="352"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="369"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Lcom/google/common/collect/ImmutableMap;" line="373"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="59"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="182"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="31"/><counter type="COMPLEXITY" missed="0" covered="20"/><counter type="METHOD" missed="0" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractContextMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="54"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="468"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="481"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="482"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="461"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="471"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Lcom/google/common/collect/Table$Cell;)V" line="471"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="48"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="81"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="put" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="101"><counter type="INSTRUCTION" missed="1" covered="34"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Object;)Ljava/lang/Object;" line="129"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="putAll" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="151"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nullsToElement" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="172"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="192"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMap" desc="()Ljava/util/Map;" line="196"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSize" desc="()I" line="200"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$nullsToElement$1" desc="(Ljava/lang/Object;Ljava/util/Map$Entry;)V" line="174"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Object;I)V" line="152"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="108" covered="76"/><counter type="BRANCH" missed="12" covered="2"/><counter type="LINE" missed="19" covered="15"/><counter type="COMPLEXITY" missed="14" covered="4"/><counter type="METHOD" missed="7" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="65"><counter type="INSTRUCTION" missed="2" covered="38"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Object;)Lcom/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder;" line="97"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nullsToElement" desc="(Ljava/lang/Object;)Lcom/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder;" line="124"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/lang/Object;)Lcom/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder;" line="148"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="165"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getTable" desc="()Lcom/google/common/collect/Table;" line="169"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$putAll$2" desc="(Ljava/lang/Object;Ljava/lang/Integer;)V" line="150"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Integer;)V" line="150"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nullsToElement$0" desc="(Ljava/lang/Object;Lcom/google/common/collect/Table$Cell;)V" line="126"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="13" covered="147"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="2" covered="29"/><counter type="COMPLEXITY" missed="4" covered="8"/><counter type="METHOD" missed="2" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="459"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="471"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="472"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractContextVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="57"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;Ljava/math/MathContext;)Ljava/lang/Object;" line="178"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/AbstractVector;Ljava/math/MathContext;)Ljava/lang/Object;" line="213"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="60"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="461"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="472"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Lcom/google/common/collect/Table$Cell;)V" line="472"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="807"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="819"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Lcom/google/common/collect/Table$Cell;)V" line="819"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="43"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;" line="55"><counter type="INSTRUCTION" missed="1" covered="13"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="70"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="91"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="111"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="132"><counter type="INSTRUCTION" missed="1" covered="38"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Ljava/math/BigDecimal;" line="152"><counter type="INSTRUCTION" missed="1" covered="31"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="171"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="188"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="205"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="219"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="231"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Z" line="246"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;)Z" line="264"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="277"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="289"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="301"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="313"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="325"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="338"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="349"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="361"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="378"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="397"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dyadicProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="414"><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dyadicProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="435"><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equalByComparingTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Z" line="455"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$equalByComparingTo$16" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/util/Map$Entry;)Z" line="456"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$15" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/math/MathContext;Ljava/util/Map$Entry;)V" line="439"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$14" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/util/Map$Entry;Ljava/math/MathContext;Ljava/util/Map$Entry;)V" line="439"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$13" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/util/Map$Entry;)V" line="417"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$12" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/util/Map$Entry;Ljava/util/Map$Entry;)V" line="417"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxNorm$11" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="362"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$taxicabNorm$10" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="291"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$taxicabNorm$9" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="290"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$8" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Ljava/math/BigDecimal;Ljava/math/MathContext;Ljava/math/BigDecimal;)V" line="208"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="190"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dotProduct$6" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="176"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dotProduct$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;Ljava/util/Map$Entry;)Ljava/math/BigDecimal;" line="175"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dotProduct$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/util/Map$Entry;)Ljava/math/BigDecimal;" line="154"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="137"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="115"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="96"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="74"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="555" covered="209"/><counter type="BRANCH" missed="29" covered="5"/><counter type="LINE" missed="66" covered="29"/><counter type="COMPLEXITY" missed="47" covered="14"/><counter type="METHOD" missed="31" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/Matrices"><method name="buildZeroBigIntegerMatrix" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="58"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildIdentityBigIntegerMatrix" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="74"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroBigDecimalMatrix" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="95"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildIdentityBigDecimalMatrix" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="111"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroSimpleComplexNumberMatrix" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="133"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildIdentitySimpleComplexNumberMatrix" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="149"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroRealComplexNumberMatrix" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="170"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildIdentityRealComplexNumberMatrix" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="186"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$buildIdentityRealComplexNumberMatrix$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;I)V" line="188"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$buildIdentitySimpleComplexNumberMatrix$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;I)V" line="151"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$buildIdentityBigDecimalMatrix$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;I)V" line="113"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$buildIdentityBigIntegerMatrix$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;I)V" line="76"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="232"/><counter type="BRANCH" missed="0" covered="24"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="49"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="65"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="92"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="117"><counter type="INSTRUCTION" missed="41" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="139"><counter type="INSTRUCTION" missed="40" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="166"><counter type="INSTRUCTION" missed="50" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="186"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="200"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="212"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="determinant" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="227"><counter type="INSTRUCTION" missed="81" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="leibnizFormula" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="252"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ruleOfSarrus" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="278"><counter type="INSTRUCTION" missed="174" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="294"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="306"><counter type="INSTRUCTION" missed="55" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="333"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="345"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigInteger;" line="357"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="369"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="379"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="upperTriangular" desc="()Z" line="389"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="400"><counter type="INSTRUCTION" missed="1" covered="17"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="411"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invertible" desc="()Z" line="423"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;" line="447"><counter type="INSTRUCTION" missed="2" covered="21"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$18" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Z" line="413"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$identity$17" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="412"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lowerTriangular$16" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Z" line="401"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$15" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="400"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$14" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Z" line="390"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$13" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="389"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxAbsRowSumNorm$12" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="346"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$11" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="334"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$minor$10" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="315"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$transpose$9" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="295"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$determinant$8" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="230"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$trace$7" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="214"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Lcom/google/common/collect/Table$Cell;)V" line="189"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Ljava/util/Map;)V" line="144"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$4" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="145"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="121"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="122"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="99"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="72"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="972" covered="176"/><counter type="BRANCH" missed="66" covered="14"/><counter type="LINE" missed="124" covered="18"/><counter type="COMPLEXITY" missed="66" covered="17"/><counter type="METHOD" missed="30" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="47"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="63"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="90"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="115"><counter type="INSTRUCTION" missed="41" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="137"><counter type="INSTRUCTION" missed="40" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigInteger;" line="164"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="181"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="195"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigInteger;" line="207"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="determinant" desc="()Ljava/math/BigInteger;" line="222"><counter type="INSTRUCTION" missed="81" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="leibnizFormula" desc="()Ljava/math/BigInteger;" line="247"><counter type="INSTRUCTION" missed="77" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigInteger;" line="273"><counter type="INSTRUCTION" missed="174" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="289"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="309"><counter type="INSTRUCTION" missed="55" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigInteger;" line="335"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigInteger;" line="347"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigInteger;" line="359"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="371"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="381"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="upperTriangular" desc="()Z" line="391"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="402"><counter type="INSTRUCTION" missed="1" covered="17"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="413"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invertible" desc="()Z" line="425"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;" line="447"><counter type="INSTRUCTION" missed="2" covered="21"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$20" desc="(Ljava/math/BigInteger;)Z" line="415"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$identity$19" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="414"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lowerTriangular$18" desc="(Ljava/math/BigInteger;)Z" line="403"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$17" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="402"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$16" desc="(Ljava/math/BigInteger;)Z" line="392"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$15" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="391"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$frobeniusNormPow2$14" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="359"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$13" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="348"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$12" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="336"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$minor$11" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="317"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$transpose$10" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="290"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$determinant$9" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="225"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$trace$8" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="209"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/math/BigInteger;Lcom/google/common/collect/Table$Cell;)V" line="184"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyRowWithColumn$6" desc="(Ljava/util/Map;Ljava/util/Map$Entry;)Ljava/math/BigInteger;" line="168"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Ljava/util/Map;)V" line="142"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$4" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;)Ljava/math/BigInteger;" line="143"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="119"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="120"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/google/common/collect/Table$Cell;)V" line="97"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/google/common/collect/Table$Cell;)V" line="70"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="959" covered="176"/><counter type="BRANCH" missed="60" covered="14"/><counter type="LINE" missed="118" covered="18"/><counter type="COMPLEXITY" missed="65" covered="17"/><counter type="METHOD" missed="32" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="789"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="801"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Lcom/google/common/collect/Table$Cell;)V" line="801"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;" line="56"><counter type="INSTRUCTION" missed="1" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="71"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="92"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="112"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="133"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="153"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="172"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="189"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="206"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="220"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="232"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Z" line="247"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;)Z" line="265"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="278"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="290"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="302"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="314"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="327"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="340"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="351"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="363"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="381"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="402"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dyadicProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="419"><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dyadicProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="440"><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$17" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/math/MathContext;Ljava/util/Map$Entry;)V" line="444"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$16" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/util/Map$Entry;Ljava/math/MathContext;Ljava/util/Map$Entry;)V" line="444"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$15" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/util/Map$Entry;)V" line="422"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$14" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/util/Map$Entry;Ljava/util/Map$Entry;)V" line="422"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxNorm$13" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Ljava/math/BigDecimal;" line="364"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$euclideanNormPow2$12" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="316"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$euclideanNormPow2$11" desc="(Ljava/math/MathContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Ljava/math/BigDecimal;" line="315"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$taxicabNorm$10" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="292"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$taxicabNorm$9" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Ljava/math/BigDecimal;" line="291"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$8" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="209"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="191"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dotProduct$6" desc="(Ljava/math/MathContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="177"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dotProduct$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;Ljava/util/Map$Entry;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="176"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dotProduct$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/util/Map$Entry;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="155"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="138"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="116"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="97"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="75"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="739" covered="18"/><counter type="BRANCH" missed="25" covered="1"/><counter type="LINE" missed="91" covered="4"/><counter type="COMPLEXITY" missed="55" covered="2"/><counter type="METHOD" missed="42" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="43"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;" line="55"><counter type="INSTRUCTION" missed="1" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="68"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="87"><counter type="INSTRUCTION" missed="1" covered="33"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="104"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="117"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Z" line="131"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/math/BigInteger;" line="143"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="153"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="164"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="177"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Ljava/math/BigInteger;" line="192"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="205"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="221"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dyadicProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="238"><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/util/Map$Entry;)V" line="241"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/util/Map$Entry;Ljava/util/Map$Entry;)V" line="241"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dotProduct$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;)Ljava/math/BigInteger;" line="194"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$euclideanNormPow2$3" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="153"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="106"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="91"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="72"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="188" covered="169"/><counter type="BRANCH" missed="12" covered="4"/><counter type="LINE" missed="20" covered="24"/><counter type="COMPLEXITY" missed="16" covered="14"/><counter type="METHOD" missed="9" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="46"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="62"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="91"><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="119"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="148"><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="175"><counter type="INSTRUCTION" missed="41" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="199"><counter type="INSTRUCTION" missed="46" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="222"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="246"><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="268"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="286"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="301"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="314"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="trace" desc="()Ljava/math/BigDecimal;" line="327"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="trace" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="344"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="determinant" desc="()Ljava/math/BigDecimal;" line="360"><counter type="INSTRUCTION" missed="81" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="determinant" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="389"><counter type="INSTRUCTION" missed="91" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="13" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="414"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="434"><counter type="INSTRUCTION" missed="55" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="460"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsColumnSumNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="474"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="488"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsRowSumNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="502"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigDecimal;" line="516"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNormPow2" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="528"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="542"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="553"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="565"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="upperTriangular" desc="()Z" line="576"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="587"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="598"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invertible" desc="()Z" line="610"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigDecimal;" line="627"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="651"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="leibnizFormula" desc="()Ljava/math/BigDecimal;" line="668"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="leibnizFormula" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="696"><counter type="INSTRUCTION" missed="87" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="16" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigDecimal;" line="725"><counter type="INSTRUCTION" missed="174" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ruleOfSarrus" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="743"><counter type="INSTRUCTION" missed="195" covered="0"/><counter type="LINE" missed="15" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;" line="775"><counter type="INSTRUCTION" missed="2" covered="21"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyRowWithColumn$41" desc="(Ljava/util/Map;Ljava/math/MathContext;Ljava/util/Map$Entry;)Ljava/math/BigDecimal;" line="657"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyRowWithColumn$40" desc="(Ljava/util/Map;Ljava/util/Map$Entry;)Ljava/math/BigDecimal;" line="631"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$identity$39" desc="(Ljava/math/BigDecimal;)Z" line="600"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$identity$38" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="599"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lowerTriangular$37" desc="(Ljava/math/BigDecimal;)Z" line="588"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$36" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="587"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$35" desc="(Ljava/math/BigDecimal;)Z" line="577"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$34" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="576"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxNorm$33" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="566"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$frobeniusNormPow2$32" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="530"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$frobeniusNormPow2$31" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="529"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$frobeniusNormPow2$30" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="516"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$29" desc="(Ljava/math/MathContext;Ljava/util/Map;)Ljava/util/Optional;" line="504"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$28" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="505"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$27" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="504"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$26" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="489"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$25" desc="(Ljava/math/MathContext;Ljava/util/Map;)Ljava/util/Optional;" line="476"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$24" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="477"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$23" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="476"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$22" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="461"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$minor$21" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="442"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$transpose$20" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="415"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$determinant$19" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="394"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$determinant$18" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="393"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$determinant$17" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="363"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$trace$16" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="348"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$trace$15" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="347"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$trace$14" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="329"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$13" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/math/BigDecimal;Ljava/math/MathContext;Lcom/google/common/collect/Table$Cell;)V" line="290"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$12" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/math/BigDecimal;Lcom/google/common/collect/Table$Cell;)V" line="271"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$11" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;Ljava/lang/Integer;Ljava/util/Map;)V" line="251"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$10" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/MathContext;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="252"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$9" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="226"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$8" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="227"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Ljava/math/MathContext;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="204"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$6" desc="(Ljava/util/Map;Ljava/math/MathContext;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="205"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="179"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$4" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="180"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Ljava/math/MathContext;Lcom/google/common/collect/Table$Cell;)V" line="156"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="126"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Ljava/math/MathContext;Lcom/google/common/collect/Table$Cell;)V" line="99"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="69"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="1937" covered="179"/><counter type="BRANCH" missed="92" covered="16"/><counter type="LINE" missed="242" covered="18"/><counter type="COMPLEXITY" missed="116" covered="19"/><counter type="METHOD" missed="68" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/Vectors"><method name="buildZeroBigIntegerVector" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="54"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroBigDecimalVector" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="69"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroSimpleComplexNumberVector" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="84"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="buildZeroRealComplexNumberVector" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="99"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="copyOf" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="114"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="copyOf" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="131"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="copyOf" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="148"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$copyOf$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;I)V" line="150"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$copyOf$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;I)V" line="133"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$copyOf$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;I)V" line="116"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="58" covered="89"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="8" covered="12"/><counter type="COMPLEXITY" missed="4" covered="10"/><counter type="METHOD" missed="4" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="255"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="267"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="268"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="43"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;" line="55"><counter type="INSTRUCTION" missed="1" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="69"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="88"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="105"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="118"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Z" line="132"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="144"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="154"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="165"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="178"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="193"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="206"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="223"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dyadicProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="240"><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/util/Map$Entry;)V" line="243"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dyadicProduct$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/util/Map$Entry;Ljava/util/Map$Entry;)V" line="243"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$dotProduct$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/util/Map$Entry;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="195"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="107"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="92"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="73"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="330" covered="18"/><counter type="BRANCH" missed="13" covered="1"/><counter type="LINE" missed="40" covered="4"/><counter type="COMPLEXITY" missed="26" covered="2"/><counter type="METHOD" missed="19" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="258"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="270"><counter type="INSTRUCTION" missed="5" covered="15"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="5" covered="20"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="87"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="247"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="square" desc="()Z" line="277"><counter type="INSTRUCTION" missed="1" covered="12"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="triangular" desc="()Z" line="289"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diagonal" desc="()Z" line="321"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="symmetric" desc="()Z" line="353"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="skewSymmetric" desc="()Z" line="365"><counter type="INSTRUCTION" missed="1" covered="12"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="375"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="columnIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="385"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="element" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Object;" line="407"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cells" desc="()Lcom/google/common/collect/ImmutableSet;" line="423"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="row" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="440"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="column" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="460"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rows" desc="()Lcom/google/common/collect/ImmutableMap;" line="473"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="columns" desc="()Lcom/google/common/collect/ImmutableMap;" line="483"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="493"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()J" line="503"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rowSize" desc="()I" line="513"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnSize" desc="()I" line="523"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="533"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="543"><counter type="INSTRUCTION" missed="4" covered="15"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="560"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getTable" desc="()Lcom/google/common/collect/ImmutableTable;" line="564"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="61"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="142" covered="103"/><counter type="BRANCH" missed="10" covered="12"/><counter type="LINE" missed="25" covered="19"/><counter type="COMPLEXITY" missed="21" covered="14"/><counter type="METHOD" missed="11" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="64"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="93"><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="121"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="150"><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="177"><counter type="INSTRUCTION" missed="41" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="201"><counter type="INSTRUCTION" missed="45" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="224"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="250"><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="274"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="292"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="307"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="319"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="trace" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="332"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="trace" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="349"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="determinant" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="365"><counter type="INSTRUCTION" missed="81" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="determinant" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="394"><counter type="INSTRUCTION" missed="89" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="13" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="421"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="441"><counter type="INSTRUCTION" missed="55" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="468"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsColumnSumNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="482"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="496"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxAbsRowSumNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="510"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigDecimal;" line="524"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNormPow2" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="536"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="frobeniusNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="550"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="560"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="572"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="upperTriangular" desc="()Z" line="583"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="594"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="605"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invertible" desc="()Z" line="617"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="639"><counter type="INSTRUCTION" missed="50" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="666"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="leibnizFormula" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="685"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="leibnizFormula" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="713"><counter type="INSTRUCTION" missed="87" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="16" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ruleOfSarrus" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="742"><counter type="INSTRUCTION" missed="174" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="ruleOfSarrus" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="760"><counter type="INSTRUCTION" missed="195" covered="0"/><counter type="LINE" missed="15" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;" line="792"><counter type="INSTRUCTION" missed="2" covered="21"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$identity$38" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="607"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$identity$37" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="606"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$lowerTriangular$36" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="595"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$lowerTriangular$35" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="594"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$34" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="584"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$upperTriangular$33" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="583"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxNorm$32" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Ljava/math/BigDecimal;" line="573"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$frobeniusNormPow2$31" desc="(Ljava/math/MathContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="538"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$frobeniusNormPow2$30" desc="(Ljava/math/MathContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Ljava/math/BigDecimal;" line="537"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$29" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Ljava/util/Map;)Ljava/util/Optional;" line="512"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$28" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="513"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$27" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Ljava/math/BigDecimal;" line="512"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsRowSumNorm$26" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="497"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$25" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Ljava/util/Map;)Ljava/util/Optional;" line="484"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$24" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="485"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$23" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Ljava/math/BigDecimal;" line="484"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$maxAbsColumnSumNorm$22" desc="(Ljava/util/Map;)Ljava/util/Optional;" line="469"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$minor$21" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="450"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$transpose$20" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="422"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$determinant$19" desc="(Ljava/math/MathContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="399"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$determinant$18" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="398"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$determinant$17" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="368"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$trace$16" desc="(Ljava/math/MathContext;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="353"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$trace$15" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="352"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$trace$14" desc="(Lcom/google/common/collect/Table$Cell;)Z" line="334"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$13" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;Lcom/google/common/collect/Table$Cell;)V" line="296"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$scalarMultiply$12" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/google/common/collect/Table$Cell;)V" line="277"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$11" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;Ljava/lang/Integer;Ljava/util/Map;)V" line="256"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$10" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/MathContext;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="258"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$9" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="229"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$8" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="231"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="206"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$6" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="207"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="181"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$4" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="182"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Ljava/math/MathContext;Lcom/google/common/collect/Table$Cell;)V" line="158"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$subtract$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="128"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Ljava/math/MathContext;Lcom/google/common/collect/Table$Cell;)V" line="101"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="71"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="1951" covered="179"/><counter type="BRANCH" missed="100" covered="16"/><counter type="LINE" missed="253" covered="18"/><counter type="COMPLEXITY" missed="117" covered="19"/><counter type="METHOD" missed="65" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="Vectors.java"><line nr="54" mi="0" ci="8" mb="0" cb="2"/><line nr="55" mi="0" ci="7" mb="0" cb="0"/><line nr="69" mi="0" ci="8" mb="0" cb="2"/><line nr="70" mi="0" ci="7" mb="0" cb="0"/><line nr="84" mi="0" ci="8" mb="0" cb="2"/><line nr="85" mi="0" ci="7" mb="0" cb="0"/><line nr="99" mi="0" ci="8" mb="0" cb="2"/><line nr="100" mi="0" ci="7" mb="0" cb="0"/><line nr="114" mi="0" ci="4" mb="0" cb="0"/><line nr="115" mi="0" ci="4" mb="0" cb="0"/><line nr="116" mi="0" ci="18" mb="0" cb="0"/><line nr="117" mi="0" ci="3" mb="0" cb="0"/><line nr="131" mi="4" ci="0" mb="0" cb="0"/><line nr="132" mi="4" ci="0" mb="0" cb="0"/><line nr="133" mi="18" ci="0" mb="0" cb="0"/><line nr="134" mi="3" ci="0" mb="0" cb="0"/><line nr="148" mi="4" ci="0" mb="0" cb="0"/><line nr="149" mi="4" ci="0" mb="0" cb="0"/><line nr="150" mi="18" ci="0" mb="0" cb="0"/><line nr="151" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="58" covered="89"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="8" covered="12"/><counter type="COMPLEXITY" missed="4" covered="10"/><counter type="METHOD" missed="4" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="RealComplexNumberMatrix.java"><line nr="48" mi="0" ci="3" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="64" mi="4" ci="0" mb="0" cb="0"/><line nr="65" mi="14" ci="0" mb="2" cb="0"/><line nr="66" mi="4" ci="0" mb="0" cb="0"/><line nr="67" mi="14" ci="0" mb="2" cb="0"/><line nr="68" mi="4" ci="0" mb="0" cb="0"/><line nr="69" mi="6" ci="0" mb="0" cb="0"/><line nr="70" mi="7" ci="0" mb="0" cb="0"/><line nr="71" mi="4" ci="0" mb="0" cb="0"/><line nr="72" mi="4" ci="0" mb="0" cb="0"/><line nr="73" mi="14" ci="0" mb="0" cb="0"/><line nr="74" mi="1" ci="0" mb="0" cb="0"/><line nr="75" mi="3" ci="0" mb="0" cb="0"/><line nr="93" mi="4" ci="0" mb="0" cb="0"/><line nr="94" mi="4" ci="0" mb="0" cb="0"/><line nr="95" mi="14" ci="0" mb="2" cb="0"/><line nr="96" mi="4" ci="0" mb="0" cb="0"/><line nr="97" mi="14" ci="0" mb="2" cb="0"/><line nr="98" mi="4" ci="0" mb="0" cb="0"/><line nr="99" mi="6" ci="0" mb="0" cb="0"/><line nr="100" mi="8" ci="0" mb="0" cb="0"/><line nr="101" mi="4" ci="0" mb="0" cb="0"/><line nr="102" mi="4" ci="0" mb="0" cb="0"/><line nr="103" mi="15" ci="0" mb="0" cb="0"/><line nr="104" mi="1" ci="0" mb="0" cb="0"/><line nr="105" mi="3" ci="0" mb="0" cb="0"/><line nr="121" mi="4" ci="0" mb="0" cb="0"/><line nr="122" mi="14" ci="0" mb="2" cb="0"/><line nr="123" mi="4" ci="0" mb="0" cb="0"/><line nr="124" mi="14" ci="0" mb="2" cb="0"/><line nr="125" mi="4" ci="0" mb="0" cb="0"/><line nr="126" mi="6" ci="0" mb="0" cb="0"/><line nr="127" mi="7" ci="0" mb="0" cb="0"/><line nr="128" mi="4" ci="0" mb="0" cb="0"/><line nr="129" mi="4" ci="0" mb="0" cb="0"/><line nr="130" mi="14" ci="0" mb="0" cb="0"/><line nr="131" mi="1" ci="0" mb="0" cb="0"/><line nr="132" mi="3" ci="0" mb="0" cb="0"/><line nr="150" mi="4" ci="0" mb="0" cb="0"/><line nr="151" mi="4" ci="0" mb="0" cb="0"/><line nr="152" mi="14" ci="0" mb="2" cb="0"/><line nr="153" mi="4" ci="0" mb="0" cb="0"/><line nr="154" mi="14" ci="0" mb="2" cb="0"/><line nr="155" mi="4" ci="0" mb="0" cb="0"/><line nr="156" mi="6" ci="0" mb="0" cb="0"/><line nr="157" mi="8" ci="0" mb="0" cb="0"/><line nr="158" mi="4" ci="0" mb="0" cb="0"/><line nr="159" mi="4" ci="0" mb="0" cb="0"/><line nr="160" mi="6" ci="0" mb="0" cb="0"/><line nr="161" mi="9" ci="0" mb="0" cb="0"/><line nr="162" mi="1" ci="0" mb="0" cb="0"/><line nr="163" mi="3" ci="0" mb="0" cb="0"/><line nr="177" mi="4" ci="0" mb="0" cb="0"/><line nr="178" mi="14" ci="0" mb="2" cb="0"/><line nr="179" mi="4" ci="0" mb="0" cb="0"/><line nr="180" mi="8" ci="0" mb="0" cb="0"/><line nr="181" mi="17" ci="0" mb="0" cb="0"/><line nr="182" mi="5" ci="0" mb="0" cb="0"/><line nr="183" mi="6" ci="0" mb="0" cb="0"/><line nr="184" mi="1" ci="0" mb="0" cb="0"/><line nr="185" mi="3" ci="0" mb="0" cb="0"/><line nr="201" mi="4" ci="0" mb="0" cb="0"/><line nr="202" mi="4" ci="0" mb="0" cb="0"/><line nr="203" mi="14" ci="0" mb="2" cb="0"/><line nr="204" mi="4" ci="0" mb="0" cb="0"/><line nr="205" mi="8" ci="0" mb="0" cb="0"/><line nr="206" mi="17" ci="0" mb="0" cb="0"/><line nr="207" mi="5" ci="0" mb="0" cb="0"/><line nr="208" mi="6" ci="0" mb="0" cb="0"/><line nr="209" mi="1" ci="0" mb="0" cb="0"/><line nr="210" mi="3" ci="0" mb="0" cb="0"/><line nr="224" mi="4" ci="0" mb="0" cb="0"/><line nr="225" mi="14" ci="0" mb="2" cb="0"/><line nr="226" mi="4" ci="0" mb="0" cb="0"/><line nr="227" mi="2" ci="0" mb="0" cb="0"/><line nr="228" mi="4" ci="0" mb="0" cb="0"/><line nr="229" mi="14" ci="0" mb="0" cb="0"/><line nr="231" mi="11" ci="0" mb="2" cb="0"/><line nr="232" mi="12" ci="0" mb="0" cb="0"/><line nr="233" mi="1" ci="0" mb="0" cb="0"/><line nr="234" mi="3" ci="0" mb="0" cb="0"/><line nr="250" mi="4" ci="0" mb="0" cb="0"/><line nr="251" mi="4" ci="0" mb="0" cb="0"/><line nr="252" mi="14" ci="0" mb="2" cb="0"/><line nr="253" mi="4" ci="0" mb="0" cb="0"/><line nr="254" mi="2" ci="0" mb="0" cb="0"/><line nr="255" mi="4" ci="0" mb="0" cb="0"/><line nr="256" mi="16" ci="0" mb="0" cb="0"/><line nr="258" mi="11" ci="0" mb="2" cb="0"/><line nr="259" mi="8" ci="0" mb="0" cb="0"/><line nr="260" mi="6" ci="0" mb="0" cb="0"/><line nr="261" mi="1" ci="0" mb="0" cb="0"/><line nr="262" mi="3" ci="0" mb="0" cb="0"/><line nr="274" mi="0" ci="4" mb="0" cb="0"/><line nr="275" mi="0" ci="10" mb="0" cb="0"/><line nr="276" mi="0" ci="6" mb="0" cb="0"/><line nr="277" mi="0" ci="17" mb="0" cb="0"/><line nr="278" mi="0" ci="3" mb="0" cb="0"/><line nr="292" mi="4" ci="0" mb="0" cb="0"/><line nr="293" mi="4" ci="0" mb="0" cb="0"/><line nr="294" mi="10" ci="0" mb="0" cb="0"/><line nr="295" mi="8" ci="0" mb="0" cb="0"/><line nr="296" mi="17" ci="0" mb="0" cb="0"/><line nr="297" mi="3" ci="0" mb="0" cb="0"/><line nr="307" mi="0" ci="5" mb="0" cb="0"/><line nr="319" mi="4" ci="0" mb="0" cb="0"/><line nr="320" mi="7" ci="0" mb="0" cb="0"/><line nr="332" mi="10" ci="0" mb="0" cb="0"/><line nr="333" mi="2" ci="0" mb="0" cb="0"/><line nr="334" mi="20" ci="0" mb="2" cb="0"/><line nr="335" mi="5" ci="0" mb="0" cb="0"/><line nr="349" mi="4" ci="0" mb="0" cb="0"/><line nr="350" mi="10" ci="0" mb="0" cb="0"/><line nr="351" mi="2" ci="0" mb="0" cb="0"/><line nr="352" mi="20" ci="0" mb="2" cb="0"/><line nr="353" mi="11" ci="0" mb="0" cb="0"/><line nr="365" mi="10" ci="0" mb="0" cb="0"/><line nr="366" mi="2" ci="0" mb="0" cb="0"/><line nr="367" mi="3" ci="0" mb="2" cb="0"/><line nr="368" mi="20" ci="0" mb="2" cb="0"/><line nr="369" mi="5" ci="0" mb="0" cb="0"/><line nr="371" mi="5" ci="0" mb="0" cb="0"/><line nr="372" mi="3" ci="0" mb="2" cb="0"/><line nr="373" mi="3" ci="0" mb="0" cb="0"/><line nr="375" mi="3" ci="0" mb="2" cb="0"/><line nr="376" mi="3" ci="0" mb="0" cb="0"/><line nr="380" mi="36" ci="0" mb="0" cb="0"/><line nr="394" mi="4" ci="0" mb="0" cb="0"/><line nr="395" mi="10" ci="0" mb="0" cb="0"/><line nr="396" mi="2" ci="0" mb="0" cb="0"/><line nr="397" mi="3" ci="0" mb="2" cb="0"/><line nr="398" mi="20" ci="0" mb="2" cb="0"/><line nr="399" mi="11" ci="0" mb="0" cb="0"/><line nr="401" mi="5" ci="0" mb="0" cb="0"/><line nr="402" mi="3" ci="0" mb="2" cb="0"/><line nr="403" mi="3" ci="0" mb="0" cb="0"/><line nr="405" mi="3" ci="0" mb="2" cb="0"/><line nr="406" mi="3" ci="0" mb="0" cb="0"/><line nr="410" mi="22" ci="0" mb="0" cb="0"/><line nr="411" mi="17" ci="0" mb="0" cb="0"/><line nr="421" mi="0" ci="10" mb="0" cb="0"/><line nr="422" mi="0" ci="20" mb="0" cb="0"/><line nr="423" mi="0" ci="3" mb="0" cb="0"/><line nr="441" mi="4" ci="0" mb="0" cb="0"/><line nr="442" mi="4" ci="0" mb="0" cb="0"/><line nr="443" mi="8" ci="0" mb="0" cb="0"/><line nr="444" mi="3" ci="0" mb="0" cb="0"/><line nr="445" mi="8" ci="0" mb="0" cb="0"/><line nr="446" mi="3" ci="0" mb="0" cb="0"/><line nr="447" mi="2" ci="0" mb="0" cb="0"/><line nr="448" mi="12" ci="0" mb="0" cb="0"/><line nr="449" mi="8" ci="0" mb="0" cb="0"/><line nr="450" mi="4" ci="0" mb="0" cb="0"/><line nr="451" mi="4" ci="0" mb="0" cb="0"/><line nr="452" mi="8" ci="0" mb="4" cb="0"/><line nr="453" mi="13" ci="0" mb="2" cb="0"/><line nr="454" mi="13" ci="0" mb="2" cb="0"/><line nr="455" mi="8" ci="0" mb="0" cb="0"/><line nr="457" mi="1" ci="0" mb="0" cb="0"/><line nr="458" mi="3" ci="0" mb="0" cb="0"/><line nr="468" mi="8" ci="0" mb="0" cb="0"/><line nr="469" mi="10" ci="0" mb="0" cb="0"/><line nr="470" mi="5" ci="0" mb="0" cb="0"/><line nr="482" mi="4" ci="0" mb="0" cb="0"/><line nr="483" mi="9" ci="0" mb="0" cb="0"/><line nr="484" mi="15" ci="0" mb="0" cb="0"/><line nr="485" mi="7" ci="0" mb="0" cb="0"/><line nr="486" mi="5" ci="0" mb="0" cb="0"/><line nr="496" mi="8" ci="0" mb="0" cb="0"/><line nr="497" mi="12" ci="0" mb="0" cb="0"/><line nr="498" mi="3" ci="0" mb="0" cb="0"/><line nr="510" mi="4" ci="0" mb="0" cb="0"/><line nr="511" mi="9" ci="0" mb="0" cb="0"/><line nr="512" mi="15" ci="0" mb="0" cb="0"/><line nr="513" mi="7" ci="0" mb="0" cb="0"/><line nr="514" mi="5" ci="0" mb="0" cb="0"/><line nr="524" mi="11" ci="0" mb="0" cb="0"/><line nr="536" mi="4" ci="0" mb="0" cb="0"/><line nr="537" mi="14" ci="0" mb="0" cb="0"/><line nr="538" mi="8" ci="0" mb="0" cb="0"/><line nr="550" mi="5" ci="0" mb="0" cb="0"/><line nr="560" mi="11" ci="0" mb="0" cb="0"/><line nr="572" mi="4" ci="0" mb="0" cb="0"/><line nr="573" mi="16" ci="0" mb="0" cb="0"/><line nr="583" mi="0" ci="23" mb="1" cb="3"/><line nr="584" mi="0" ci="15" mb="0" cb="4"/><line nr="594" mi="0" ci="23" mb="1" cb="3"/><line nr="595" mi="0" ci="15" mb="0" cb="4"/><line nr="605" mi="6" ci="0" mb="2" cb="0"/><line nr="606" mi="17" ci="0" mb="2" cb="0"/><line nr="607" mi="15" ci="0" mb="4" cb="0"/><line nr="617" mi="3" ci="0" mb="2" cb="0"/><line nr="618" mi="3" ci="0" mb="0" cb="0"/><line nr="619" mi="6" ci="0" mb="2" cb="0"/><line nr="620" mi="10" ci="0" mb="4" cb="0"/><line nr="622" mi="2" ci="0" mb="0" cb="0"/><line nr="639" mi="4" ci="0" mb="0" cb="0"/><line nr="640" mi="4" ci="0" mb="0" cb="0"/><line nr="641" mi="13" ci="0" mb="2" cb="0"/><line nr="642" mi="1" ci="0" mb="0" cb="0"/><line nr="643" mi="2" ci="0" mb="0" cb="0"/><line nr="644" mi="11" ci="0" mb="2" cb="0"/><line nr="645" mi="12" ci="0" mb="0" cb="0"/><line nr="646" mi="1" ci="0" mb="0" cb="0"/><line nr="647" mi="2" ci="0" mb="0" cb="0"/><line nr="666" mi="4" ci="0" mb="0" cb="0"/><line nr="667" mi="4" ci="0" mb="0" cb="0"/><line nr="668" mi="4" ci="0" mb="0" cb="0"/><line nr="669" mi="13" ci="0" mb="2" cb="0"/><line nr="670" mi="1" ci="0" mb="0" cb="0"/><line nr="671" mi="2" ci="0" mb="0" cb="0"/><line nr="672" mi="11" ci="0" mb="2" cb="0"/><line nr="673" mi="14" ci="0" mb="0" cb="0"/><line nr="674" mi="1" ci="0" mb="0" cb="0"/><line nr="675" mi="2" ci="0" mb="0" cb="0"/><line nr="685" mi="2" ci="0" mb="0" cb="0"/><line nr="686" mi="13" ci="0" mb="2" cb="0"/><line nr="687" mi="2" ci="0" mb="0" cb="0"/><line nr="688" mi="2" ci="0" mb="0" cb="0"/><line nr="689" mi="5" ci="0" mb="0" cb="0"/><line nr="690" mi="7" ci="0" mb="2" cb="0"/><line nr="691" mi="5" ci="0" mb="0" cb="0"/><line nr="692" mi="9" ci="0" mb="2" cb="0"/><line nr="693" mi="8" ci="0" mb="2" cb="0"/><line nr="694" mi="1" ci="0" mb="0" cb="0"/><line nr="697" mi="12" ci="0" mb="0" cb="0"/><line nr="699" mi="9" ci="0" mb="0" cb="0"/><line nr="700" mi="1" ci="0" mb="0" cb="0"/><line nr="701" mi="2" ci="0" mb="0" cb="0"/><line nr="713" mi="4" ci="0" mb="0" cb="0"/><line nr="714" mi="2" ci="0" mb="0" cb="0"/><line nr="715" mi="13" ci="0" mb="2" cb="0"/><line nr="716" mi="2" ci="0" mb="0" cb="0"/><line nr="717" mi="2" ci="0" mb="0" cb="0"/><line nr="718" mi="5" ci="0" mb="0" cb="0"/><line nr="719" mi="7" ci="0" mb="2" cb="0"/><line nr="720" mi="5" ci="0" mb="0" cb="0"/><line nr="721" mi="9" ci="0" mb="2" cb="0"/><line nr="722" mi="8" ci="0" mb="2" cb="0"/><line nr="723" mi="1" ci="0" mb="0" cb="0"/><line nr="726" mi="13" ci="0" mb="0" cb="0"/><line nr="728" mi="5" ci="0" mb="0" cb="0"/><line nr="729" mi="8" ci="0" mb="0" cb="0"/><line nr="731" mi="1" ci="0" mb="0" cb="0"/><line nr="732" mi="2" ci="0" mb="0" cb="0"/><line nr="742" mi="27" ci="0" mb="0" cb="0"/><line nr="743" mi="27" ci="0" mb="0" cb="0"/><line nr="744" mi="27" ci="0" mb="0" cb="0"/><line nr="745" mi="27" ci="0" mb="0" cb="0"/><line nr="746" mi="27" ci="0" mb="0" cb="0"/><line nr="747" mi="27" ci="0" mb="0" cb="0"/><line nr="748" mi="12" ci="0" mb="0" cb="0"/><line nr="760" mi="4" ci="0" mb="0" cb="0"/><line nr="761" mi="3" ci="0" mb="0" cb="0"/><line nr="762" mi="26" ci="0" mb="0" cb="0"/><line nr="763" mi="3" ci="0" mb="0" cb="0"/><line nr="764" mi="26" ci="0" mb="0" cb="0"/><line nr="765" mi="3" ci="0" mb="0" cb="0"/><line nr="766" mi="26" ci="0" mb="0" cb="0"/><line nr="767" mi="3" ci="0" mb="0" cb="0"/><line nr="768" mi="26" ci="0" mb="0" cb="0"/><line nr="769" mi="3" ci="0" mb="0" cb="0"/><line nr="770" mi="26" ci="0" mb="0" cb="0"/><line nr="771" mi="3" ci="0" mb="0" cb="0"/><line nr="772" mi="26" ci="0" mb="0" cb="0"/><line nr="773" mi="13" ci="0" mb="0" cb="0"/><line nr="774" mi="4" ci="0" mb="0" cb="0"/><line nr="792" mi="1" ci="7" mb="1" cb="1"/><line nr="793" mi="1" ci="7" mb="1" cb="1"/><line nr="794" mi="0" ci="7" mb="0" cb="0"/><line nr="807" mi="0" ci="4" mb="0" cb="0"/><line nr="808" mi="0" ci="1" mb="0" cb="0"/><line nr="819" mi="0" ci="13" mb="0" cb="0"/><line nr="820" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1951" covered="205"/><counter type="BRANCH" missed="100" covered="16"/><counter type="LINE" missed="253" covered="22"/><counter type="COMPLEXITY" missed="117" covered="22"/><counter type="METHOD" missed="65" covered="16"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="SimpleComplexNumberMatrix.java"><line nr="49" mi="0" ci="3" mb="0" cb="0"/><line nr="50" mi="0" ci="1" mb="0" cb="0"/><line nr="65" mi="4" ci="0" mb="0" cb="0"/><line nr="66" mi="14" ci="0" mb="2" cb="0"/><line nr="67" mi="4" ci="0" mb="0" cb="0"/><line nr="68" mi="14" ci="0" mb="2" cb="0"/><line nr="69" mi="4" ci="0" mb="0" cb="0"/><line nr="70" mi="6" ci="0" mb="0" cb="0"/><line nr="71" mi="7" ci="0" mb="0" cb="0"/><line nr="72" mi="4" ci="0" mb="0" cb="0"/><line nr="73" mi="4" ci="0" mb="0" cb="0"/><line nr="74" mi="14" ci="0" mb="0" cb="0"/><line nr="75" mi="1" ci="0" mb="0" cb="0"/><line nr="76" mi="3" ci="0" mb="0" cb="0"/><line nr="92" mi="4" ci="0" mb="0" cb="0"/><line nr="93" mi="14" ci="0" mb="2" cb="0"/><line nr="94" mi="4" ci="0" mb="0" cb="0"/><line nr="95" mi="14" ci="0" mb="2" cb="0"/><line nr="96" mi="4" ci="0" mb="0" cb="0"/><line nr="97" mi="6" ci="0" mb="0" cb="0"/><line nr="98" mi="7" ci="0" mb="0" cb="0"/><line nr="99" mi="4" ci="0" mb="0" cb="0"/><line nr="100" mi="4" ci="0" mb="0" cb="0"/><line nr="101" mi="14" ci="0" mb="0" cb="0"/><line nr="102" mi="1" ci="0" mb="0" cb="0"/><line nr="103" mi="3" ci="0" mb="0" cb="0"/><line nr="117" mi="4" ci="0" mb="0" cb="0"/><line nr="118" mi="14" ci="0" mb="2" cb="0"/><line nr="119" mi="4" ci="0" mb="0" cb="0"/><line nr="120" mi="8" ci="0" mb="0" cb="0"/><line nr="121" mi="17" ci="0" mb="0" cb="0"/><line nr="122" mi="5" ci="0" mb="0" cb="0"/><line nr="123" mi="6" ci="0" mb="0" cb="0"/><line nr="124" mi="1" ci="0" mb="0" cb="0"/><line nr="125" mi="3" ci="0" mb="0" cb="0"/><line nr="139" mi="4" ci="0" mb="0" cb="0"/><line nr="140" mi="14" ci="0" mb="2" cb="0"/><line nr="141" mi="4" ci="0" mb="0" cb="0"/><line nr="142" mi="6" ci="0" mb="0" cb="0"/><line nr="143" mi="9" ci="0" mb="0" cb="0"/><line nr="144" mi="7" ci="0" mb="0" cb="0"/><line nr="145" mi="12" ci="0" mb="0" cb="0"/><line nr="146" mi="4" ci="0" mb="0" cb="0"/><line nr="147" mi="4" ci="0" mb="0" cb="0"/><line nr="148" mi="1" ci="0" mb="0" cb="0"/><line nr="149" mi="3" ci="0" mb="0" cb="0"/><line nr="166" mi="4" ci="0" mb="0" cb="0"/><line nr="167" mi="4" ci="0" mb="0" cb="0"/><line nr="168" mi="13" ci="0" mb="2" cb="0"/><line nr="169" mi="1" ci="0" mb="0" cb="0"/><line nr="170" mi="2" ci="0" mb="0" cb="0"/><line nr="171" mi="11" ci="0" mb="2" cb="0"/><line nr="172" mi="12" ci="0" mb="0" cb="0"/><line nr="173" mi="1" ci="0" mb="0" cb="0"/><line nr="174" mi="2" ci="0" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="187" mi="0" ci="10" mb="0" cb="0"/><line nr="188" mi="0" ci="6" mb="0" cb="0"/><line nr="189" mi="0" ci="17" mb="0" cb="0"/><line nr="190" mi="0" ci="3" mb="0" cb="0"/><line nr="200" mi="0" ci="5" mb="0" cb="0"/><line nr="212" mi="10" ci="0" mb="0" cb="0"/><line nr="213" mi="2" ci="0" mb="0" cb="0"/><line nr="214" mi="20" ci="0" mb="2" cb="0"/><line nr="215" mi="5" ci="0" mb="0" cb="0"/><line nr="227" mi="10" ci="0" mb="0" cb="0"/><line nr="228" mi="2" ci="0" mb="0" cb="0"/><line nr="229" mi="3" ci="0" mb="2" cb="0"/><line nr="230" mi="20" ci="0" mb="2" cb="0"/><line nr="231" mi="5" ci="0" mb="0" cb="0"/><line nr="233" mi="5" ci="0" mb="0" cb="0"/><line nr="234" mi="3" ci="0" mb="2" cb="0"/><line nr="235" mi="3" ci="0" mb="0" cb="0"/><line nr="237" mi="3" ci="0" mb="2" cb="0"/><line nr="238" mi="3" ci="0" mb="0" cb="0"/><line nr="242" mi="36" ci="0" mb="0" cb="0"/><line nr="252" mi="2" ci="0" mb="0" cb="0"/><line nr="253" mi="13" ci="0" mb="2" cb="0"/><line nr="254" mi="2" ci="0" mb="0" cb="0"/><line nr="255" mi="2" ci="0" mb="0" cb="0"/><line nr="256" mi="5" ci="0" mb="0" cb="0"/><line nr="257" mi="7" ci="0" mb="2" cb="0"/><line nr="258" mi="5" ci="0" mb="0" cb="0"/><line nr="259" mi="9" ci="0" mb="2" cb="0"/><line nr="260" mi="8" ci="0" mb="2" cb="0"/><line nr="261" mi="1" ci="0" mb="0" cb="0"/><line nr="264" mi="12" ci="0" mb="0" cb="0"/><line nr="266" mi="9" ci="0" mb="0" cb="0"/><line nr="267" mi="1" ci="0" mb="0" cb="0"/><line nr="268" mi="2" ci="0" mb="0" cb="0"/><line nr="278" mi="27" ci="0" mb="0" cb="0"/><line nr="279" mi="27" ci="0" mb="0" cb="0"/><line nr="280" mi="27" ci="0" mb="0" cb="0"/><line nr="281" mi="27" ci="0" mb="0" cb="0"/><line nr="282" mi="27" ci="0" mb="0" cb="0"/><line nr="283" mi="27" ci="0" mb="0" cb="0"/><line nr="284" mi="12" ci="0" mb="0" cb="0"/><line nr="294" mi="0" ci="10" mb="0" cb="0"/><line nr="295" mi="0" ci="20" mb="0" cb="0"/><line nr="296" mi="0" ci="3" mb="0" cb="0"/><line nr="306" mi="4" ci="0" mb="0" cb="0"/><line nr="307" mi="4" ci="0" mb="0" cb="0"/><line nr="308" mi="8" ci="0" mb="0" cb="0"/><line nr="309" mi="3" ci="0" mb="0" cb="0"/><line nr="310" mi="8" ci="0" mb="0" cb="0"/><line nr="311" mi="3" ci="0" mb="0" cb="0"/><line nr="312" mi="2" ci="0" mb="0" cb="0"/><line nr="313" mi="12" ci="0" mb="0" cb="0"/><line nr="314" mi="8" ci="0" mb="0" cb="0"/><line nr="315" mi="4" ci="0" mb="0" cb="0"/><line nr="316" mi="4" ci="0" mb="0" cb="0"/><line nr="317" mi="8" ci="0" mb="4" cb="0"/><line nr="318" mi="13" ci="0" mb="2" cb="0"/><line nr="319" mi="13" ci="0" mb="2" cb="0"/><line nr="320" mi="8" ci="0" mb="0" cb="0"/><line nr="322" mi="1" ci="0" mb="0" cb="0"/><line nr="323" mi="3" ci="0" mb="0" cb="0"/><line nr="333" mi="8" ci="0" mb="0" cb="0"/><line nr="334" mi="10" ci="0" mb="0" cb="0"/><line nr="335" mi="5" ci="0" mb="0" cb="0"/><line nr="345" mi="8" ci="0" mb="0" cb="0"/><line nr="346" mi="10" ci="0" mb="0" cb="0"/><line nr="347" mi="5" ci="0" mb="0" cb="0"/><line nr="357" mi="11" ci="0" mb="0" cb="0"/><line nr="369" mi="5" ci="0" mb="0" cb="0"/><line nr="379" mi="11" ci="0" mb="0" cb="0"/><line nr="389" mi="0" ci="23" mb="1" cb="3"/><line nr="390" mi="0" ci="15" mb="0" cb="4"/><line nr="400" mi="0" ci="23" mb="1" cb="3"/><line nr="401" mi="3" ci="12" mb="2" cb="2"/><line nr="411" mi="6" ci="0" mb="2" cb="0"/><line nr="412" mi="17" ci="0" mb="2" cb="0"/><line nr="413" mi="15" ci="0" mb="4" cb="0"/><line nr="423" mi="3" ci="0" mb="2" cb="0"/><line nr="424" mi="3" ci="0" mb="0" cb="0"/><line nr="425" mi="12" ci="0" mb="4" cb="0"/><line nr="426" mi="4" ci="0" mb="2" cb="0"/><line nr="427" mi="6" ci="0" mb="2" cb="0"/><line nr="429" mi="2" ci="0" mb="0" cb="0"/><line nr="447" mi="1" ci="7" mb="1" cb="1"/><line nr="448" mi="1" ci="7" mb="1" cb="1"/><line nr="449" mi="0" ci="7" mb="0" cb="0"/><line nr="461" mi="0" ci="4" mb="0" cb="0"/><line nr="462" mi="0" ci="1" mb="0" cb="0"/><line nr="471" mi="0" ci="13" mb="0" cb="0"/><line nr="472" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="972" covered="202"/><counter type="BRANCH" missed="66" covered="14"/><counter type="LINE" missed="124" covered="22"/><counter type="COMPLEXITY" missed="66" covered="20"/><counter type="METHOD" missed="30" covered="16"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractVectorBuilder.java"><line nr="48" mi="0" ci="5" mb="0" cb="0"/><line nr="63" mi="0" ci="2" mb="0" cb="0"/><line nr="64" mi="1" ci="7" mb="1" cb="1"/><line nr="65" mi="0" ci="3" mb="0" cb="0"/><line nr="66" mi="0" ci="1" mb="0" cb="0"/><line nr="81" mi="4" ci="0" mb="0" cb="0"/><line nr="82" mi="17" ci="0" mb="4" cb="0"/><line nr="83" mi="5" ci="0" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="6" mb="0" cb="0"/><line nr="103" mi="1" ci="13" mb="1" cb="1"/><line nr="104" mi="0" ci="7" mb="0" cb="0"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="109" mi="0" ci="2" mb="0" cb="0"/><line nr="129" mi="4" ci="0" mb="0" cb="0"/><line nr="130" mi="4" ci="0" mb="0" cb="0"/><line nr="131" mi="17" ci="0" mb="4" cb="0"/><line nr="132" mi="6" ci="0" mb="0" cb="0"/><line nr="135" mi="2" ci="0" mb="0" cb="0"/><line nr="137" mi="2" ci="0" mb="0" cb="0"/><line nr="151" mi="0" ci="4" mb="0" cb="0"/><line nr="152" mi="0" ci="16" mb="0" cb="0"/><line nr="155" mi="0" ci="2" mb="0" cb="0"/><line nr="157" mi="0" ci="2" mb="0" cb="0"/><line nr="172" mi="4" ci="0" mb="0" cb="0"/><line nr="173" mi="7" ci="0" mb="0" cb="0"/><line nr="174" mi="3" ci="0" mb="2" cb="0"/><line nr="175" mi="8" ci="0" mb="0" cb="0"/><line nr="177" mi="1" ci="0" mb="0" cb="0"/><line nr="180" mi="2" ci="0" mb="0" cb="0"/><line nr="182" mi="2" ci="0" mb="0" cb="0"/><line nr="192" mi="12" ci="0" mb="0" cb="0"/><line nr="196" mi="3" ci="0" mb="0" cb="0"/><line nr="200" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="108" covered="76"/><counter type="BRANCH" missed="12" covered="2"/><counter type="LINE" missed="19" covered="15"/><counter type="COMPLEXITY" missed="14" covered="4"/><counter type="METHOD" missed="7" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigDecimalVector.java"><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="1" ci="7" mb="1" cb="1"/><line nr="56" mi="0" ci="6" mb="0" cb="0"/><line nr="70" mi="4" ci="0" mb="0" cb="0"/><line nr="71" mi="15" ci="0" mb="2" cb="0"/><line nr="72" mi="1" ci="0" mb="0" cb="0"/><line nr="73" mi="5" ci="0" mb="0" cb="0"/><line nr="74" mi="17" ci="0" mb="0" cb="0"/><line nr="75" mi="3" ci="0" mb="0" cb="0"/><line nr="91" mi="4" ci="0" mb="0" cb="0"/><line nr="92" mi="4" ci="0" mb="0" cb="0"/><line nr="93" mi="15" ci="0" mb="2" cb="0"/><line nr="94" mi="1" ci="0" mb="0" cb="0"/><line nr="95" mi="5" ci="0" mb="0" cb="0"/><line nr="96" mi="19" ci="0" mb="0" cb="0"/><line nr="97" mi="3" ci="0" mb="0" cb="0"/><line nr="111" mi="4" ci="0" mb="0" cb="0"/><line nr="112" mi="15" ci="0" mb="2" cb="0"/><line nr="113" mi="1" ci="0" mb="0" cb="0"/><line nr="114" mi="5" ci="0" mb="0" cb="0"/><line nr="115" mi="17" ci="0" mb="0" cb="0"/><line nr="116" mi="3" ci="0" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="4" mb="0" cb="0"/><line nr="134" mi="1" ci="14" mb="1" cb="1"/><line nr="135" mi="0" ci="1" mb="0" cb="0"/><line nr="136" mi="0" ci="5" mb="0" cb="0"/><line nr="137" mi="0" ci="19" mb="0" cb="0"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><line nr="152" mi="0" ci="4" mb="0" cb="0"/><line nr="153" mi="1" ci="15" mb="1" cb="1"/><line nr="154" mi="0" ci="20" mb="0" cb="0"/><line nr="155" mi="0" ci="3" mb="0" cb="0"/><line nr="171" mi="4" ci="0" mb="0" cb="0"/><line nr="172" mi="4" ci="0" mb="0" cb="0"/><line nr="173" mi="16" ci="0" mb="2" cb="0"/><line nr="174" mi="8" ci="0" mb="0" cb="0"/><line nr="175" mi="15" ci="0" mb="0" cb="0"/><line nr="176" mi="8" ci="0" mb="0" cb="0"/><line nr="188" mi="4" ci="0" mb="0" cb="0"/><line nr="189" mi="5" ci="0" mb="0" cb="0"/><line nr="190" mi="15" ci="0" mb="0" cb="0"/><line nr="191" mi="3" ci="0" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="206" mi="0" ci="4" mb="0" cb="0"/><line nr="207" mi="0" ci="5" mb="0" cb="0"/><line nr="208" mi="0" ci="17" mb="0" cb="0"/><line nr="209" mi="0" ci="3" mb="0" cb="0"/><line nr="219" mi="5" ci="0" mb="0" cb="0"/><line nr="231" mi="4" ci="0" mb="0" cb="0"/><line nr="232" mi="7" ci="0" mb="0" cb="0"/><line nr="246" mi="4" ci="0" mb="0" cb="0"/><line nr="247" mi="16" ci="0" mb="2" cb="0"/><line nr="248" mi="10" ci="0" mb="2" cb="0"/><line nr="264" mi="4" ci="0" mb="0" cb="0"/><line nr="265" mi="4" ci="0" mb="0" cb="0"/><line nr="266" mi="16" ci="0" mb="2" cb="0"/><line nr="267" mi="11" ci="0" mb="2" cb="0"/><line nr="277" mi="0" ci="11" mb="0" cb="0"/><line nr="289" mi="4" ci="0" mb="0" cb="0"/><line nr="290" mi="14" ci="0" mb="0" cb="0"/><line nr="291" mi="8" ci="0" mb="0" cb="0"/><line nr="301" mi="0" ci="4" mb="0" cb="0"/><line nr="313" mi="4" ci="0" mb="0" cb="0"/><line nr="314" mi="5" ci="0" mb="0" cb="0"/><line nr="325" mi="4" ci="0" mb="0" cb="0"/><line nr="338" mi="0" ci="4" mb="0" cb="0"/><line nr="339" mi="0" ci="5" mb="0" cb="0"/><line nr="349" mi="0" ci="11" mb="0" cb="0"/><line nr="361" mi="4" ci="0" mb="0" cb="0"/><line nr="362" mi="16" ci="0" mb="0" cb="0"/><line nr="378" mi="4" ci="0" mb="0" cb="0"/><line nr="379" mi="4" ci="0" mb="0" cb="0"/><line nr="380" mi="16" ci="0" mb="2" cb="0"/><line nr="381" mi="7" ci="0" mb="0" cb="0"/><line nr="397" mi="0" ci="4" mb="0" cb="0"/><line nr="398" mi="0" ci="4" mb="0" cb="0"/><line nr="399" mi="0" ci="16" mb="0" cb="2"/><line nr="400" mi="0" ci="8" mb="0" cb="0"/><line nr="414" mi="4" ci="0" mb="0" cb="0"/><line nr="415" mi="16" ci="0" mb="2" cb="0"/><line nr="416" mi="7" ci="0" mb="0" cb="0"/><line nr="417" mi="23" ci="0" mb="0" cb="0"/><line nr="418" mi="9" ci="0" mb="0" cb="0"/><line nr="419" mi="3" ci="0" mb="0" cb="0"/><line nr="435" mi="4" ci="0" mb="0" cb="0"/><line nr="436" mi="4" ci="0" mb="0" cb="0"/><line nr="437" mi="16" ci="0" mb="2" cb="0"/><line nr="438" mi="7" ci="0" mb="0" cb="0"/><line nr="439" mi="25" ci="0" mb="0" cb="0"/><line nr="440" mi="10" ci="0" mb="0" cb="0"/><line nr="441" mi="3" ci="0" mb="0" cb="0"/><line nr="455" mi="7" ci="0" mb="0" cb="0"/><line nr="456" mi="20" ci="0" mb="4" cb="0"/><line nr="468" mi="0" ci="3" mb="0" cb="0"/><line nr="469" mi="0" ci="1" mb="0" cb="0"/><line nr="481" mi="0" ci="10" mb="0" cb="0"/><line nr="482" mi="0" ci="11" mb="0" cb="0"/><line nr="483" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="555" covered="242"/><counter type="BRANCH" missed="29" covered="5"/><counter type="LINE" missed="66" covered="34"/><counter type="COMPLEXITY" missed="47" covered="17"/><counter type="METHOD" missed="31" covered="16"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigIntegerMatrix.java"><line nr="47" mi="0" ci="3" mb="0" cb="0"/><line nr="48" mi="0" ci="1" mb="0" cb="0"/><line nr="63" mi="4" ci="0" mb="0" cb="0"/><line nr="64" mi="14" ci="0" mb="2" cb="0"/><line nr="65" mi="4" ci="0" mb="0" cb="0"/><line nr="66" mi="14" ci="0" mb="2" cb="0"/><line nr="67" mi="4" ci="0" mb="0" cb="0"/><line nr="68" mi="6" ci="0" mb="0" cb="0"/><line nr="69" mi="7" ci="0" mb="0" cb="0"/><line nr="70" mi="4" ci="0" mb="0" cb="0"/><line nr="71" mi="4" ci="0" mb="0" cb="0"/><line nr="72" mi="14" ci="0" mb="0" cb="0"/><line nr="73" mi="1" ci="0" mb="0" cb="0"/><line nr="74" mi="3" ci="0" mb="0" cb="0"/><line nr="90" mi="4" ci="0" mb="0" cb="0"/><line nr="91" mi="14" ci="0" mb="2" cb="0"/><line nr="92" mi="4" ci="0" mb="0" cb="0"/><line nr="93" mi="14" ci="0" mb="2" cb="0"/><line nr="94" mi="4" ci="0" mb="0" cb="0"/><line nr="95" mi="6" ci="0" mb="0" cb="0"/><line nr="96" mi="7" ci="0" mb="0" cb="0"/><line nr="97" mi="4" ci="0" mb="0" cb="0"/><line nr="98" mi="4" ci="0" mb="0" cb="0"/><line nr="99" mi="14" ci="0" mb="0" cb="0"/><line nr="100" mi="1" ci="0" mb="0" cb="0"/><line nr="101" mi="3" ci="0" mb="0" cb="0"/><line nr="115" mi="4" ci="0" mb="0" cb="0"/><line nr="116" mi="14" ci="0" mb="2" cb="0"/><line nr="117" mi="4" ci="0" mb="0" cb="0"/><line nr="118" mi="8" ci="0" mb="0" cb="0"/><line nr="119" mi="17" ci="0" mb="0" cb="0"/><line nr="120" mi="5" ci="0" mb="0" cb="0"/><line nr="121" mi="6" ci="0" mb="0" cb="0"/><line nr="122" mi="1" ci="0" mb="0" cb="0"/><line nr="123" mi="3" ci="0" mb="0" cb="0"/><line nr="137" mi="4" ci="0" mb="0" cb="0"/><line nr="138" mi="14" ci="0" mb="2" cb="0"/><line nr="139" mi="4" ci="0" mb="0" cb="0"/><line nr="140" mi="6" ci="0" mb="0" cb="0"/><line nr="141" mi="9" ci="0" mb="0" cb="0"/><line nr="142" mi="7" ci="0" mb="0" cb="0"/><line nr="143" mi="13" ci="0" mb="0" cb="0"/><line nr="144" mi="3" ci="0" mb="0" cb="0"/><line nr="145" mi="4" ci="0" mb="0" cb="0"/><line nr="146" mi="1" ci="0" mb="0" cb="0"/><line nr="147" mi="3" ci="0" mb="0" cb="0"/><line nr="164" mi="4" ci="0" mb="0" cb="0"/><line nr="165" mi="4" ci="0" mb="0" cb="0"/><line nr="166" mi="13" ci="0" mb="2" cb="0"/><line nr="167" mi="1" ci="0" mb="0" cb="0"/><line nr="168" mi="18" ci="0" mb="0" cb="0"/><line nr="169" mi="3" ci="0" mb="0" cb="0"/><line nr="181" mi="0" ci="4" mb="0" cb="0"/><line nr="182" mi="0" ci="10" mb="0" cb="0"/><line nr="183" mi="0" ci="6" mb="0" cb="0"/><line nr="184" mi="0" ci="17" mb="0" cb="0"/><line nr="185" mi="0" ci="3" mb="0" cb="0"/><line nr="195" mi="0" ci="5" mb="0" cb="0"/><line nr="207" mi="10" ci="0" mb="0" cb="0"/><line nr="208" mi="2" ci="0" mb="0" cb="0"/><line nr="209" mi="20" ci="0" mb="2" cb="0"/><line nr="210" mi="5" ci="0" mb="0" cb="0"/><line nr="222" mi="10" ci="0" mb="0" cb="0"/><line nr="223" mi="2" ci="0" mb="0" cb="0"/><line nr="224" mi="3" ci="0" mb="2" cb="0"/><line nr="225" mi="20" ci="0" mb="2" cb="0"/><line nr="226" mi="5" ci="0" mb="0" cb="0"/><line nr="228" mi="5" ci="0" mb="0" cb="0"/><line nr="229" mi="3" ci="0" mb="2" cb="0"/><line nr="230" mi="3" ci="0" mb="0" cb="0"/><line nr="232" mi="3" ci="0" mb="2" cb="0"/><line nr="233" mi="3" ci="0" mb="0" cb="0"/><line nr="237" mi="36" ci="0" mb="0" cb="0"/><line nr="247" mi="2" ci="0" mb="0" cb="0"/><line nr="248" mi="13" ci="0" mb="2" cb="0"/><line nr="249" mi="2" ci="0" mb="0" cb="0"/><line nr="250" mi="2" ci="0" mb="0" cb="0"/><line nr="251" mi="5" ci="0" mb="0" cb="0"/><line nr="252" mi="7" ci="0" mb="2" cb="0"/><line nr="253" mi="5" ci="0" mb="0" cb="0"/><line nr="254" mi="9" ci="0" mb="2" cb="0"/><line nr="255" mi="7" ci="0" mb="2" cb="0"/><line nr="256" mi="1" ci="0" mb="0" cb="0"/><line nr="259" mi="12" ci="0" mb="0" cb="0"/><line nr="261" mi="9" ci="0" mb="0" cb="0"/><line nr="262" mi="1" ci="0" mb="0" cb="0"/><line nr="263" mi="2" ci="0" mb="0" cb="0"/><line nr="273" mi="27" ci="0" mb="0" cb="0"/><line nr="274" mi="27" ci="0" mb="0" cb="0"/><line nr="275" mi="27" ci="0" mb="0" cb="0"/><line nr="276" mi="27" ci="0" mb="0" cb="0"/><line nr="277" mi="27" ci="0" mb="0" cb="0"/><line nr="278" mi="27" ci="0" mb="0" cb="0"/><line nr="279" mi="12" ci="0" mb="0" cb="0"/><line nr="289" mi="0" ci="10" mb="0" cb="0"/><line nr="290" mi="0" ci="20" mb="0" cb="0"/><line nr="291" mi="0" ci="3" mb="0" cb="0"/><line nr="309" mi="4" ci="0" mb="0" cb="0"/><line nr="310" mi="4" ci="0" mb="0" cb="0"/><line nr="311" mi="8" ci="0" mb="0" cb="0"/><line nr="312" mi="3" ci="0" mb="0" cb="0"/><line nr="313" mi="8" ci="0" mb="0" cb="0"/><line nr="314" mi="3" ci="0" mb="0" cb="0"/><line nr="315" mi="14" ci="0" mb="0" cb="0"/><line nr="316" mi="8" ci="0" mb="0" cb="0"/><line nr="317" mi="4" ci="0" mb="0" cb="0"/><line nr="318" mi="4" ci="0" mb="0" cb="0"/><line nr="319" mi="8" ci="0" mb="4" cb="0"/><line nr="320" mi="13" ci="0" mb="2" cb="0"/><line nr="321" mi="13" ci="0" mb="2" cb="0"/><line nr="322" mi="8" ci="0" mb="0" cb="0"/><line nr="324" mi="1" ci="0" mb="0" cb="0"/><line nr="325" mi="3" ci="0" mb="0" cb="0"/><line nr="335" mi="8" ci="0" mb="0" cb="0"/><line nr="336" mi="12" ci="0" mb="0" cb="0"/><line nr="337" mi="3" ci="0" mb="0" cb="0"/><line nr="347" mi="8" ci="0" mb="0" cb="0"/><line nr="348" mi="12" ci="0" mb="0" cb="0"/><line nr="349" mi="3" ci="0" mb="0" cb="0"/><line nr="359" mi="15" ci="0" mb="0" cb="0"/><line nr="371" mi="5" ci="0" mb="0" cb="0"/><line nr="381" mi="11" ci="0" mb="0" cb="0"/><line nr="391" mi="0" ci="23" mb="1" cb="3"/><line nr="392" mi="0" ci="15" mb="0" cb="4"/><line nr="402" mi="0" ci="23" mb="1" cb="3"/><line nr="403" mi="3" ci="12" mb="2" cb="2"/><line nr="413" mi="6" ci="0" mb="2" cb="0"/><line nr="414" mi="17" ci="0" mb="2" cb="0"/><line nr="415" mi="15" ci="0" mb="4" cb="0"/><line nr="425" mi="3" ci="0" mb="2" cb="0"/><line nr="426" mi="3" ci="0" mb="0" cb="0"/><line nr="427" mi="13" ci="0" mb="4" cb="0"/><line nr="429" mi="2" ci="0" mb="0" cb="0"/><line nr="447" mi="1" ci="7" mb="1" cb="1"/><line nr="448" mi="1" ci="7" mb="1" cb="1"/><line nr="449" mi="0" ci="7" mb="0" cb="0"/><line nr="461" mi="0" ci="4" mb="0" cb="0"/><line nr="462" mi="0" ci="1" mb="0" cb="0"/><line nr="472" mi="0" ci="13" mb="0" cb="0"/><line nr="473" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="959" covered="202"/><counter type="BRANCH" missed="60" covered="14"/><counter type="LINE" missed="118" covered="22"/><counter type="COMPLEXITY" missed="65" covered="20"/><counter type="METHOD" missed="32" covered="16"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractContextMatrix.java"><line nr="54" mi="0" ci="3" mb="0" cb="0"/><line nr="55" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Matrices.java"><line nr="58" mi="0" ci="8" mb="0" cb="2"/><line nr="59" mi="0" ci="8" mb="0" cb="2"/><line nr="60" mi="0" ci="8" mb="0" cb="0"/><line nr="74" mi="0" ci="8" mb="0" cb="2"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="16" mb="0" cb="0"/><line nr="77" mi="0" ci="6" mb="0" cb="0"/><line nr="95" mi="0" ci="8" mb="0" cb="2"/><line nr="96" mi="0" ci="8" mb="0" cb="2"/><line nr="97" mi="0" ci="8" mb="0" cb="0"/><line nr="111" mi="0" ci="8" mb="0" cb="2"/><line nr="112" mi="0" ci="4" mb="0" cb="0"/><line nr="113" mi="0" ci="16" mb="0" cb="0"/><line nr="114" mi="0" ci="6" mb="0" cb="0"/><line nr="133" mi="0" ci="8" mb="0" cb="2"/><line nr="134" mi="0" ci="8" mb="0" cb="2"/><line nr="135" mi="0" ci="8" mb="0" cb="0"/><line nr="149" mi="0" ci="8" mb="0" cb="2"/><line nr="150" mi="0" ci="4" mb="0" cb="0"/><line nr="151" mi="0" ci="16" mb="0" cb="0"/><line nr="152" mi="0" ci="6" mb="0" cb="0"/><line nr="170" mi="0" ci="8" mb="0" cb="2"/><line nr="171" mi="0" ci="8" mb="0" cb="2"/><line nr="172" mi="0" ci="8" mb="0" cb="0"/><line nr="186" mi="0" ci="8" mb="0" cb="2"/><line nr="187" mi="0" ci="4" mb="0" cb="0"/><line nr="188" mi="0" ci="16" mb="0" cb="0"/><line nr="189" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="232"/><counter type="BRANCH" missed="0" covered="24"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="0" covered="24"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractMatrix.java"><line nr="61" mi="0" ci="2" mb="0" cb="0"/><line nr="69" mi="0" ci="3" mb="0" cb="0"/><line nr="87" mi="0" ci="2" mb="0" cb="0"/><line nr="88" mi="0" ci="6" mb="0" cb="0"/><line nr="89" mi="0" ci="1" mb="0" cb="0"/><line nr="247" mi="4" ci="0" mb="0" cb="0"/><line nr="277" mi="1" ci="12" mb="1" cb="1"/><line nr="289" mi="1" ci="9" mb="1" cb="3"/><line nr="321" mi="1" ci="9" mb="2" cb="2"/><line nr="353" mi="1" ci="11" mb="2" cb="2"/><line nr="365" mi="1" ci="12" mb="2" cb="2"/><line nr="375" mi="4" ci="0" mb="0" cb="0"/><line nr="385" mi="4" ci="0" mb="0" cb="0"/><line nr="407" mi="4" ci="0" mb="0" cb="0"/><line nr="408" mi="4" ci="0" mb="0" cb="0"/><line nr="409" mi="9" ci="0" mb="0" cb="0"/><line nr="410" mi="3" ci="0" mb="0" cb="0"/><line nr="411" mi="9" ci="0" mb="0" cb="0"/><line nr="412" mi="3" ci="0" mb="0" cb="0"/><line nr="413" mi="6" ci="0" mb="0" cb="0"/><line nr="423" mi="0" ci="4" mb="0" cb="0"/><line nr="440" mi="4" ci="0" mb="0" cb="0"/><line nr="441" mi="9" ci="0" mb="0" cb="0"/><line nr="442" mi="3" ci="0" mb="0" cb="0"/><line nr="443" mi="5" ci="0" mb="0" cb="0"/><line nr="460" mi="4" ci="0" mb="0" cb="0"/><line nr="461" mi="9" ci="0" mb="0" cb="0"/><line nr="462" mi="3" ci="0" mb="0" cb="0"/><line nr="463" mi="5" ci="0" mb="0" cb="0"/><line nr="473" mi="4" ci="0" mb="0" cb="0"/><line nr="483" mi="4" ci="0" mb="0" cb="0"/><line nr="493" mi="0" ci="4" mb="0" cb="0"/><line nr="503" mi="16" ci="0" mb="0" cb="0"/><line nr="513" mi="0" ci="5" mb="0" cb="0"/><line nr="523" mi="0" ci="5" mb="0" cb="0"/><line nr="533" mi="9" ci="0" mb="0" cb="0"/><line nr="543" mi="0" ci="3" mb="1" cb="1"/><line nr="544" mi="2" ci="0" mb="0" cb="0"/><line nr="546" mi="0" ci="3" mb="1" cb="1"/><line nr="547" mi="2" ci="0" mb="0" cb="0"/><line nr="549" mi="0" ci="3" mb="0" cb="0"/><line nr="550" mi="0" ci="6" mb="0" cb="0"/><line nr="560" mi="8" ci="0" mb="0" cb="0"/><line nr="564" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="142" covered="103"/><counter type="BRANCH" missed="10" covered="12"/><counter type="LINE" missed="25" covered="19"/><counter type="COMPLEXITY" missed="21" covered="14"/><counter type="METHOD" missed="11" covered="13"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractVector.java"><line nr="59" mi="0" ci="3" mb="0" cb="0"/><line nr="78" mi="0" ci="2" mb="0" cb="0"/><line nr="79" mi="0" ci="6" mb="0" cb="0"/><line nr="80" mi="0" ci="1" mb="0" cb="0"/><line nr="198" mi="0" ci="4" mb="0" cb="0"/><line nr="199" mi="0" ci="16" mb="0" cb="2"/><line nr="200" mi="0" ci="5" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="16" mb="0" cb="2"/><line nr="219" mi="0" ci="5" mb="0" cb="0"/><line nr="239" mi="0" ci="4" mb="0" cb="0"/><line nr="240" mi="0" ci="16" mb="0" cb="2"/><line nr="241" mi="0" ci="5" mb="0" cb="0"/><line nr="270" mi="0" ci="4" mb="0" cb="0"/><line nr="271" mi="0" ci="16" mb="0" cb="2"/><line nr="272" mi="0" ci="5" mb="0" cb="0"/><line nr="299" mi="0" ci="4" mb="0" cb="0"/><line nr="300" mi="0" ci="10" mb="0" cb="0"/><line nr="301" mi="0" ci="5" mb="0" cb="0"/><line nr="312" mi="0" ci="4" mb="0" cb="0"/><line nr="322" mi="0" ci="4" mb="0" cb="0"/><line nr="332" mi="0" ci="4" mb="0" cb="0"/><line nr="342" mi="0" ci="9" mb="0" cb="0"/><line nr="352" mi="0" ci="3" mb="0" cb="2"/><line nr="353" mi="0" ci="2" mb="0" cb="0"/><line nr="355" mi="0" ci="3" mb="0" cb="2"/><line nr="356" mi="0" ci="2" mb="0" cb="0"/><line nr="358" mi="0" ci="3" mb="0" cb="0"/><line nr="359" mi="0" ci="6" mb="0" cb="0"/><line nr="369" mi="0" ci="8" mb="0" cb="0"/><line nr="373" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="182"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="31"/><counter type="COMPLEXITY" missed="0" covered="20"/><counter type="METHOD" missed="0" covered="14"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumberVector.java"><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="1" ci="7" mb="1" cb="1"/><line nr="56" mi="0" ci="7" mb="0" cb="0"/><line nr="69" mi="4" ci="0" mb="0" cb="0"/><line nr="70" mi="15" ci="0" mb="2" cb="0"/><line nr="71" mi="1" ci="0" mb="0" cb="0"/><line nr="72" mi="5" ci="0" mb="0" cb="0"/><line nr="73" mi="17" ci="0" mb="0" cb="0"/><line nr="74" mi="3" ci="0" mb="0" cb="0"/><line nr="88" mi="4" ci="0" mb="0" cb="0"/><line nr="89" mi="15" ci="0" mb="2" cb="0"/><line nr="90" mi="1" ci="0" mb="0" cb="0"/><line nr="91" mi="5" ci="0" mb="0" cb="0"/><line nr="92" mi="17" ci="0" mb="0" cb="0"/><line nr="93" mi="3" ci="0" mb="0" cb="0"/><line nr="105" mi="4" ci="0" mb="0" cb="0"/><line nr="106" mi="5" ci="0" mb="0" cb="0"/><line nr="107" mi="15" ci="0" mb="0" cb="0"/><line nr="108" mi="3" ci="0" mb="0" cb="0"/><line nr="118" mi="5" ci="0" mb="0" cb="0"/><line nr="132" mi="4" ci="0" mb="0" cb="0"/><line nr="133" mi="16" ci="0" mb="2" cb="0"/><line nr="134" mi="6" ci="0" mb="0" cb="0"/><line nr="144" mi="11" ci="0" mb="0" cb="0"/><line nr="154" mi="11" ci="0" mb="0" cb="0"/><line nr="165" mi="4" ci="0" mb="0" cb="0"/><line nr="178" mi="4" ci="0" mb="0" cb="0"/><line nr="179" mi="5" ci="0" mb="0" cb="0"/><line nr="193" mi="4" ci="0" mb="0" cb="0"/><line nr="194" mi="16" ci="0" mb="2" cb="0"/><line nr="195" mi="20" ci="0" mb="0" cb="0"/><line nr="196" mi="3" ci="0" mb="0" cb="0"/><line nr="206" mi="11" ci="0" mb="0" cb="0"/><line nr="223" mi="4" ci="0" mb="0" cb="0"/><line nr="224" mi="4" ci="0" mb="0" cb="0"/><line nr="225" mi="16" ci="0" mb="2" cb="0"/><line nr="226" mi="6" ci="0" mb="0" cb="0"/><line nr="240" mi="4" ci="0" mb="0" cb="0"/><line nr="241" mi="16" ci="0" mb="2" cb="0"/><line nr="242" mi="7" ci="0" mb="0" cb="0"/><line nr="243" mi="23" ci="0" mb="0" cb="0"/><line nr="244" mi="9" ci="0" mb="0" cb="0"/><line nr="245" mi="3" ci="0" mb="0" cb="0"/><line nr="258" mi="0" ci="4" mb="0" cb="0"/><line nr="259" mi="0" ci="1" mb="0" cb="0"/><line nr="270" mi="0" ci="7" mb="1" cb="1"/><line nr="271" mi="5" ci="0" mb="0" cb="0"/><line nr="273" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="335" covered="38"/><counter type="BRANCH" missed="14" covered="2"/><counter type="LINE" missed="41" covered="8"/><counter type="COMPLEXITY" missed="27" covered="4"/><counter type="METHOD" missed="19" covered="4"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractMatrixBuilder.java"><line nr="65" mi="0" ci="2" mb="0" cb="0"/><line nr="66" mi="1" ci="7" mb="1" cb="1"/><line nr="67" mi="1" ci="7" mb="1" cb="1"/><line nr="68" mi="0" ci="8" mb="0" cb="0"/><line nr="69" mi="0" ci="8" mb="0" cb="0"/><line nr="70" mi="0" ci="5" mb="0" cb="0"/><line nr="71" mi="0" ci="1" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="0" ci="4" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="9" mb="0" cb="0"/><line nr="101" mi="0" ci="3" mb="0" cb="0"/><line nr="102" mi="0" ci="9" mb="0" cb="0"/><line nr="103" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="7" mb="0" cb="0"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="109" mi="0" ci="2" mb="0" cb="0"/><line nr="124" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="7" mb="0" cb="0"/><line nr="126" mi="0" ci="3" mb="0" cb="2"/><line nr="127" mi="0" ci="11" mb="0" cb="0"/><line nr="129" mi="0" ci="1" mb="0" cb="0"/><line nr="132" mi="0" ci="2" mb="0" cb="0"/><line nr="134" mi="0" ci="2" mb="0" cb="0"/><line nr="148" mi="0" ci="4" mb="0" cb="0"/><line nr="149" mi="0" ci="6" mb="0" cb="0"/><line nr="150" mi="0" ci="18" mb="0" cb="0"/><line nr="153" mi="0" ci="2" mb="0" cb="0"/><line nr="155" mi="0" ci="2" mb="0" cb="0"/><line nr="165" mi="8" ci="0" mb="0" cb="0"/><line nr="169" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="147"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="2" covered="29"/><counter type="COMPLEXITY" missed="4" covered="8"/><counter type="METHOD" missed="2" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigDecimalMatrix.java"><line nr="46" mi="0" ci="3" mb="0" cb="0"/><line nr="47" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="4" ci="0" mb="0" cb="0"/><line nr="63" mi="14" ci="0" mb="2" cb="0"/><line nr="64" mi="4" ci="0" mb="0" cb="0"/><line nr="65" mi="14" ci="0" mb="2" cb="0"/><line nr="66" mi="4" ci="0" mb="0" cb="0"/><line nr="67" mi="6" ci="0" mb="0" cb="0"/><line nr="68" mi="7" ci="0" mb="0" cb="0"/><line nr="69" mi="4" ci="0" mb="0" cb="0"/><line nr="70" mi="4" ci="0" mb="0" cb="0"/><line nr="71" mi="14" ci="0" mb="0" cb="0"/><line nr="72" mi="1" ci="0" mb="0" cb="0"/><line nr="73" mi="3" ci="0" mb="0" cb="0"/><line nr="91" mi="4" ci="0" mb="0" cb="0"/><line nr="92" mi="4" ci="0" mb="0" cb="0"/><line nr="93" mi="14" ci="0" mb="2" cb="0"/><line nr="94" mi="4" ci="0" mb="0" cb="0"/><line nr="95" mi="14" ci="0" mb="2" cb="0"/><line nr="96" mi="4" ci="0" mb="0" cb="0"/><line nr="97" mi="6" ci="0" mb="0" cb="0"/><line nr="98" mi="8" ci="0" mb="0" cb="0"/><line nr="99" mi="4" ci="0" mb="0" cb="0"/><line nr="100" mi="4" ci="0" mb="0" cb="0"/><line nr="101" mi="15" ci="0" mb="0" cb="0"/><line nr="102" mi="1" ci="0" mb="0" cb="0"/><line nr="103" mi="3" ci="0" mb="0" cb="0"/><line nr="119" mi="4" ci="0" mb="0" cb="0"/><line nr="120" mi="14" ci="0" mb="2" cb="0"/><line nr="121" mi="4" ci="0" mb="0" cb="0"/><line nr="122" mi="14" ci="0" mb="2" cb="0"/><line nr="123" mi="4" ci="0" mb="0" cb="0"/><line nr="124" mi="6" ci="0" mb="0" cb="0"/><line nr="125" mi="7" ci="0" mb="0" cb="0"/><line nr="126" mi="4" ci="0" mb="0" cb="0"/><line nr="127" mi="4" ci="0" mb="0" cb="0"/><line nr="128" mi="14" ci="0" mb="0" cb="0"/><line nr="129" mi="1" ci="0" mb="0" cb="0"/><line nr="130" mi="3" ci="0" mb="0" cb="0"/><line nr="148" mi="4" ci="0" mb="0" cb="0"/><line nr="149" mi="4" ci="0" mb="0" cb="0"/><line nr="150" mi="14" ci="0" mb="2" cb="0"/><line nr="151" mi="4" ci="0" mb="0" cb="0"/><line nr="152" mi="14" ci="0" mb="2" cb="0"/><line nr="153" mi="4" ci="0" mb="0" cb="0"/><line nr="154" mi="6" ci="0" mb="0" cb="0"/><line nr="155" mi="8" ci="0" mb="0" cb="0"/><line nr="156" mi="4" ci="0" mb="0" cb="0"/><line nr="157" mi="4" ci="0" mb="0" cb="0"/><line nr="158" mi="6" ci="0" mb="0" cb="0"/><line nr="159" mi="9" ci="0" mb="0" cb="0"/><line nr="160" mi="1" ci="0" mb="0" cb="0"/><line nr="161" mi="3" ci="0" mb="0" cb="0"/><line nr="175" mi="4" ci="0" mb="0" cb="0"/><line nr="176" mi="14" ci="0" mb="2" cb="0"/><line nr="177" mi="4" ci="0" mb="0" cb="0"/><line nr="178" mi="8" ci="0" mb="0" cb="0"/><line nr="179" mi="17" ci="0" mb="0" cb="0"/><line nr="180" mi="5" ci="0" mb="0" cb="0"/><line nr="181" mi="6" ci="0" mb="0" cb="0"/><line nr="182" mi="1" ci="0" mb="0" cb="0"/><line nr="183" mi="3" ci="0" mb="0" cb="0"/><line nr="199" mi="4" ci="0" mb="0" cb="0"/><line nr="200" mi="4" ci="0" mb="0" cb="0"/><line nr="201" mi="14" ci="0" mb="2" cb="0"/><line nr="202" mi="4" ci="0" mb="0" cb="0"/><line nr="203" mi="8" ci="0" mb="0" cb="0"/><line nr="204" mi="19" ci="0" mb="0" cb="0"/><line nr="205" mi="6" ci="0" mb="0" cb="0"/><line nr="206" mi="6" ci="0" mb="0" cb="0"/><line nr="207" mi="1" ci="0" mb="0" cb="0"/><line nr="208" mi="3" ci="0" mb="0" cb="0"/><line nr="222" mi="4" ci="0" mb="0" cb="0"/><line nr="223" mi="14" ci="0" mb="2" cb="0"/><line nr="224" mi="4" ci="0" mb="0" cb="0"/><line nr="225" mi="6" ci="0" mb="0" cb="0"/><line nr="226" mi="14" ci="0" mb="0" cb="0"/><line nr="227" mi="11" ci="0" mb="2" cb="0"/><line nr="228" mi="12" ci="0" mb="0" cb="0"/><line nr="229" mi="1" ci="0" mb="0" cb="0"/><line nr="230" mi="3" ci="0" mb="0" cb="0"/><line nr="246" mi="4" ci="0" mb="0" cb="0"/><line nr="247" mi="4" ci="0" mb="0" cb="0"/><line nr="248" mi="14" ci="0" mb="2" cb="0"/><line nr="249" mi="4" ci="0" mb="0" cb="0"/><line nr="250" mi="6" ci="0" mb="0" cb="0"/><line nr="251" mi="16" ci="0" mb="0" cb="0"/><line nr="252" mi="11" ci="0" mb="2" cb="0"/><line nr="253" mi="8" ci="0" mb="0" cb="0"/><line nr="254" mi="6" ci="0" mb="0" cb="0"/><line nr="255" mi="1" ci="0" mb="0" cb="0"/><line nr="256" mi="3" ci="0" mb="0" cb="0"/><line nr="268" mi="0" ci="4" mb="0" cb="0"/><line nr="269" mi="0" ci="10" mb="0" cb="0"/><line nr="270" mi="0" ci="6" mb="0" cb="0"/><line nr="271" mi="0" ci="17" mb="0" cb="0"/><line nr="272" mi="0" ci="3" mb="0" cb="0"/><line nr="286" mi="4" ci="0" mb="0" cb="0"/><line nr="287" mi="4" ci="0" mb="0" cb="0"/><line nr="288" mi="10" ci="0" mb="0" cb="0"/><line nr="289" mi="8" ci="0" mb="0" cb="0"/><line nr="290" mi="17" ci="0" mb="0" cb="0"/><line nr="291" mi="3" ci="0" mb="0" cb="0"/><line nr="301" mi="0" ci="5" mb="0" cb="0"/><line nr="314" mi="4" ci="0" mb="0" cb="0"/><line nr="315" mi="7" ci="0" mb="0" cb="0"/><line nr="327" mi="10" ci="0" mb="0" cb="0"/><line nr="328" mi="2" ci="0" mb="0" cb="0"/><line nr="329" mi="20" ci="0" mb="2" cb="0"/><line nr="330" mi="5" ci="0" mb="0" cb="0"/><line nr="344" mi="4" ci="0" mb="0" cb="0"/><line nr="345" mi="10" ci="0" mb="0" cb="0"/><line nr="346" mi="2" ci="0" mb="0" cb="0"/><line nr="347" mi="20" ci="0" mb="2" cb="0"/><line nr="348" mi="11" ci="0" mb="0" cb="0"/><line nr="360" mi="10" ci="0" mb="0" cb="0"/><line nr="361" mi="2" ci="0" mb="0" cb="0"/><line nr="362" mi="3" ci="0" mb="2" cb="0"/><line nr="363" mi="20" ci="0" mb="2" cb="0"/><line nr="364" mi="5" ci="0" mb="0" cb="0"/><line nr="366" mi="5" ci="0" mb="0" cb="0"/><line nr="367" mi="3" ci="0" mb="2" cb="0"/><line nr="368" mi="3" ci="0" mb="0" cb="0"/><line nr="370" mi="3" ci="0" mb="2" cb="0"/><line nr="371" mi="3" ci="0" mb="0" cb="0"/><line nr="375" mi="36" ci="0" mb="0" cb="0"/><line nr="389" mi="4" ci="0" mb="0" cb="0"/><line nr="390" mi="10" ci="0" mb="0" cb="0"/><line nr="391" mi="2" ci="0" mb="0" cb="0"/><line nr="392" mi="3" ci="0" mb="2" cb="0"/><line nr="393" mi="20" ci="0" mb="2" cb="0"/><line nr="394" mi="11" ci="0" mb="0" cb="0"/><line nr="396" mi="5" ci="0" mb="0" cb="0"/><line nr="397" mi="3" ci="0" mb="2" cb="0"/><line nr="398" mi="4" ci="0" mb="0" cb="0"/><line nr="400" mi="3" ci="0" mb="2" cb="0"/><line nr="401" mi="4" ci="0" mb="0" cb="0"/><line nr="405" mi="22" ci="0" mb="0" cb="0"/><line nr="406" mi="17" ci="0" mb="0" cb="0"/><line nr="414" mi="0" ci="10" mb="0" cb="0"/><line nr="415" mi="0" ci="20" mb="0" cb="0"/><line nr="416" mi="0" ci="3" mb="0" cb="0"/><line nr="434" mi="4" ci="0" mb="0" cb="0"/><line nr="435" mi="4" ci="0" mb="0" cb="0"/><line nr="436" mi="8" ci="0" mb="0" cb="0"/><line nr="437" mi="3" ci="0" mb="0" cb="0"/><line nr="438" mi="8" ci="0" mb="0" cb="0"/><line nr="439" mi="3" ci="0" mb="0" cb="0"/><line nr="440" mi="14" ci="0" mb="0" cb="0"/><line nr="441" mi="8" ci="0" mb="0" cb="0"/><line nr="442" mi="4" ci="0" mb="0" cb="0"/><line nr="443" mi="4" ci="0" mb="0" cb="0"/><line nr="444" mi="8" ci="0" mb="4" cb="0"/><line nr="445" mi="13" ci="0" mb="2" cb="0"/><line nr="446" mi="13" ci="0" mb="2" cb="0"/><line nr="447" mi="8" ci="0" mb="0" cb="0"/><line nr="449" mi="1" ci="0" mb="0" cb="0"/><line nr="450" mi="3" ci="0" mb="0" cb="0"/><line nr="460" mi="8" ci="0" mb="0" cb="0"/><line nr="461" mi="12" ci="0" mb="0" cb="0"/><line nr="462" mi="3" ci="0" mb="0" cb="0"/><line nr="474" mi="4" ci="0" mb="0" cb="0"/><line nr="475" mi="9" ci="0" mb="0" cb="0"/><line nr="476" mi="15" ci="0" mb="0" cb="0"/><line nr="477" mi="6" ci="0" mb="0" cb="0"/><line nr="478" mi="5" ci="0" mb="0" cb="0"/><line nr="488" mi="8" ci="0" mb="0" cb="0"/><line nr="489" mi="12" ci="0" mb="0" cb="0"/><line nr="490" mi="3" ci="0" mb="0" cb="0"/><line nr="502" mi="4" ci="0" mb="0" cb="0"/><line nr="503" mi="9" ci="0" mb="0" cb="0"/><line nr="504" mi="15" ci="0" mb="0" cb="0"/><line nr="505" mi="6" ci="0" mb="0" cb="0"/><line nr="506" mi="5" ci="0" mb="0" cb="0"/><line nr="516" mi="15" ci="0" mb="0" cb="0"/><line nr="528" mi="4" ci="0" mb="0" cb="0"/><line nr="529" mi="15" ci="0" mb="0" cb="0"/><line nr="530" mi="8" ci="0" mb="0" cb="0"/><line nr="542" mi="4" ci="0" mb="0" cb="0"/><line nr="543" mi="5" ci="0" mb="0" cb="0"/><line nr="553" mi="11" ci="0" mb="0" cb="0"/><line nr="565" mi="4" ci="0" mb="0" cb="0"/><line nr="566" mi="16" ci="0" mb="0" cb="0"/><line nr="576" mi="0" ci="23" mb="1" cb="3"/><line nr="577" mi="0" ci="15" mb="0" cb="4"/><line nr="587" mi="0" ci="23" mb="1" cb="3"/><line nr="588" mi="0" ci="15" mb="0" cb="4"/><line nr="598" mi="6" ci="0" mb="2" cb="0"/><line nr="599" mi="17" ci="0" mb="2" cb="0"/><line nr="600" mi="15" ci="0" mb="4" cb="0"/><line nr="610" mi="12" ci="0" mb="4" cb="0"/><line nr="627" mi="4" ci="0" mb="0" cb="0"/><line nr="628" mi="4" ci="0" mb="0" cb="0"/><line nr="629" mi="13" ci="0" mb="2" cb="0"/><line nr="630" mi="1" ci="0" mb="0" cb="0"/><line nr="631" mi="18" ci="0" mb="0" cb="0"/><line nr="632" mi="3" ci="0" mb="0" cb="0"/><line nr="651" mi="4" ci="0" mb="0" cb="0"/><line nr="652" mi="4" ci="0" mb="0" cb="0"/><line nr="653" mi="4" ci="0" mb="0" cb="0"/><line nr="654" mi="13" ci="0" mb="2" cb="0"/><line nr="655" mi="1" ci="0" mb="0" cb="0"/><line nr="656" mi="7" ci="0" mb="0" cb="0"/><line nr="657" mi="13" ci="0" mb="0" cb="0"/><line nr="658" mi="3" ci="0" mb="0" cb="0"/><line nr="668" mi="2" ci="0" mb="0" cb="0"/><line nr="669" mi="13" ci="0" mb="2" cb="0"/><line nr="670" mi="2" ci="0" mb="0" cb="0"/><line nr="671" mi="2" ci="0" mb="0" cb="0"/><line nr="672" mi="5" ci="0" mb="0" cb="0"/><line nr="673" mi="7" ci="0" mb="2" cb="0"/><line nr="674" mi="5" ci="0" mb="0" cb="0"/><line nr="675" mi="9" ci="0" mb="2" cb="0"/><line nr="676" mi="8" ci="0" mb="2" cb="0"/><line nr="677" mi="1" ci="0" mb="0" cb="0"/><line nr="680" mi="12" ci="0" mb="0" cb="0"/><line nr="682" mi="9" ci="0" mb="0" cb="0"/><line nr="683" mi="1" ci="0" mb="0" cb="0"/><line nr="684" mi="2" ci="0" mb="0" cb="0"/><line nr="696" mi="4" ci="0" mb="0" cb="0"/><line nr="697" mi="2" ci="0" mb="0" cb="0"/><line nr="698" mi="13" ci="0" mb="2" cb="0"/><line nr="699" mi="2" ci="0" mb="0" cb="0"/><line nr="700" mi="2" ci="0" mb="0" cb="0"/><line nr="701" mi="5" ci="0" mb="0" cb="0"/><line nr="702" mi="7" ci="0" mb="2" cb="0"/><line nr="703" mi="5" ci="0" mb="0" cb="0"/><line nr="704" mi="9" ci="0" mb="2" cb="0"/><line nr="705" mi="8" ci="0" mb="2" cb="0"/><line nr="706" mi="1" ci="0" mb="0" cb="0"/><line nr="709" mi="13" ci="0" mb="0" cb="0"/><line nr="711" mi="5" ci="0" mb="0" cb="0"/><line nr="712" mi="8" ci="0" mb="0" cb="0"/><line nr="714" mi="1" ci="0" mb="0" cb="0"/><line nr="715" mi="2" ci="0" mb="0" cb="0"/><line nr="725" mi="27" ci="0" mb="0" cb="0"/><line nr="726" mi="27" ci="0" mb="0" cb="0"/><line nr="727" mi="27" ci="0" mb="0" cb="0"/><line nr="728" mi="27" ci="0" mb="0" cb="0"/><line nr="729" mi="27" ci="0" mb="0" cb="0"/><line nr="730" mi="27" ci="0" mb="0" cb="0"/><line nr="731" mi="12" ci="0" mb="0" cb="0"/><line nr="743" mi="4" ci="0" mb="0" cb="0"/><line nr="744" mi="3" ci="0" mb="0" cb="0"/><line nr="745" mi="26" ci="0" mb="0" cb="0"/><line nr="746" mi="3" ci="0" mb="0" cb="0"/><line nr="747" mi="26" ci="0" mb="0" cb="0"/><line nr="748" mi="3" ci="0" mb="0" cb="0"/><line nr="749" mi="26" ci="0" mb="0" cb="0"/><line nr="750" mi="3" ci="0" mb="0" cb="0"/><line nr="751" mi="26" ci="0" mb="0" cb="0"/><line nr="752" mi="3" ci="0" mb="0" cb="0"/><line nr="753" mi="26" ci="0" mb="0" cb="0"/><line nr="754" mi="3" ci="0" mb="0" cb="0"/><line nr="755" mi="26" ci="0" mb="0" cb="0"/><line nr="756" mi="13" ci="0" mb="0" cb="0"/><line nr="757" mi="4" ci="0" mb="0" cb="0"/><line nr="775" mi="1" ci="7" mb="1" cb="1"/><line nr="776" mi="1" ci="7" mb="1" cb="1"/><line nr="777" mi="0" ci="7" mb="0" cb="0"/><line nr="789" mi="0" ci="4" mb="0" cb="0"/><line nr="790" mi="0" ci="1" mb="0" cb="0"/><line nr="801" mi="0" ci="13" mb="0" cb="0"/><line nr="802" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1937" covered="205"/><counter type="BRANCH" missed="92" covered="16"/><counter type="LINE" missed="242" covered="22"/><counter type="COMPLEXITY" missed="116" covered="22"/><counter type="METHOD" missed="68" covered="16"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="RealComplexNumberVector.java"><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="56" mi="1" ci="7" mb="1" cb="1"/><line nr="57" mi="0" ci="7" mb="0" cb="0"/><line nr="71" mi="4" ci="0" mb="0" cb="0"/><line nr="72" mi="15" ci="0" mb="2" cb="0"/><line nr="73" mi="1" ci="0" mb="0" cb="0"/><line nr="74" mi="5" ci="0" mb="0" cb="0"/><line nr="75" mi="17" ci="0" mb="0" cb="0"/><line nr="76" mi="3" ci="0" mb="0" cb="0"/><line nr="92" mi="4" ci="0" mb="0" cb="0"/><line nr="93" mi="4" ci="0" mb="0" cb="0"/><line nr="94" mi="15" ci="0" mb="2" cb="0"/><line nr="95" mi="1" ci="0" mb="0" cb="0"/><line nr="96" mi="5" ci="0" mb="0" cb="0"/><line nr="97" mi="19" ci="0" mb="0" cb="0"/><line nr="98" mi="3" ci="0" mb="0" cb="0"/><line nr="112" mi="4" ci="0" mb="0" cb="0"/><line nr="113" mi="15" ci="0" mb="2" cb="0"/><line nr="114" mi="1" ci="0" mb="0" cb="0"/><line nr="115" mi="5" ci="0" mb="0" cb="0"/><line nr="116" mi="17" ci="0" mb="0" cb="0"/><line nr="117" mi="3" ci="0" mb="0" cb="0"/><line nr="133" mi="4" ci="0" mb="0" cb="0"/><line nr="134" mi="4" ci="0" mb="0" cb="0"/><line nr="135" mi="15" ci="0" mb="2" cb="0"/><line nr="136" mi="1" ci="0" mb="0" cb="0"/><line nr="137" mi="5" ci="0" mb="0" cb="0"/><line nr="138" mi="19" ci="0" mb="0" cb="0"/><line nr="139" mi="3" ci="0" mb="0" cb="0"/><line nr="153" mi="4" ci="0" mb="0" cb="0"/><line nr="154" mi="16" ci="0" mb="2" cb="0"/><line nr="155" mi="20" ci="0" mb="0" cb="0"/><line nr="156" mi="3" ci="0" mb="0" cb="0"/><line nr="172" mi="4" ci="0" mb="0" cb="0"/><line nr="173" mi="4" ci="0" mb="0" cb="0"/><line nr="174" mi="16" ci="0" mb="2" cb="0"/><line nr="175" mi="8" ci="0" mb="0" cb="0"/><line nr="176" mi="15" ci="0" mb="0" cb="0"/><line nr="177" mi="8" ci="0" mb="0" cb="0"/><line nr="189" mi="4" ci="0" mb="0" cb="0"/><line nr="190" mi="5" ci="0" mb="0" cb="0"/><line nr="191" mi="15" ci="0" mb="0" cb="0"/><line nr="192" mi="3" ci="0" mb="0" cb="0"/><line nr="206" mi="4" ci="0" mb="0" cb="0"/><line nr="207" mi="4" ci="0" mb="0" cb="0"/><line nr="208" mi="5" ci="0" mb="0" cb="0"/><line nr="209" mi="17" ci="0" mb="0" cb="0"/><line nr="210" mi="3" ci="0" mb="0" cb="0"/><line nr="220" mi="5" ci="0" mb="0" cb="0"/><line nr="232" mi="4" ci="0" mb="0" cb="0"/><line nr="233" mi="7" ci="0" mb="0" cb="0"/><line nr="247" mi="4" ci="0" mb="0" cb="0"/><line nr="248" mi="16" ci="0" mb="2" cb="0"/><line nr="249" mi="6" ci="0" mb="0" cb="0"/><line nr="265" mi="4" ci="0" mb="0" cb="0"/><line nr="266" mi="4" ci="0" mb="0" cb="0"/><line nr="267" mi="16" ci="0" mb="2" cb="0"/><line nr="268" mi="7" ci="0" mb="0" cb="0"/><line nr="278" mi="11" ci="0" mb="0" cb="0"/><line nr="290" mi="4" ci="0" mb="0" cb="0"/><line nr="291" mi="14" ci="0" mb="0" cb="0"/><line nr="292" mi="9" ci="0" mb="0" cb="0"/><line nr="302" mi="11" ci="0" mb="0" cb="0"/><line nr="314" mi="4" ci="0" mb="0" cb="0"/><line nr="315" mi="14" ci="0" mb="0" cb="0"/><line nr="316" mi="8" ci="0" mb="0" cb="0"/><line nr="327" mi="4" ci="0" mb="0" cb="0"/><line nr="340" mi="4" ci="0" mb="0" cb="0"/><line nr="341" mi="5" ci="0" mb="0" cb="0"/><line nr="351" mi="11" ci="0" mb="0" cb="0"/><line nr="363" mi="4" ci="0" mb="0" cb="0"/><line nr="364" mi="16" ci="0" mb="0" cb="0"/><line nr="381" mi="4" ci="0" mb="0" cb="0"/><line nr="382" mi="4" ci="0" mb="0" cb="0"/><line nr="383" mi="16" ci="0" mb="2" cb="0"/><line nr="384" mi="7" ci="0" mb="0" cb="0"/><line nr="385" mi="2" ci="0" mb="0" cb="0"/><line nr="402" mi="4" ci="0" mb="0" cb="0"/><line nr="403" mi="4" ci="0" mb="0" cb="0"/><line nr="404" mi="16" ci="0" mb="2" cb="0"/><line nr="405" mi="8" ci="0" mb="0" cb="0"/><line nr="419" mi="4" ci="0" mb="0" cb="0"/><line nr="420" mi="16" ci="0" mb="2" cb="0"/><line nr="421" mi="7" ci="0" mb="0" cb="0"/><line nr="422" mi="23" ci="0" mb="0" cb="0"/><line nr="423" mi="9" ci="0" mb="0" cb="0"/><line nr="424" mi="3" ci="0" mb="0" cb="0"/><line nr="440" mi="4" ci="0" mb="0" cb="0"/><line nr="441" mi="4" ci="0" mb="0" cb="0"/><line nr="442" mi="16" ci="0" mb="2" cb="0"/><line nr="443" mi="7" ci="0" mb="0" cb="0"/><line nr="444" mi="25" ci="0" mb="0" cb="0"/><line nr="445" mi="10" ci="0" mb="0" cb="0"/><line nr="446" mi="3" ci="0" mb="0" cb="0"/><line nr="459" mi="0" ci="4" mb="0" cb="0"/><line nr="460" mi="0" ci="1" mb="0" cb="0"/><line nr="471" mi="0" ci="10" mb="0" cb="0"/><line nr="472" mi="0" ci="11" mb="0" cb="0"/><line nr="473" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="739" covered="52"/><counter type="BRANCH" missed="25" covered="1"/><counter type="LINE" missed="91" covered="9"/><counter type="COMPLEXITY" missed="55" covered="5"/><counter type="METHOD" missed="42" covered="5"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractContextVector.java"><line nr="57" mi="0" ci="3" mb="0" cb="0"/><line nr="58" mi="0" ci="1" mb="0" cb="0"/><line nr="178" mi="0" ci="4" mb="0" cb="0"/><line nr="179" mi="0" ci="4" mb="0" cb="0"/><line nr="180" mi="0" ci="16" mb="0" cb="2"/><line nr="181" mi="0" ci="6" mb="0" cb="0"/><line nr="213" mi="0" ci="4" mb="0" cb="0"/><line nr="214" mi="0" ci="16" mb="0" cb="2"/><line nr="215" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="60"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigIntegerVector.java"><line nr="43" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="1" ci="7" mb="1" cb="1"/><line nr="56" mi="0" ci="7" mb="0" cb="0"/><line nr="68" mi="4" ci="0" mb="0" cb="0"/><line nr="69" mi="15" ci="0" mb="2" cb="0"/><line nr="70" mi="1" ci="0" mb="0" cb="0"/><line nr="71" mi="5" ci="0" mb="0" cb="0"/><line nr="72" mi="17" ci="0" mb="0" cb="0"/><line nr="73" mi="3" ci="0" mb="0" cb="0"/><line nr="87" mi="0" ci="4" mb="0" cb="0"/><line nr="88" mi="1" ci="14" mb="1" cb="1"/><line nr="89" mi="0" ci="1" mb="0" cb="0"/><line nr="90" mi="0" ci="5" mb="0" cb="0"/><line nr="91" mi="0" ci="17" mb="0" cb="0"/><line nr="92" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="5" mb="0" cb="0"/><line nr="106" mi="0" ci="15" mb="0" cb="0"/><line nr="107" mi="0" ci="3" mb="0" cb="0"/><line nr="117" mi="5" ci="0" mb="0" cb="0"/><line nr="131" mi="4" ci="0" mb="0" cb="0"/><line nr="132" mi="16" ci="0" mb="2" cb="0"/><line nr="133" mi="10" ci="0" mb="2" cb="0"/><line nr="143" mi="0" ci="11" mb="0" cb="0"/><line nr="153" mi="0" ci="15" mb="0" cb="0"/><line nr="164" mi="0" ci="4" mb="0" cb="0"/><line nr="177" mi="0" ci="4" mb="0" cb="0"/><line nr="178" mi="0" ci="5" mb="0" cb="0"/><line nr="192" mi="4" ci="0" mb="0" cb="0"/><line nr="193" mi="16" ci="0" mb="2" cb="0"/><line nr="194" mi="22" ci="0" mb="0" cb="0"/><line nr="195" mi="2" ci="0" mb="0" cb="0"/><line nr="205" mi="0" ci="11" mb="0" cb="0"/><line nr="221" mi="0" ci="4" mb="0" cb="0"/><line nr="222" mi="0" ci="4" mb="0" cb="0"/><line nr="223" mi="0" ci="16" mb="0" cb="2"/><line nr="224" mi="0" ci="6" mb="0" cb="0"/><line nr="238" mi="4" ci="0" mb="0" cb="0"/><line nr="239" mi="16" ci="0" mb="2" cb="0"/><line nr="240" mi="7" ci="0" mb="0" cb="0"/><line nr="241" mi="23" ci="0" mb="0" cb="0"/><line nr="242" mi="9" ci="0" mb="0" cb="0"/><line nr="243" mi="3" ci="0" mb="0" cb="0"/><line nr="255" mi="0" ci="4" mb="0" cb="0"/><line nr="256" mi="0" ci="1" mb="0" cb="0"/><line nr="267" mi="0" ci="10" mb="0" cb="0"/><line nr="268" mi="0" ci="11" mb="0" cb="0"/><line nr="269" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="188" covered="203"/><counter type="BRANCH" missed="12" covered="4"/><counter type="LINE" missed="20" covered="29"/><counter type="COMPLEXITY" missed="16" covered="17"/><counter type="METHOD" missed="9" covered="16"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="7957" covered="2242"/><counter type="BRANCH" missed="422" covered="138"/><counter type="LINE" missed="1009" covered="313"/><counter type="COMPLEXITY" missed="552" covered="213"/><counter type="METHOD" missed="320" covered="165"/><counter type="CLASS" missed="0" covered="24"/></package><package name="com/github/ltennstedt/finnmath/core/sqrt"><class name="com/github/ltennstedt/finnmath/core/sqrt/SquareRootCalculator"><method name="sqrt" desc="(Ljava/math/BigInteger;)Ljava/math/BigDecimal;" line="66"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="90"><counter type="INSTRUCTION" missed="1" covered="34"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="111"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="134"><counter type="INSTRUCTION" missed="1" covered="22"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrtOfSquareNumber" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="157"><counter type="INSTRUCTION" missed="1" covered="23"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="squareNumber" desc="(Ljava/math/BigInteger;)Z" line="176"><counter type="INSTRUCTION" missed="1" covered="46"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="heronsMethod" desc="(Ljava/math/BigDecimal;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="189"><counter type="INSTRUCTION" missed="8" covered="98"/><counter type="BRANCH" missed="4" covered="8"/><counter type="LINE" missed="0" covered="21"/><counter type="COMPLEXITY" missed="4" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="calculateSuccessor" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="215"><counter type="INSTRUCTION" missed="14" covered="52"/><counter type="BRANCH" missed="7" covered="7"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="7" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="38"><counter type="INSTRUCTION" missed="2" covered="12"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="29" covered="336"/><counter type="BRANCH" missed="17" covered="33"/><counter type="LINE" missed="0" covered="64"/><counter type="COMPLEXITY" missed="17" covered="17"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/sqrt/SquareRootContext"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;IILjava/math/MathContext;)V" line="28"><counter type="INSTRUCTION" missed="20" covered="42"/><counter type="BRANCH" missed="11" covered="11"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="11" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="()Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext$SquareRootContextBuilder;" line="47"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="57"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="67"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="BRANCH" missed="12" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="85"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getAbortCriterion" desc="()Ljava/math/BigDecimal;" line="91"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMaxIterations" desc="()I" line="95"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInitalScale" desc="()I" line="99"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMathContext" desc="()Ljava/math/MathContext;" line="103"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="20"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="107" covered="64"/><counter type="BRANCH" missed="24" covered="12"/><counter type="LINE" missed="11" covered="17"/><counter type="COMPLEXITY" missed="21" covered="7"/><counter type="METHOD" missed="3" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/sqrt/SquareRootContext$SquareRootContextBuilder"><method name="&lt;init&gt;" desc="()V" line="113"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abortCriterion" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext$SquareRootContextBuilder;" line="132"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxIterations" desc="(I)Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext$SquareRootContextBuilder;" line="148"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="initalScale" desc="(I)Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext$SquareRootContextBuilder;" line="164"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mathContext" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext$SquareRootContextBuilder;" line="180"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;" line="191"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="201"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getAbortCriterion" desc="()Ljava/math/BigDecimal;" line="207"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMaxIterations" desc="()I" line="211"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getInitalScale" desc="()I" line="215"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMathContext" desc="()Ljava/math/MathContext;" line="219"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="79" covered="31"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="18" covered="6"/><counter type="COMPLEXITY" missed="11" covered="2"/><counter type="METHOD" missed="9" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="SquareRootCalculator.java"><line nr="38" mi="2" ci="5" mb="1" cb="1"/><line nr="45" mi="0" ci="3" mb="0" cb="0"/><line nr="47" mi="0" ci="4" mb="0" cb="0"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="11" mb="0" cb="2"/><line nr="68" mi="0" ci="10" mb="0" cb="2"/><line nr="69" mi="0" ci="6" mb="0" cb="0"/><line nr="90" mi="0" ci="4" mb="0" cb="0"/><line nr="91" mi="0" ci="4" mb="0" cb="0"/><line nr="92" mi="1" ci="10" mb="1" cb="1"/><line nr="93" mi="0" ci="10" mb="0" cb="2"/><line nr="94" mi="0" ci="6" mb="0" cb="0"/><line nr="111" mi="0" ci="4" mb="0" cb="0"/><line nr="112" mi="1" ci="10" mb="1" cb="1"/><line nr="113" mi="0" ci="4" mb="0" cb="0"/><line nr="134" mi="0" ci="4" mb="0" cb="0"/><line nr="135" mi="0" ci="4" mb="0" cb="0"/><line nr="136" mi="1" ci="10" mb="1" cb="1"/><line nr="137" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="1" ci="10" mb="1" cb="1"/><line nr="159" mi="0" ci="5" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="176" mi="0" ci="4" mb="0" cb="0"/><line nr="177" mi="1" ci="10" mb="1" cb="1"/><line nr="178" mi="0" ci="4" mb="0" cb="2"/><line nr="179" mi="0" ci="2" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="0"/><line nr="182" mi="0" ci="12" mb="0" cb="2"/><line nr="183" mi="0" ci="4" mb="0" cb="0"/><line nr="185" mi="0" ci="8" mb="0" cb="2"/><line nr="189" mi="4" ci="4" mb="2" cb="2"/><line nr="190" mi="4" ci="4" mb="2" cb="2"/><line nr="191" mi="0" ci="3" mb="0" cb="0"/><line nr="192" mi="0" ci="6" mb="0" cb="0"/><line nr="193" mi="0" ci="1" mb="0" cb="0"/><line nr="194" mi="0" ci="3" mb="0" cb="0"/><line nr="195" mi="0" ci="3" mb="0" cb="0"/><line nr="196" mi="0" ci="6" mb="0" cb="0"/><line nr="197" mi="0" ci="9" mb="0" cb="0"/><line nr="198" mi="0" ci="5" mb="0" cb="0"/><line nr="199" mi="0" ci="5" mb="0" cb="0"/><line nr="200" mi="0" ci="2" mb="0" cb="0"/><line nr="201" mi="0" ci="9" mb="0" cb="2"/><line nr="202" mi="0" ci="4" mb="0" cb="2"/><line nr="203" mi="0" ci="8" mb="0" cb="0"/><line nr="204" mi="0" ci="2" mb="0" cb="0"/><line nr="205" mi="0" ci="5" mb="0" cb="0"/><line nr="206" mi="0" ci="5" mb="0" cb="0"/><line nr="208" mi="0" ci="5" mb="0" cb="0"/><line nr="209" mi="0" ci="7" mb="0" cb="0"/><line nr="210" mi="0" ci="2" mb="0" cb="0"/><line nr="215" mi="4" ci="4" mb="2" cb="2"/><line nr="216" mi="4" ci="4" mb="2" cb="2"/><line nr="217" mi="4" ci="4" mb="2" cb="2"/><line nr="218" mi="0" ci="3" mb="0" cb="0"/><line nr="219" mi="0" ci="5" mb="0" cb="0"/><line nr="220" mi="0" ci="3" mb="0" cb="0"/><line nr="221" mi="0" ci="6" mb="0" cb="0"/><line nr="222" mi="0" ci="4" mb="1" cb="1"/><line nr="223" mi="0" ci="11" mb="0" cb="0"/><line nr="224" mi="2" ci="1" mb="0" cb="0"/><line nr="225" mi="0" ci="5" mb="0" cb="0"/><line nr="226" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="29" covered="336"/><counter type="BRANCH" missed="17" covered="33"/><counter type="LINE" missed="0" covered="64"/><counter type="COMPLEXITY" missed="17" covered="17"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SquareRootContext.java"><line nr="20" mi="2" ci="6" mb="1" cb="1"/><line nr="28" mi="0" ci="2" mb="0" cb="0"/><line nr="29" mi="4" ci="4" mb="2" cb="2"/><line nr="30" mi="4" ci="10" mb="3" cb="3"/><line nr="31" mi="4" ci="4" mb="2" cb="2"/><line nr="32" mi="4" ci="5" mb="2" cb="2"/><line nr="33" mi="4" ci="4" mb="2" cb="2"/><line nr="34" mi="0" ci="3" mb="0" cb="0"/><line nr="35" mi="0" ci="3" mb="0" cb="0"/><line nr="36" mi="0" ci="3" mb="0" cb="0"/><line nr="37" mi="0" ci="3" mb="0" cb="0"/><line nr="38" mi="0" ci="1" mb="0" cb="0"/><line nr="47" mi="0" ci="4" mb="0" cb="0"/><line nr="57" mi="26" ci="0" mb="0" cb="0"/><line nr="67" mi="3" ci="0" mb="2" cb="0"/><line nr="68" mi="2" ci="0" mb="0" cb="0"/><line nr="70" mi="3" ci="0" mb="2" cb="0"/><line nr="71" mi="2" ci="0" mb="0" cb="0"/><line nr="73" mi="3" ci="0" mb="0" cb="0"/><line nr="74" mi="15" ci="0" mb="4" cb="0"/><line nr="75" mi="11" ci="0" mb="4" cb="0"/><line nr="85" mi="10" ci="0" mb="0" cb="0"/><line nr="86" mi="9" ci="0" mb="0" cb="0"/><line nr="87" mi="1" ci="0" mb="0" cb="0"/><line nr="91" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="3" mb="0" cb="0"/><line nr="99" mi="0" ci="3" mb="0" cb="0"/><line nr="103" mi="0" ci="3" mb="0" cb="0"/><line nr="113" mi="0" ci="2" mb="0" cb="0"/><line nr="114" mi="0" ci="6" mb="0" cb="0"/><line nr="115" mi="0" ci="3" mb="0" cb="0"/><line nr="116" mi="0" ci="3" mb="0" cb="0"/><line nr="117" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="6" ci="0" mb="0" cb="0"/><line nr="133" mi="4" ci="0" mb="0" cb="0"/><line nr="134" mi="2" ci="0" mb="0" cb="0"/><line nr="148" mi="8" ci="0" mb="2" cb="0"/><line nr="149" mi="3" ci="0" mb="0" cb="0"/><line nr="150" mi="2" ci="0" mb="0" cb="0"/><line nr="164" mi="9" ci="0" mb="2" cb="0"/><line nr="165" mi="3" ci="0" mb="0" cb="0"/><line nr="166" mi="2" ci="0" mb="0" cb="0"/><line nr="180" mi="6" ci="0" mb="0" cb="0"/><line nr="181" mi="2" ci="0" mb="0" cb="0"/><line nr="191" mi="0" ci="13" mb="0" cb="0"/><line nr="201" mi="10" ci="0" mb="0" cb="0"/><line nr="202" mi="8" ci="0" mb="0" cb="0"/><line nr="203" mi="2" ci="0" mb="0" cb="0"/><line nr="207" mi="3" ci="0" mb="0" cb="0"/><line nr="211" mi="3" ci="0" mb="0" cb="0"/><line nr="215" mi="3" ci="0" mb="0" cb="0"/><line nr="219" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="186" covered="95"/><counter type="BRANCH" missed="28" covered="12"/><counter type="LINE" missed="29" covered="23"/><counter type="COMPLEXITY" missed="32" covered="9"/><counter type="METHOD" missed="12" covered="9"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="215" covered="431"/><counter type="BRANCH" missed="45" covered="45"/><counter type="LINE" missed="29" covered="87"/><counter type="COMPLEXITY" missed="49" covered="26"/><counter type="METHOD" missed="12" covered="18"/><counter type="CLASS" missed="0" covered="3"/></package><package name="com/github/ltennstedt/finnmath/core/number"><class name="com/github/ltennstedt/finnmath/core/number/RealComplexNumber$RealComplexNumberComparator"><method name="compare" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)I" line="665"><counter type="INSTRUCTION" missed="2" covered="20"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="20"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/PolarForm"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="74"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="86"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="101"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumer" desc="(Lch/obermuhlner/math/big/BigFloat$Context;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="106"><counter type="INSTRUCTION" missed="4" covered="28"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="119"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="129"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="146"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRadial" desc="()Ljava/math/BigDecimal;" line="156"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getAngular" desc="()Ljava/math/BigDecimal;" line="166"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="38"><counter type="INSTRUCTION" missed="2" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="124"/><counter type="BRANCH" missed="3" covered="11"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="3" covered="14"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/RealComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="82"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(JJ)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="97"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(DD)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="112"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="131"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="152"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="169"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="182"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="201"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="216"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="236"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="251"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="272"><counter type="INSTRUCTION" missed="52" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="294"><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="318"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="341"><counter type="INSTRUCTION" missed="76" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="360"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(ILjava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="385"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="402"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="416"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="427"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="444"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="466"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="485"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invertible" desc="()Z" line="497"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equalsByComparingFields" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="509"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="523"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigDecimal;" line="534"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="549"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="559"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="573"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="586"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="597"><counter type="INSTRUCTION" missed="6" covered="86"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="1" covered="11"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="()Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="621"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="632"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="644"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="49"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="402" covered="535"/><counter type="BRANCH" missed="12" covered="28"/><counter type="LINE" missed="58" covered="70"/><counter type="COMPLEXITY" missed="19" covered="37"/><counter type="METHOD" missed="12" covered="24"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/Fraction"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="79"><counter type="INSTRUCTION" missed="8" covered="17"/><counter type="BRANCH" missed="4" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(JJ)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="102"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="126"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="142"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="158"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="174"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="191"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="203"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="219"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="229"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="240"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="250"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equalsByComparingFields" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="262"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="compareTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)I" line="275"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="297"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="317"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThan" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="333"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThan" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="349"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="366"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="383"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="normalize" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="396"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="417"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="signum" desc="()I" line="429"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equivalent" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="445"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="456"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="466"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="483"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNumerator" desc="()Ljava/math/BigInteger;" line="493"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getDenominator" desc="()Ljava/math/BigInteger;" line="503"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="40"><counter type="INSTRUCTION" missed="2" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="30" covered="476"/><counter type="BRANCH" missed="9" covered="49"/><counter type="LINE" missed="2" covered="87"/><counter type="COMPLEXITY" missed="8" covered="51"/><counter type="METHOD" missed="1" covered="29"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/SimpleComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="64"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(JJ)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="83"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="of" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="102"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="116"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="129"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="142"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="161"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="183"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="203"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="214"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="228"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="236"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="245"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equalsByComparingFields" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Z" line="257"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="(Lcom/github/ltennstedt/finnmath/core/sqrt/SquareRootContext;)Ljava/math/BigDecimal;" line="272"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigInteger;" line="281"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="289"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="297"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="309"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="()Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="319"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="331"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="341"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="47"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="74" covered="352"/><counter type="BRANCH" missed="6" covered="16"/><counter type="LINE" missed="11" covered="48"/><counter type="COMPLEXITY" missed="6" covered="28"/><counter type="METHOD" missed="3" covered="20"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/AbstractComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="86"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/AbstractComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="102"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="153"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="236"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="246"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="263"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getReal" desc="()Ljava/lang/Object;" line="273"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getImaginary" desc="()Ljava/lang/Object;" line="283"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="52"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="97"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="0" covered="13"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="PolarForm.java"><line nr="38" mi="2" ci="6" mb="1" cb="1"/><line nr="74" mi="0" ci="2" mb="0" cb="0"/><line nr="75" mi="0" ci="6" mb="0" cb="0"/><line nr="76" mi="0" ci="6" mb="0" cb="0"/><line nr="77" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="5" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="5" mb="0" cb="0"/><line nr="106" mi="4" ci="4" mb="2" cb="2"/><line nr="107" mi="0" ci="10" mb="0" cb="0"/><line nr="108" mi="0" ci="10" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="119" mi="0" ci="14" mb="0" cb="0"/><line nr="129" mi="0" ci="3" mb="0" cb="2"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="3" mb="0" cb="2"/><line nr="133" mi="0" ci="2" mb="0" cb="0"/><line nr="135" mi="0" ci="3" mb="0" cb="0"/><line nr="136" mi="0" ci="16" mb="0" cb="4"/><line nr="146" mi="0" ci="12" mb="0" cb="0"/><line nr="156" mi="0" ci="3" mb="0" cb="0"/><line nr="166" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="124"/><counter type="BRANCH" missed="3" covered="11"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="3" covered="14"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="RealComplexNumber.java"><line nr="49" mi="0" ci="6" mb="0" cb="0"/><line nr="56" mi="0" ci="6" mb="0" cb="0"/><line nr="63" mi="0" ci="6" mb="0" cb="0"/><line nr="70" mi="0" ci="6" mb="0" cb="0"/><line nr="82" mi="0" ci="4" mb="0" cb="0"/><line nr="83" mi="0" ci="1" mb="0" cb="0"/><line nr="97" mi="0" ci="6" mb="0" cb="0"/><line nr="112" mi="0" ci="6" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="133" mi="0" ci="10" mb="0" cb="0"/><line nr="152" mi="0" ci="4" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="154" mi="0" ci="6" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="8" mb="0" cb="0"/><line nr="182" mi="0" ci="4" mb="0" cb="0"/><line nr="183" mi="0" ci="18" mb="0" cb="0"/><line nr="201" mi="4" ci="0" mb="0" cb="0"/><line nr="202" mi="4" ci="0" mb="0" cb="0"/><line nr="203" mi="15" ci="0" mb="0" cb="0"/><line nr="204" mi="5" ci="0" mb="0" cb="0"/><line nr="216" mi="0" ci="4" mb="0" cb="0"/><line nr="217" mi="0" ci="14" mb="0" cb="0"/><line nr="218" mi="0" ci="4" mb="0" cb="0"/><line nr="236" mi="4" ci="0" mb="0" cb="0"/><line nr="237" mi="4" ci="0" mb="0" cb="0"/><line nr="238" mi="15" ci="0" mb="0" cb="0"/><line nr="239" mi="5" ci="0" mb="0" cb="0"/><line nr="251" mi="0" ci="4" mb="0" cb="0"/><line nr="252" mi="0" ci="16" mb="0" cb="0"/><line nr="253" mi="0" ci="16" mb="0" cb="0"/><line nr="254" mi="0" ci="6" mb="0" cb="0"/><line nr="272" mi="4" ci="0" mb="0" cb="0"/><line nr="273" mi="4" ci="0" mb="0" cb="0"/><line nr="274" mi="12" ci="0" mb="0" cb="0"/><line nr="275" mi="7" ci="0" mb="0" cb="0"/><line nr="276" mi="12" ci="0" mb="0" cb="0"/><line nr="277" mi="7" ci="0" mb="0" cb="0"/><line nr="278" mi="6" ci="0" mb="0" cb="0"/><line nr="294" mi="0" ci="4" mb="0" cb="0"/><line nr="295" mi="0" ci="5" mb="0" cb="0"/><line nr="296" mi="0" ci="4" mb="0" cb="0"/><line nr="297" mi="0" ci="12" mb="0" cb="0"/><line nr="298" mi="0" ci="17" mb="0" cb="0"/><line nr="299" mi="0" ci="2" mb="0" cb="0"/><line nr="300" mi="0" ci="11" mb="0" cb="0"/><line nr="301" mi="0" ci="8" mb="0" cb="0"/><line nr="302" mi="0" ci="4" mb="0" cb="0"/><line nr="318" mi="4" ci="0" mb="0" cb="0"/><line nr="319" mi="5" ci="0" mb="0" cb="0"/><line nr="320" mi="9" ci="0" mb="2" cb="0"/><line nr="321" mi="4" ci="0" mb="0" cb="0"/><line nr="322" mi="12" ci="0" mb="0" cb="0"/><line nr="323" mi="18" ci="0" mb="0" cb="0"/><line nr="324" mi="2" ci="0" mb="0" cb="0"/><line nr="325" mi="11" ci="0" mb="0" cb="0"/><line nr="326" mi="9" ci="0" mb="0" cb="0"/><line nr="327" mi="4" ci="0" mb="0" cb="0"/><line nr="341" mi="4" ci="0" mb="0" cb="0"/><line nr="342" mi="5" ci="0" mb="0" cb="0"/><line nr="343" mi="4" ci="0" mb="0" cb="0"/><line nr="344" mi="1" ci="0" mb="0" cb="0"/><line nr="345" mi="14" ci="0" mb="0" cb="0"/><line nr="346" mi="12" ci="0" mb="0" cb="0"/><line nr="347" mi="10" ci="0" mb="0" cb="0"/><line nr="348" mi="12" ci="0" mb="0" cb="0"/><line nr="349" mi="10" ci="0" mb="0" cb="0"/><line nr="350" mi="4" ci="0" mb="0" cb="0"/><line nr="360" mi="0" ci="9" mb="0" cb="2"/><line nr="361" mi="0" ci="3" mb="0" cb="2"/><line nr="362" mi="0" ci="8" mb="0" cb="0"/><line nr="363" mi="0" ci="3" mb="0" cb="2"/><line nr="364" mi="0" ci="2" mb="0" cb="0"/><line nr="366" mi="0" ci="2" mb="0" cb="0"/><line nr="385" mi="9" ci="0" mb="2" cb="0"/><line nr="386" mi="4" ci="0" mb="0" cb="0"/><line nr="387" mi="3" ci="0" mb="2" cb="0"/><line nr="388" mi="10" ci="0" mb="0" cb="0"/><line nr="389" mi="3" ci="0" mb="2" cb="0"/><line nr="390" mi="2" ci="0" mb="0" cb="0"/><line nr="392" mi="2" ci="0" mb="0" cb="0"/><line nr="402" mi="0" ci="12" mb="0" cb="0"/><line nr="416" mi="4" ci="0" mb="0" cb="0"/><line nr="417" mi="14" ci="0" mb="0" cb="0"/><line nr="427" mi="0" ci="5" mb="0" cb="0"/><line nr="428" mi="0" ci="4" mb="0" cb="0"/><line nr="444" mi="5" ci="0" mb="0" cb="0"/><line nr="445" mi="4" ci="0" mb="0" cb="0"/><line nr="446" mi="5" ci="0" mb="0" cb="0"/><line nr="466" mi="5" ci="0" mb="0" cb="0"/><line nr="467" mi="9" ci="0" mb="2" cb="0"/><line nr="468" mi="4" ci="0" mb="0" cb="0"/><line nr="469" mi="6" ci="0" mb="0" cb="0"/><line nr="485" mi="5" ci="0" mb="0" cb="0"/><line nr="486" mi="4" ci="0" mb="0" cb="0"/><line nr="487" mi="5" ci="0" mb="0" cb="0"/><line nr="497" mi="0" ci="8" mb="0" cb="2"/><line nr="509" mi="0" ci="4" mb="0" cb="0"/><line nr="510" mi="0" ci="20" mb="0" cb="4"/><line nr="523" mi="0" ci="4" mb="0" cb="0"/><line nr="524" mi="0" ci="5" mb="0" cb="0"/><line nr="534" mi="0" ci="12" mb="0" cb="0"/><line nr="549" mi="15" ci="0" mb="0" cb="0"/><line nr="559" mi="0" ci="11" mb="0" cb="0"/><line nr="573" mi="4" ci="0" mb="0" cb="0"/><line nr="574" mi="12" ci="0" mb="0" cb="0"/><line nr="586" mi="0" ci="10" mb="0" cb="2"/><line nr="587" mi="0" ci="7" mb="0" cb="0"/><line nr="597" mi="0" ci="18" mb="0" cb="4"/><line nr="599" mi="0" ci="4" mb="0" cb="0"/><line nr="600" mi="0" ci="3" mb="0" cb="0"/><line nr="601" mi="0" ci="6" mb="0" cb="2"/><line nr="602" mi="0" ci="12" mb="0" cb="0"/><line nr="603" mi="0" ci="6" mb="0" cb="2"/><line nr="604" mi="0" ci="3" mb="0" cb="0"/><line nr="606" mi="0" ci="3" mb="0" cb="0"/><line nr="607" mi="0" ci="13" mb="1" cb="1"/><line nr="608" mi="4" ci="0" mb="0" cb="0"/><line nr="610" mi="0" ci="9" mb="0" cb="0"/><line nr="611" mi="2" ci="9" mb="1" cb="1"/><line nr="621" mi="0" ci="10" mb="0" cb="2"/><line nr="622" mi="0" ci="7" mb="0" cb="0"/><line nr="632" mi="0" ci="10" mb="0" cb="2"/><line nr="633" mi="0" ci="4" mb="0" cb="0"/><line nr="634" mi="0" ci="9" mb="0" cb="0"/><line nr="644" mi="0" ci="33" mb="0" cb="0"/><line nr="645" mi="0" ci="9" mb="0" cb="0"/><line nr="665" mi="0" ci="2" mb="0" cb="2"/><line nr="666" mi="0" ci="2" mb="0" cb="0"/><line nr="668" mi="0" ci="2" mb="0" cb="2"/><line nr="669" mi="0" ci="2" mb="0" cb="0"/><line nr="671" mi="0" ci="4" mb="0" cb="2"/><line nr="672" mi="0" ci="2" mb="0" cb="0"/><line nr="674" mi="2" ci="6" mb="1" cb="1"/><counter type="INSTRUCTION" missed="404" covered="555"/><counter type="BRANCH" missed="13" covered="35"/><counter type="LINE" missed="58" covered="77"/><counter type="COMPLEXITY" missed="20" covered="41"/><counter type="METHOD" missed="12" covered="25"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="SimpleComplexNumber.java"><line nr="47" mi="0" ci="6" mb="0" cb="0"/><line nr="54" mi="0" ci="6" mb="0" cb="0"/><line nr="61" mi="0" ci="7" mb="0" cb="0"/><line nr="64" mi="0" ci="4" mb="0" cb="0"/><line nr="65" mi="0" ci="1" mb="0" cb="0"/><line nr="83" mi="0" ci="6" mb="0" cb="0"/><line nr="102" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="6" mb="0" cb="0"/><line nr="116" mi="0" ci="4" mb="0" cb="0"/><line nr="117" mi="0" ci="18" mb="0" cb="0"/><line nr="129" mi="0" ci="4" mb="0" cb="0"/><line nr="130" mi="0" ci="14" mb="0" cb="0"/><line nr="131" mi="0" ci="4" mb="0" cb="0"/><line nr="142" mi="0" ci="4" mb="0" cb="0"/><line nr="143" mi="0" ci="16" mb="0" cb="0"/><line nr="144" mi="0" ci="16" mb="0" cb="0"/><line nr="145" mi="0" ci="6" mb="0" cb="0"/><line nr="161" mi="0" ci="4" mb="0" cb="0"/><line nr="162" mi="0" ci="5" mb="0" cb="0"/><line nr="163" mi="0" ci="4" mb="0" cb="0"/><line nr="164" mi="0" ci="7" mb="0" cb="0"/><line nr="183" mi="4" ci="0" mb="0" cb="0"/><line nr="184" mi="4" ci="0" mb="0" cb="0"/><line nr="185" mi="9" ci="0" mb="2" cb="0"/><line nr="186" mi="5" ci="0" mb="0" cb="0"/><line nr="187" mi="8" ci="0" mb="0" cb="0"/><line nr="203" mi="4" ci="0" mb="0" cb="0"/><line nr="204" mi="4" ci="0" mb="0" cb="0"/><line nr="205" mi="5" ci="0" mb="0" cb="0"/><line nr="206" mi="7" ci="0" mb="0" cb="0"/><line nr="214" mi="0" ci="9" mb="0" cb="2"/><line nr="215" mi="0" ci="3" mb="0" cb="2"/><line nr="216" mi="0" ci="8" mb="0" cb="0"/><line nr="217" mi="0" ci="3" mb="0" cb="2"/><line nr="218" mi="0" ci="2" mb="0" cb="0"/><line nr="220" mi="0" ci="2" mb="0" cb="0"/><line nr="228" mi="0" ci="12" mb="0" cb="0"/><line nr="236" mi="0" ci="5" mb="0" cb="0"/><line nr="237" mi="0" ci="4" mb="0" cb="0"/><line nr="245" mi="0" ci="8" mb="0" cb="2"/><line nr="257" mi="4" ci="0" mb="0" cb="0"/><line nr="258" mi="20" ci="0" mb="4" cb="0"/><line nr="272" mi="0" ci="4" mb="0" cb="0"/><line nr="273" mi="0" ci="5" mb="0" cb="0"/><line nr="281" mi="0" ci="12" mb="0" cb="0"/><line nr="289" mi="0" ci="11" mb="0" cb="0"/><line nr="297" mi="0" ci="10" mb="0" cb="2"/><line nr="298" mi="0" ci="7" mb="0" cb="0"/><line nr="309" mi="0" ci="10" mb="0" cb="2"/><line nr="310" mi="0" ci="4" mb="0" cb="0"/><line nr="311" mi="0" ci="5" mb="0" cb="0"/><line nr="319" mi="0" ci="10" mb="0" cb="2"/><line nr="320" mi="0" ci="7" mb="0" cb="0"/><line nr="331" mi="0" ci="10" mb="0" cb="2"/><line nr="332" mi="0" ci="4" mb="0" cb="0"/><line nr="333" mi="0" ci="5" mb="0" cb="0"/><line nr="341" mi="0" ci="33" mb="0" cb="0"/><line nr="342" mi="0" ci="9" mb="0" cb="0"/><counter type="INSTRUCTION" missed="74" covered="352"/><counter type="BRANCH" missed="6" covered="16"/><counter type="LINE" missed="11" covered="48"/><counter type="COMPLEXITY" missed="6" covered="28"/><counter type="METHOD" missed="3" covered="20"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Fraction.java"><line nr="40" mi="2" ci="5" mb="1" cb="1"/><line nr="47" mi="0" ci="6" mb="0" cb="0"/><line nr="54" mi="0" ci="7" mb="0" cb="0"/><line nr="79" mi="0" ci="2" mb="0" cb="0"/><line nr="80" mi="4" ci="4" mb="2" cb="2"/><line nr="81" mi="4" ci="4" mb="2" cb="2"/><line nr="82" mi="0" ci="3" mb="0" cb="0"/><line nr="83" mi="0" ci="3" mb="0" cb="0"/><line nr="84" mi="0" ci="1" mb="0" cb="0"/><line nr="102" mi="0" ci="10" mb="0" cb="2"/><line nr="103" mi="0" ci="6" mb="0" cb="0"/><line nr="126" mi="0" ci="4" mb="0" cb="0"/><line nr="127" mi="0" ci="4" mb="0" cb="0"/><line nr="128" mi="0" ci="10" mb="0" cb="2"/><line nr="130" mi="0" ci="6" mb="0" cb="0"/><line nr="142" mi="0" ci="4" mb="0" cb="0"/><line nr="143" mi="0" ci="1" mb="0" cb="0"/><line nr="144" mi="0" ci="11" mb="0" cb="0"/><line nr="145" mi="0" ci="6" mb="0" cb="0"/><line nr="146" mi="0" ci="6" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="1" mb="0" cb="0"/><line nr="160" mi="0" ci="11" mb="0" cb="0"/><line nr="161" mi="0" ci="6" mb="0" cb="0"/><line nr="162" mi="0" ci="6" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="6" mb="0" cb="0"/><line nr="176" mi="0" ci="6" mb="0" cb="0"/><line nr="177" mi="0" ci="6" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="5" mb="0" cb="0"/><line nr="193" mi="0" ci="5" mb="0" cb="0"/><line nr="203" mi="0" ci="9" mb="0" cb="2"/><line nr="204" mi="0" ci="3" mb="0" cb="2"/><line nr="205" mi="0" ci="8" mb="0" cb="0"/><line nr="206" mi="0" ci="3" mb="0" cb="2"/><line nr="207" mi="0" ci="2" mb="0" cb="0"/><line nr="209" mi="0" ci="2" mb="0" cb="0"/><line nr="219" mi="0" ci="9" mb="0" cb="0"/><line nr="229" mi="0" ci="5" mb="0" cb="0"/><line nr="230" mi="0" ci="8" mb="0" cb="0"/><line nr="240" mi="0" ci="9" mb="0" cb="2"/><line nr="250" mi="0" ci="10" mb="0" cb="0"/><line nr="262" mi="4" ci="0" mb="0" cb="0"/><line nr="263" mi="16" ci="0" mb="4" cb="0"/><line nr="275" mi="0" ci="4" mb="0" cb="0"/><line nr="276" mi="0" ci="4" mb="0" cb="2"/><line nr="277" mi="0" ci="2" mb="0" cb="0"/><line nr="279" mi="0" ci="4" mb="0" cb="2"/><line nr="280" mi="0" ci="2" mb="0" cb="0"/><line nr="282" mi="0" ci="2" mb="0" cb="0"/><line nr="297" mi="0" ci="4" mb="0" cb="0"/><line nr="298" mi="0" ci="3" mb="0" cb="0"/><line nr="299" mi="0" ci="3" mb="0" cb="0"/><line nr="300" mi="0" ci="6" mb="0" cb="0"/><line nr="301" mi="0" ci="6" mb="0" cb="0"/><line nr="302" mi="0" ci="9" mb="0" cb="2"/><line nr="317" mi="0" ci="4" mb="0" cb="0"/><line nr="318" mi="0" ci="12" mb="0" cb="4"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="8" mb="0" cb="2"/><line nr="349" mi="0" ci="4" mb="0" cb="0"/><line nr="350" mi="0" ci="8" mb="0" cb="2"/><line nr="366" mi="0" ci="4" mb="0" cb="0"/><line nr="367" mi="0" ci="8" mb="0" cb="2"/><line nr="383" mi="0" ci="4" mb="0" cb="0"/><line nr="384" mi="0" ci="8" mb="0" cb="2"/><line nr="396" mi="0" ci="3" mb="0" cb="2"/><line nr="397" mi="0" ci="11" mb="0" cb="0"/><line nr="399" mi="0" ci="3" mb="0" cb="2"/><line nr="400" mi="0" ci="2" mb="0" cb="0"/><line nr="402" mi="0" ci="5" mb="0" cb="2"/><line nr="403" mi="0" ci="3" mb="0" cb="0"/><line nr="405" mi="0" ci="2" mb="0" cb="0"/><line nr="417" mi="0" ci="6" mb="0" cb="0"/><line nr="418" mi="0" ci="12" mb="0" cb="0"/><line nr="429" mi="0" ci="8" mb="0" cb="0"/><line nr="445" mi="0" ci="4" mb="0" cb="0"/><line nr="446" mi="0" ci="8" mb="0" cb="0"/><line nr="456" mi="0" ci="14" mb="0" cb="0"/><line nr="466" mi="0" ci="3" mb="0" cb="2"/><line nr="467" mi="0" ci="2" mb="0" cb="0"/><line nr="469" mi="0" ci="3" mb="0" cb="2"/><line nr="470" mi="0" ci="2" mb="0" cb="0"/><line nr="472" mi="0" ci="3" mb="0" cb="0"/><line nr="473" mi="0" ci="16" mb="0" cb="4"/><line nr="483" mi="0" ci="12" mb="0" cb="0"/><line nr="493" mi="0" ci="3" mb="0" cb="0"/><line nr="503" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="30" covered="476"/><counter type="BRANCH" missed="9" covered="49"/><counter type="LINE" missed="2" covered="87"/><counter type="COMPLEXITY" missed="8" covered="51"/><counter type="METHOD" missed="1" covered="29"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractComplexNumber.java"><line nr="52" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="3" mb="0" cb="0"/><line nr="86" mi="0" ci="2" mb="0" cb="0"/><line nr="87" mi="0" ci="5" mb="0" cb="0"/><line nr="88" mi="0" ci="5" mb="0" cb="0"/><line nr="89" mi="0" ci="1" mb="0" cb="0"/><line nr="102" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="5" mb="0" cb="0"/><line nr="104" mi="0" ci="5" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="236" mi="0" ci="14" mb="0" cb="0"/><line nr="246" mi="0" ci="3" mb="0" cb="2"/><line nr="247" mi="0" ci="2" mb="0" cb="0"/><line nr="249" mi="0" ci="3" mb="0" cb="2"/><line nr="250" mi="0" ci="2" mb="0" cb="0"/><line nr="252" mi="0" ci="3" mb="0" cb="0"/><line nr="253" mi="0" ci="16" mb="0" cb="4"/><line nr="263" mi="0" ci="12" mb="0" cb="0"/><line nr="273" mi="0" ci="3" mb="0" cb="0"/><line nr="283" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="97"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="0" covered="13"/><counter type="METHOD" missed="0" covered="9"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="514" covered="1604"/><counter type="BRANCH" missed="31" covered="119"/><counter type="LINE" missed="71" covered="254"/><counter type="COMPLEXITY" missed="37" covered="147"/><counter type="METHOD" missed="16" covered="93"/><counter type="CLASS" missed="0" covered="6"/></package><counter type="INSTRUCTION" missed="8707" covered="9841"/><counter type="BRANCH" missed="510" covered="934"/><counter type="LINE" missed="1109" covered="1373"/><counter type="COMPLEXITY" missed="650" covered="910"/><counter type="METHOD" missed="348" covered="490"/><counter type="CLASS" missed="0" covered="34"/></report>