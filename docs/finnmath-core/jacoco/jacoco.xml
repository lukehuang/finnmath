<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="finnMath Core"><sessioninfo id="lars-VirtualBox-218b05ee" start="1516222389229" dump="1516222402793"/><package name="com/github/ltennstedt/finnmath/core/util"><class name="com/github/ltennstedt/finnmath/core/util/SquareRootCalculator"><method name="&lt;init&gt;" desc="()V" line="91"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;)V" line="108"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(ILjava/math/RoundingMode;)V" line="128"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)V" line="152"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;)Ljava/math/BigDecimal;" line="176"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="195"><counter type="INSTRUCTION" missed="1" covered="23"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrtOfPerfectSquare" desc="(Ljava/math/BigInteger;)Ljava/math/BigInteger;" line="217"><counter type="INSTRUCTION" missed="1" covered="24"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="perfectSquare" desc="(Ljava/math/BigInteger;)Z" line="236"><counter type="INSTRUCTION" missed="1" covered="36"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="heronsMethod" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="246"><counter type="INSTRUCTION" missed="0" covered="67"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="calculateSuccessor" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="264"><counter type="INSTRUCTION" missed="1" covered="37"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="seedValue" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="274"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scientificNotationForSqrt" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/number/ScientificNotation;" line="284"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="301"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getPrecision" desc="()Ljava/math/BigDecimal;" line="306"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getScale" desc="()I" line="310"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRoundingMode" desc="()Ljava/math/RoundingMode;" line="314"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="47"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="436"/><counter type="BRANCH" missed="4" covered="26"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="4" covered="28"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/util/MathRandom"><method name="&lt;init&gt;" desc="()V" line="69"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(J)V" line="80"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigInteger" desc="(J)Ljava/math/BigInteger;" line="96"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigInteger" desc="(J)Ljava/math/BigInteger;" line="113"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigInteger" desc="(J)Ljava/math/BigInteger;" line="130"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigIntegers" desc="(JI)Ljava/util/List;" line="153"><counter type="INSTRUCTION" missed="1" covered="37"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigIntegers" desc="(JI)Ljava/util/List;" line="178"><counter type="INSTRUCTION" missed="1" covered="37"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegers" desc="(JI)Ljava/util/List;" line="203"><counter type="INSTRUCTION" missed="1" covered="37"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="228"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="253"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="278"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="300"><counter type="INSTRUCTION" missed="3" covered="30"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="326"><counter type="INSTRUCTION" missed="2" covered="31"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleBigDecimal" desc="(JI)Ljava/math/BigDecimal;" line="351"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="keepBigDecimalInBound" desc="(Ljava/math/BigDecimal;J)Ljava/math/BigDecimal;" line="359"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveBigDecimals" desc="(JII)Ljava/util/List;" line="393"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeBigDecimals" desc="(JII)Ljava/util/List;" line="423"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimals" desc="(JII)Ljava/util/List;" line="453"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveBigDecimals" desc="(JII)Ljava/util/List;" line="484"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeBigDecimals" desc="(JII)Ljava/util/List;" line="515"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleBigDecimals" desc="(JII)Ljava/util/List;" line="546"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="569"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="588"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="605"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="624"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="642"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFraction" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="658"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPositiveFractions" desc="(JI)Ljava/util/List;" line="681"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextNegativeFractions" desc="(JI)Ljava/util/List;" line="706"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextFractions" desc="(JI)Ljava/util/List;" line="731"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertiblePositiveFractions" desc="(JI)Ljava/util/List;" line="757"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleNegativeFractions" desc="(JI)Ljava/util/List;" line="783"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleFractions" desc="(JI)Ljava/util/List;" line="808"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="830"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumber" desc="(J)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="846"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="872"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleSimpleComplexNumbers" desc="(JI)Ljava/util/List;" line="898"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="921"><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumber" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="942"><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumbers" desc="(JII)Ljava/util/List;" line="973"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextInvertibleRealComplexNumbers" desc="(JII)Ljava/util/List;" line="1005"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPolarForm" desc="(JI)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="1031"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextPolarForms" desc="(JII)Ljava/util/List;" line="1056"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerVector" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="1082"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerVectors" desc="(JII)Ljava/util/List;" line="1109"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1139"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1166"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1197"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1229"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1253"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1283"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntegerMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="1316"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigIntegerMatrices" desc="(JIII)Ljava/util/List;" line="1358"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1391"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1423"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1455"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1486"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1517"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigIntegerMatrices" desc="(JII)Ljava/util/List;" line="1549"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalVector" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="1579"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalVectors" desc="(JIII)Ljava/util/List;" line="1616"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalMatrix" desc="(JIII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1652"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1684"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1719"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1755"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1783"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1817"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigDecimalMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="1854"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextBigDecimalMatrices" desc="(JIIII)Ljava/util/List;" line="1900"><counter type="INSTRUCTION" missed="0" covered="66"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1938"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="1975"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2012"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2049"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2086"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricBigDecimalMatrices" desc="(JIII)Ljava/util/List;" line="2123"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberVector" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="2150"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberVectors" desc="(JII)Ljava/util/List;" line="2180"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2211"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2237"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2267"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2299"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2323"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2353"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricSimpleComplexNumberMatrix" desc="(JI)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="2386"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSimpleComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="2429"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2463"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2496"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2528"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2560"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2592"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricSimpleComplexNumberMatrices" desc="(JII)Ljava/util/List;" line="2625"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberVector" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="2655"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberVectors" desc="(JIII)Ljava/util/List;" line="2689"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberMatrix" desc="(JIII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2725"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2758"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2795"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2833"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2863"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2899"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricRealComplexNumberMatrix" desc="(JII)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="2938"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextRealComplexNumberMatrices" desc="(JIIII)Ljava/util/List;" line="2986"><counter type="INSTRUCTION" missed="0" covered="66"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextUpperTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3025"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextLowerTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3063"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextTriangularRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3100"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextDiagonalRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3137"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSymmetricRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3174"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="nextSkewSymmetricRealComplexNumberMatrices" desc="(JIII)Ljava/util/List;" line="3211"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="3224"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRandom" desc="()Ljava/util/Random;" line="3229"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricRealComplexNumberMatrix$47" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2943"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricRealComplexNumberMatrix$46" desc="(Ljava/lang/Integer;JILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2944"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricRealComplexNumberMatrix$45" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2904"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricRealComplexNumberMatrix$44" desc="(JILjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2905"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalRealComplexNumberMatrix$43" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2868"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalRealComplexNumberMatrix$42" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2869"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularRealComplexNumberMatrix$41" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2800"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularRealComplexNumberMatrix$40" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2801"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularRealComplexNumberMatrix$39" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2763"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularRealComplexNumberMatrix$38" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2764"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberMatrix$37" desc="(ILcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;JILjava/lang/Integer;)V" line="2731"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextRealComplexNumberMatrix$36" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="2732"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricSimpleComplexNumberMatrix$35" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2390"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricSimpleComplexNumberMatrix$34" desc="(Ljava/lang/Integer;JLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2391"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricSimpleComplexNumberMatrix$33" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2357"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricSimpleComplexNumberMatrix$32" desc="(JLjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;)V" line="2358"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalSimpleComplexNumberMatrix$31" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2327"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalSimpleComplexNumberMatrix$30" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2328"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularSimpleComplexNumberMatrix$29" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2271"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularSimpleComplexNumberMatrix$28" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2272"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularSimpleComplexNumberMatrix$27" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2241"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularSimpleComplexNumberMatrix$26" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2242"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberMatrix$25" desc="(ILcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;JLjava/lang/Integer;)V" line="2216"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSimpleComplexNumberMatrix$24" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="2217"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigDecimalMatrix$23" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1858"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigDecimalMatrix$22" desc="(Ljava/lang/Integer;JILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1859"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigDecimalMatrix$21" desc="(IJILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1821"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigDecimalMatrix$20" desc="(JILjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;)V" line="1822"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigDecimalMatrix$19" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1787"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigDecimalMatrix$18" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1788"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigDecimalMatrix$17" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1723"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigDecimalMatrix$16" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1724"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigDecimalMatrix$15" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1688"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigDecimalMatrix$14" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1689"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalMatrix$13" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;JILjava/lang/Integer;)V" line="1658"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigDecimalMatrix$12" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;JILjava/lang/Integer;)V" line="1659"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntegerMatrix$11" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1320"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSkewSymmetricBigIntegerMatrix$10" desc="(Ljava/lang/Integer;JLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1321"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntegerMatrix$9" desc="(IJLcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1287"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextSymmetricBigIntegerMatrix$8" desc="(JLjava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;)V" line="1288"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntegerMatrix$7" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1257"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextDiagonalBigIntegerMatrix$6" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1258"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntegerMatrix$5" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1201"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextLowerTriangularBigIntegerMatrix$4" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1202"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntegerMatrix$3" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1170"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextUpperTriangularBigIntegerMatrix$2" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1171"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerMatrix$1" desc="(ILcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;JLjava/lang/Integer;)V" line="1144"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$nextBigIntegerMatrix$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;JLjava/lang/Integer;)V" line="1145"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="11" covered="5381"/><counter type="BRANCH" missed="6" covered="740"/><counter type="LINE" missed="3" covered="780"/><counter type="COMPLEXITY" missed="6" covered="524"/><counter type="METHOD" missed="0" covered="157"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="MathRandom.java"><line nr="69" mi="0" ci="2" mb="0" cb="0"/><line nr="70" mi="0" ci="5" mb="0" cb="0"/><line nr="71" mi="0" ci="1" mb="0" cb="0"/><line nr="80" mi="0" ci="2" mb="0" cb="0"/><line nr="81" mi="0" ci="6" mb="0" cb="0"/><line nr="82" mi="0" ci="1" mb="0" cb="0"/><line nr="96" mi="0" ci="10" mb="0" cb="2"/><line nr="97" mi="0" ci="5" mb="0" cb="0"/><line nr="113" mi="0" ci="10" mb="0" cb="2"/><line nr="114" mi="0" ci="5" mb="0" cb="0"/><line nr="130" mi="0" ci="10" mb="0" cb="2"/><line nr="131" mi="0" ci="4" mb="0" cb="2"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="134" mi="0" ci="4" mb="0" cb="0"/><line nr="153" mi="1" ci="9" mb="1" cb="1"/><line nr="154" mi="0" ci="8" mb="0" cb="2"/><line nr="155" mi="0" ci="5" mb="0" cb="0"/><line nr="156" mi="0" ci="7" mb="0" cb="2"/><line nr="157" mi="0" ci="6" mb="0" cb="0"/><line nr="159" mi="0" ci="2" mb="0" cb="0"/><line nr="178" mi="1" ci="9" mb="1" cb="1"/><line nr="179" mi="0" ci="8" mb="0" cb="2"/><line nr="180" mi="0" ci="5" mb="0" cb="0"/><line nr="181" mi="0" ci="7" mb="0" cb="2"/><line nr="182" mi="0" ci="6" mb="0" cb="0"/><line nr="184" mi="0" ci="2" mb="0" cb="0"/><line nr="203" mi="1" ci="9" mb="1" cb="1"/><line nr="204" mi="0" ci="8" mb="0" cb="2"/><line nr="205" mi="0" ci="5" mb="0" cb="0"/><line nr="206" mi="0" ci="7" mb="0" cb="2"/><line nr="207" mi="0" ci="6" mb="0" cb="0"/><line nr="209" mi="0" ci="2" mb="0" cb="0"/><line nr="228" mi="0" ci="10" mb="0" cb="2"/><line nr="229" mi="0" ci="9" mb="0" cb="2"/><line nr="230" mi="0" ci="5" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="1" cb="1"/><line nr="232" mi="3" ci="0" mb="0" cb="0"/><line nr="234" mi="0" ci="2" mb="0" cb="0"/><line nr="253" mi="0" ci="10" mb="0" cb="2"/><line nr="254" mi="0" ci="9" mb="0" cb="2"/><line nr="255" mi="0" ci="5" mb="0" cb="0"/><line nr="256" mi="0" ci="4" mb="0" cb="2"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="259" mi="0" ci="2" mb="0" cb="0"/><line nr="278" mi="0" ci="10" mb="0" cb="2"/><line nr="279" mi="0" ci="9" mb="0" cb="2"/><line nr="280" mi="0" ci="5" mb="0" cb="0"/><line nr="281" mi="0" ci="8" mb="0" cb="0"/><line nr="300" mi="0" ci="10" mb="0" cb="2"/><line nr="301" mi="0" ci="9" mb="0" cb="2"/><line nr="302" mi="0" ci="5" mb="0" cb="0"/><line nr="303" mi="0" ci="4" mb="1" cb="1"/><line nr="304" mi="3" ci="0" mb="0" cb="0"/><line nr="306" mi="0" ci="2" mb="0" cb="0"/><line nr="326" mi="0" ci="10" mb="0" cb="2"/><line nr="327" mi="0" ci="9" mb="0" cb="2"/><line nr="328" mi="0" ci="5" mb="0" cb="0"/><line nr="329" mi="0" ci="4" mb="1" cb="1"/><line nr="330" mi="0" ci="3" mb="0" cb="0"/><line nr="332" mi="2" ci="0" mb="0" cb="0"/><line nr="351" mi="0" ci="10" mb="0" cb="2"/><line nr="352" mi="0" ci="9" mb="0" cb="2"/><line nr="353" mi="0" ci="5" mb="0" cb="0"/><line nr="354" mi="0" ci="8" mb="0" cb="0"/><line nr="359" mi="0" ci="2" mb="0" cb="0"/><line nr="360" mi="0" ci="3" mb="0" cb="0"/><line nr="361" mi="0" ci="5" mb="0" cb="2"/><line nr="362" mi="0" ci="5" mb="0" cb="2"/><line nr="363" mi="0" ci="5" mb="0" cb="0"/><line nr="366" mi="0" ci="6" mb="0" cb="2"/><line nr="367" mi="0" ci="5" mb="0" cb="0"/><line nr="370" mi="0" ci="2" mb="0" cb="0"/><line nr="393" mi="0" ci="10" mb="0" cb="2"/><line nr="394" mi="0" ci="9" mb="0" cb="2"/><line nr="395" mi="0" ci="8" mb="0" cb="2"/><line nr="396" mi="0" ci="5" mb="0" cb="0"/><line nr="397" mi="0" ci="7" mb="0" cb="2"/><line nr="398" mi="0" ci="7" mb="0" cb="0"/><line nr="400" mi="0" ci="2" mb="0" cb="0"/><line nr="423" mi="0" ci="10" mb="0" cb="2"/><line nr="424" mi="0" ci="9" mb="0" cb="2"/><line nr="425" mi="0" ci="8" mb="0" cb="2"/><line nr="426" mi="0" ci="5" mb="0" cb="0"/><line nr="427" mi="0" ci="7" mb="0" cb="2"/><line nr="428" mi="0" ci="7" mb="0" cb="0"/><line nr="430" mi="0" ci="2" mb="0" cb="0"/><line nr="453" mi="0" ci="10" mb="0" cb="2"/><line nr="454" mi="0" ci="9" mb="0" cb="2"/><line nr="455" mi="0" ci="8" mb="0" cb="2"/><line nr="456" mi="0" ci="5" mb="0" cb="0"/><line nr="457" mi="0" ci="7" mb="0" cb="2"/><line nr="458" mi="0" ci="7" mb="0" cb="0"/><line nr="460" mi="0" ci="2" mb="0" cb="0"/><line nr="484" mi="0" ci="10" mb="0" cb="2"/><line nr="485" mi="0" ci="9" mb="0" cb="2"/><line nr="486" mi="0" ci="8" mb="0" cb="2"/><line nr="487" mi="0" ci="5" mb="0" cb="0"/><line nr="488" mi="0" ci="7" mb="0" cb="2"/><line nr="489" mi="0" ci="7" mb="0" cb="0"/><line nr="491" mi="0" ci="2" mb="0" cb="0"/><line nr="515" mi="0" ci="10" mb="0" cb="2"/><line nr="516" mi="0" ci="9" mb="0" cb="2"/><line nr="517" mi="0" ci="8" mb="0" cb="2"/><line nr="518" mi="0" ci="5" mb="0" cb="0"/><line nr="519" mi="0" ci="7" mb="0" cb="2"/><line nr="520" mi="0" ci="7" mb="0" cb="0"/><line nr="522" mi="0" ci="2" mb="0" cb="0"/><line nr="546" mi="0" ci="10" mb="0" cb="2"/><line nr="547" mi="0" ci="9" mb="0" cb="2"/><line nr="548" mi="0" ci="8" mb="0" cb="2"/><line nr="549" mi="0" ci="5" mb="0" cb="0"/><line nr="550" mi="0" ci="7" mb="0" cb="2"/><line nr="551" mi="0" ci="7" mb="0" cb="0"/><line nr="553" mi="0" ci="2" mb="0" cb="0"/><line nr="569" mi="0" ci="10" mb="0" cb="2"/><line nr="570" mi="0" ci="5" mb="0" cb="0"/><line nr="571" mi="0" ci="5" mb="0" cb="0"/><line nr="572" mi="0" ci="6" mb="0" cb="0"/><line nr="588" mi="0" ci="10" mb="0" cb="2"/><line nr="589" mi="0" ci="5" mb="0" cb="0"/><line nr="605" mi="0" ci="10" mb="0" cb="2"/><line nr="606" mi="0" ci="4" mb="0" cb="2"/><line nr="607" mi="0" ci="4" mb="0" cb="0"/><line nr="609" mi="0" ci="4" mb="0" cb="0"/><line nr="624" mi="0" ci="10" mb="0" cb="2"/><line nr="625" mi="0" ci="5" mb="0" cb="0"/><line nr="626" mi="0" ci="5" mb="0" cb="0"/><line nr="627" mi="0" ci="6" mb="0" cb="0"/><line nr="642" mi="0" ci="10" mb="0" cb="2"/><line nr="643" mi="0" ci="5" mb="0" cb="0"/><line nr="658" mi="0" ci="10" mb="0" cb="2"/><line nr="659" mi="0" ci="4" mb="0" cb="2"/><line nr="660" mi="0" ci="4" mb="0" cb="0"/><line nr="662" mi="0" ci="4" mb="0" cb="0"/><line nr="681" mi="0" ci="10" mb="0" cb="2"/><line nr="682" mi="0" ci="8" mb="0" cb="2"/><line nr="683" mi="0" ci="5" mb="0" cb="0"/><line nr="684" mi="0" ci="7" mb="0" cb="2"/><line nr="685" mi="0" ci="6" mb="0" cb="0"/><line nr="687" mi="0" ci="2" mb="0" cb="0"/><line nr="706" mi="0" ci="10" mb="0" cb="2"/><line nr="707" mi="0" ci="8" mb="0" cb="2"/><line nr="708" mi="0" ci="5" mb="0" cb="0"/><line nr="709" mi="0" ci="7" mb="0" cb="2"/><line nr="710" mi="0" ci="6" mb="0" cb="0"/><line nr="712" mi="0" ci="2" mb="0" cb="0"/><line nr="731" mi="0" ci="10" mb="0" cb="2"/><line nr="732" mi="0" ci="8" mb="0" cb="2"/><line nr="733" mi="0" ci="5" mb="0" cb="0"/><line nr="734" mi="0" ci="7" mb="0" cb="2"/><line nr="735" mi="0" ci="6" mb="0" cb="0"/><line nr="737" mi="0" ci="2" mb="0" cb="0"/><line nr="757" mi="0" ci="10" mb="0" cb="2"/><line nr="758" mi="0" ci="8" mb="0" cb="2"/><line nr="759" mi="0" ci="5" mb="0" cb="0"/><line nr="760" mi="0" ci="7" mb="0" cb="2"/><line nr="761" mi="0" ci="6" mb="0" cb="0"/><line nr="763" mi="0" ci="2" mb="0" cb="0"/><line nr="783" mi="0" ci="10" mb="0" cb="2"/><line nr="784" mi="0" ci="8" mb="0" cb="2"/><line nr="785" mi="0" ci="5" mb="0" cb="0"/><line nr="786" mi="0" ci="7" mb="0" cb="2"/><line nr="787" mi="0" ci="6" mb="0" cb="0"/><line nr="789" mi="0" ci="2" mb="0" cb="0"/><line nr="808" mi="0" ci="10" mb="0" cb="2"/><line nr="809" mi="0" ci="8" mb="0" cb="2"/><line nr="810" mi="0" ci="5" mb="0" cb="0"/><line nr="811" mi="0" ci="7" mb="0" cb="2"/><line nr="812" mi="0" ci="6" mb="0" cb="0"/><line nr="814" mi="0" ci="2" mb="0" cb="0"/><line nr="830" mi="0" ci="10" mb="0" cb="2"/><line nr="831" mi="0" ci="10" mb="0" cb="0"/><line nr="846" mi="0" ci="10" mb="0" cb="2"/><line nr="847" mi="0" ci="5" mb="0" cb="0"/><line nr="848" mi="0" ci="4" mb="0" cb="0"/><line nr="849" mi="0" ci="4" mb="0" cb="2"/><line nr="850" mi="0" ci="6" mb="0" cb="0"/><line nr="852" mi="0" ci="6" mb="0" cb="0"/><line nr="872" mi="0" ci="10" mb="0" cb="2"/><line nr="873" mi="0" ci="8" mb="0" cb="2"/><line nr="874" mi="0" ci="5" mb="0" cb="0"/><line nr="875" mi="0" ci="7" mb="0" cb="2"/><line nr="876" mi="0" ci="6" mb="0" cb="0"/><line nr="878" mi="0" ci="2" mb="0" cb="0"/><line nr="898" mi="0" ci="10" mb="0" cb="2"/><line nr="899" mi="0" ci="8" mb="0" cb="2"/><line nr="900" mi="0" ci="5" mb="0" cb="0"/><line nr="901" mi="0" ci="7" mb="0" cb="2"/><line nr="902" mi="0" ci="6" mb="0" cb="0"/><line nr="904" mi="0" ci="2" mb="0" cb="0"/><line nr="921" mi="0" ci="10" mb="0" cb="2"/><line nr="922" mi="0" ci="9" mb="0" cb="2"/><line nr="923" mi="0" ci="5" mb="0" cb="0"/><line nr="924" mi="0" ci="5" mb="0" cb="0"/><line nr="925" mi="0" ci="6" mb="0" cb="0"/><line nr="942" mi="0" ci="10" mb="0" cb="2"/><line nr="943" mi="0" ci="9" mb="0" cb="2"/><line nr="944" mi="0" ci="5" mb="0" cb="0"/><line nr="946" mi="0" ci="14" mb="0" cb="2"/><line nr="947" mi="0" ci="4" mb="0" cb="2"/><line nr="948" mi="0" ci="6" mb="0" cb="0"/><line nr="950" mi="0" ci="6" mb="0" cb="0"/><line nr="973" mi="0" ci="10" mb="0" cb="2"/><line nr="974" mi="0" ci="9" mb="0" cb="2"/><line nr="975" mi="0" ci="8" mb="0" cb="2"/><line nr="976" mi="0" ci="5" mb="0" cb="0"/><line nr="977" mi="0" ci="7" mb="0" cb="2"/><line nr="978" mi="0" ci="7" mb="0" cb="0"/><line nr="980" mi="0" ci="2" mb="0" cb="0"/><line nr="1005" mi="0" ci="10" mb="0" cb="2"/><line nr="1006" mi="0" ci="9" mb="0" cb="2"/><line nr="1007" mi="0" ci="8" mb="0" cb="2"/><line nr="1008" mi="0" ci="5" mb="0" cb="0"/><line nr="1009" mi="0" ci="7" mb="0" cb="2"/><line nr="1010" mi="0" ci="7" mb="0" cb="0"/><line nr="1012" mi="0" ci="2" mb="0" cb="0"/><line nr="1031" mi="0" ci="10" mb="0" cb="2"/><line nr="1032" mi="0" ci="9" mb="0" cb="2"/><line nr="1033" mi="0" ci="12" mb="0" cb="0"/><line nr="1056" mi="0" ci="10" mb="0" cb="2"/><line nr="1057" mi="0" ci="9" mb="0" cb="2"/><line nr="1058" mi="0" ci="8" mb="0" cb="2"/><line nr="1059" mi="0" ci="5" mb="0" cb="0"/><line nr="1060" mi="0" ci="7" mb="0" cb="2"/><line nr="1061" mi="0" ci="7" mb="0" cb="0"/><line nr="1063" mi="0" ci="2" mb="0" cb="0"/><line nr="1082" mi="0" ci="10" mb="0" cb="2"/><line nr="1083" mi="0" ci="8" mb="0" cb="2"/><line nr="1084" mi="0" ci="3" mb="0" cb="0"/><line nr="1085" mi="0" ci="7" mb="0" cb="2"/><line nr="1086" mi="0" ci="6" mb="0" cb="0"/><line nr="1088" mi="0" ci="3" mb="0" cb="0"/><line nr="1109" mi="0" ci="10" mb="0" cb="2"/><line nr="1110" mi="0" ci="8" mb="0" cb="2"/><line nr="1111" mi="0" ci="8" mb="0" cb="2"/><line nr="1112" mi="0" ci="5" mb="0" cb="0"/><line nr="1113" mi="0" ci="7" mb="0" cb="2"/><line nr="1114" mi="0" ci="7" mb="0" cb="0"/><line nr="1116" mi="0" ci="2" mb="0" cb="0"/><line nr="1139" mi="0" ci="10" mb="0" cb="2"/><line nr="1140" mi="0" ci="8" mb="0" cb="2"/><line nr="1141" mi="0" ci="8" mb="0" cb="2"/><line nr="1142" mi="0" ci="4" mb="0" cb="0"/><line nr="1143" mi="0" ci="13" mb="0" cb="0"/><line nr="1144" mi="0" ci="13" mb="0" cb="0"/><line nr="1145" mi="0" ci="10" mb="0" cb="0"/><line nr="1146" mi="0" ci="3" mb="0" cb="0"/><line nr="1166" mi="0" ci="10" mb="0" cb="2"/><line nr="1167" mi="0" ci="8" mb="0" cb="2"/><line nr="1168" mi="0" ci="4" mb="0" cb="0"/><line nr="1169" mi="0" ci="13" mb="0" cb="0"/><line nr="1170" mi="0" ci="14" mb="0" cb="0"/><line nr="1171" mi="0" ci="5" mb="0" cb="2"/><line nr="1172" mi="0" ci="9" mb="0" cb="0"/><line nr="1174" mi="0" ci="6" mb="0" cb="0"/><line nr="1176" mi="0" ci="1" mb="0" cb="0"/><line nr="1177" mi="0" ci="3" mb="0" cb="0"/><line nr="1197" mi="0" ci="10" mb="0" cb="2"/><line nr="1198" mi="0" ci="8" mb="0" cb="2"/><line nr="1199" mi="0" ci="4" mb="0" cb="0"/><line nr="1200" mi="0" ci="13" mb="0" cb="0"/><line nr="1201" mi="0" ci="14" mb="0" cb="0"/><line nr="1202" mi="0" ci="5" mb="0" cb="2"/><line nr="1203" mi="0" ci="9" mb="0" cb="0"/><line nr="1205" mi="0" ci="6" mb="0" cb="0"/><line nr="1207" mi="0" ci="1" mb="0" cb="0"/><line nr="1208" mi="0" ci="3" mb="0" cb="0"/><line nr="1229" mi="0" ci="10" mb="0" cb="2"/><line nr="1230" mi="0" ci="8" mb="0" cb="2"/><line nr="1231" mi="0" ci="4" mb="0" cb="2"/><line nr="1232" mi="0" ci="5" mb="0" cb="0"/><line nr="1234" mi="0" ci="5" mb="0" cb="0"/><line nr="1253" mi="0" ci="10" mb="0" cb="2"/><line nr="1254" mi="0" ci="8" mb="0" cb="2"/><line nr="1255" mi="0" ci="4" mb="0" cb="0"/><line nr="1256" mi="0" ci="13" mb="0" cb="0"/><line nr="1257" mi="0" ci="14" mb="0" cb="0"/><line nr="1258" mi="0" ci="4" mb="0" cb="2"/><line nr="1259" mi="0" ci="9" mb="0" cb="0"/><line nr="1261" mi="0" ci="6" mb="0" cb="0"/><line nr="1263" mi="0" ci="1" mb="0" cb="0"/><line nr="1264" mi="0" ci="3" mb="0" cb="0"/><line nr="1283" mi="0" ci="10" mb="0" cb="2"/><line nr="1284" mi="0" ci="8" mb="0" cb="2"/><line nr="1285" mi="0" ci="4" mb="0" cb="0"/><line nr="1286" mi="0" ci="13" mb="0" cb="0"/><line nr="1287" mi="0" ci="14" mb="0" cb="0"/><line nr="1288" mi="0" ci="4" mb="0" cb="0"/><line nr="1289" mi="0" ci="5" mb="0" cb="2"/><line nr="1290" mi="0" ci="6" mb="0" cb="0"/><line nr="1291" mi="0" ci="6" mb="0" cb="0"/><line nr="1293" mi="0" ci="4" mb="0" cb="2"/><line nr="1294" mi="0" ci="6" mb="0" cb="0"/><line nr="1296" mi="0" ci="1" mb="0" cb="0"/><line nr="1297" mi="0" ci="3" mb="0" cb="0"/><line nr="1316" mi="0" ci="10" mb="0" cb="2"/><line nr="1317" mi="0" ci="8" mb="0" cb="2"/><line nr="1318" mi="0" ci="4" mb="0" cb="0"/><line nr="1319" mi="0" ci="13" mb="0" cb="0"/><line nr="1320" mi="0" ci="14" mb="0" cb="0"/><line nr="1321" mi="0" ci="5" mb="0" cb="2"/><line nr="1322" mi="0" ci="4" mb="0" cb="0"/><line nr="1323" mi="0" ci="6" mb="0" cb="0"/><line nr="1324" mi="0" ci="7" mb="0" cb="0"/><line nr="1326" mi="0" ci="4" mb="0" cb="2"/><line nr="1327" mi="0" ci="6" mb="0" cb="0"/><line nr="1329" mi="0" ci="1" mb="0" cb="0"/><line nr="1330" mi="0" ci="3" mb="0" cb="0"/><line nr="1358" mi="0" ci="10" mb="0" cb="2"/><line nr="1359" mi="0" ci="8" mb="0" cb="2"/><line nr="1360" mi="0" ci="8" mb="0" cb="2"/><line nr="1361" mi="0" ci="8" mb="0" cb="2"/><line nr="1362" mi="0" ci="5" mb="0" cb="0"/><line nr="1363" mi="0" ci="7" mb="0" cb="2"/><line nr="1364" mi="0" ci="8" mb="0" cb="0"/><line nr="1366" mi="0" ci="2" mb="0" cb="0"/><line nr="1391" mi="0" ci="10" mb="0" cb="2"/><line nr="1392" mi="0" ci="8" mb="0" cb="2"/><line nr="1393" mi="0" ci="8" mb="0" cb="2"/><line nr="1394" mi="0" ci="5" mb="0" cb="0"/><line nr="1395" mi="0" ci="7" mb="0" cb="2"/><line nr="1396" mi="0" ci="7" mb="0" cb="0"/><line nr="1398" mi="0" ci="2" mb="0" cb="0"/><line nr="1423" mi="0" ci="10" mb="0" cb="2"/><line nr="1424" mi="0" ci="8" mb="0" cb="2"/><line nr="1425" mi="0" ci="8" mb="0" cb="2"/><line nr="1426" mi="0" ci="5" mb="0" cb="0"/><line nr="1427" mi="0" ci="7" mb="0" cb="2"/><line nr="1428" mi="0" ci="7" mb="0" cb="0"/><line nr="1430" mi="0" ci="2" mb="0" cb="0"/><line nr="1455" mi="0" ci="10" mb="0" cb="2"/><line nr="1456" mi="0" ci="8" mb="0" cb="2"/><line nr="1457" mi="0" ci="8" mb="0" cb="2"/><line nr="1458" mi="0" ci="5" mb="0" cb="0"/><line nr="1459" mi="0" ci="7" mb="0" cb="2"/><line nr="1460" mi="0" ci="7" mb="0" cb="0"/><line nr="1462" mi="0" ci="2" mb="0" cb="0"/><line nr="1486" mi="0" ci="10" mb="0" cb="2"/><line nr="1487" mi="0" ci="8" mb="0" cb="2"/><line nr="1488" mi="0" ci="8" mb="0" cb="2"/><line nr="1489" mi="0" ci="5" mb="0" cb="0"/><line nr="1490" mi="0" ci="7" mb="0" cb="2"/><line nr="1491" mi="0" ci="7" mb="0" cb="0"/><line nr="1493" mi="0" ci="2" mb="0" cb="0"/><line nr="1517" mi="0" ci="10" mb="0" cb="2"/><line nr="1518" mi="0" ci="8" mb="0" cb="2"/><line nr="1519" mi="0" ci="8" mb="0" cb="2"/><line nr="1520" mi="0" ci="5" mb="0" cb="0"/><line nr="1521" mi="0" ci="7" mb="0" cb="2"/><line nr="1522" mi="0" ci="7" mb="0" cb="0"/><line nr="1524" mi="0" ci="2" mb="0" cb="0"/><line nr="1549" mi="0" ci="10" mb="0" cb="2"/><line nr="1550" mi="0" ci="8" mb="0" cb="2"/><line nr="1551" mi="0" ci="8" mb="0" cb="2"/><line nr="1552" mi="0" ci="5" mb="0" cb="0"/><line nr="1553" mi="0" ci="7" mb="0" cb="2"/><line nr="1554" mi="0" ci="7" mb="0" cb="0"/><line nr="1556" mi="0" ci="2" mb="0" cb="0"/><line nr="1579" mi="0" ci="10" mb="0" cb="2"/><line nr="1580" mi="0" ci="9" mb="0" cb="2"/><line nr="1581" mi="0" ci="8" mb="0" cb="2"/><line nr="1582" mi="0" ci="3" mb="0" cb="0"/><line nr="1583" mi="0" ci="7" mb="0" cb="2"/><line nr="1584" mi="0" ci="7" mb="0" cb="0"/><line nr="1586" mi="0" ci="3" mb="0" cb="0"/><line nr="1616" mi="0" ci="10" mb="0" cb="2"/><line nr="1617" mi="0" ci="9" mb="0" cb="2"/><line nr="1618" mi="0" ci="8" mb="0" cb="2"/><line nr="1619" mi="0" ci="8" mb="0" cb="2"/><line nr="1620" mi="0" ci="5" mb="0" cb="0"/><line nr="1621" mi="0" ci="7" mb="0" cb="2"/><line nr="1622" mi="0" ci="8" mb="0" cb="0"/><line nr="1624" mi="0" ci="2" mb="0" cb="0"/><line nr="1652" mi="0" ci="10" mb="0" cb="2"/><line nr="1653" mi="0" ci="9" mb="0" cb="2"/><line nr="1654" mi="0" ci="8" mb="0" cb="2"/><line nr="1655" mi="0" ci="8" mb="0" cb="2"/><line nr="1656" mi="0" ci="4" mb="0" cb="0"/><line nr="1657" mi="0" ci="14" mb="0" cb="0"/><line nr="1658" mi="0" ci="14" mb="0" cb="0"/><line nr="1659" mi="0" ci="11" mb="0" cb="0"/><line nr="1660" mi="0" ci="3" mb="0" cb="0"/><line nr="1684" mi="0" ci="10" mb="0" cb="2"/><line nr="1685" mi="0" ci="8" mb="0" cb="2"/><line nr="1686" mi="0" ci="4" mb="0" cb="0"/><line nr="1687" mi="0" ci="14" mb="0" cb="0"/><line nr="1688" mi="0" ci="15" mb="0" cb="0"/><line nr="1689" mi="0" ci="5" mb="0" cb="2"/><line nr="1690" mi="0" ci="10" mb="0" cb="0"/><line nr="1692" mi="0" ci="6" mb="0" cb="0"/><line nr="1694" mi="0" ci="1" mb="0" cb="0"/><line nr="1695" mi="0" ci="3" mb="0" cb="0"/><line nr="1719" mi="0" ci="10" mb="0" cb="2"/><line nr="1720" mi="0" ci="8" mb="0" cb="2"/><line nr="1721" mi="0" ci="4" mb="0" cb="0"/><line nr="1722" mi="0" ci="14" mb="0" cb="0"/><line nr="1723" mi="0" ci="15" mb="0" cb="0"/><line nr="1724" mi="0" ci="5" mb="0" cb="2"/><line nr="1725" mi="0" ci="10" mb="0" cb="0"/><line nr="1727" mi="0" ci="6" mb="0" cb="0"/><line nr="1729" mi="0" ci="1" mb="0" cb="0"/><line nr="1730" mi="0" ci="3" mb="0" cb="0"/><line nr="1755" mi="0" ci="10" mb="0" cb="2"/><line nr="1756" mi="0" ci="8" mb="0" cb="2"/><line nr="1757" mi="0" ci="4" mb="0" cb="2"/><line nr="1758" mi="0" ci="6" mb="0" cb="0"/><line nr="1760" mi="0" ci="6" mb="0" cb="0"/><line nr="1783" mi="0" ci="10" mb="0" cb="2"/><line nr="1784" mi="0" ci="8" mb="0" cb="2"/><line nr="1785" mi="0" ci="4" mb="0" cb="0"/><line nr="1786" mi="0" ci="14" mb="0" cb="0"/><line nr="1787" mi="0" ci="15" mb="0" cb="0"/><line nr="1788" mi="0" ci="4" mb="0" cb="2"/><line nr="1789" mi="0" ci="10" mb="0" cb="0"/><line nr="1791" mi="0" ci="6" mb="0" cb="0"/><line nr="1793" mi="0" ci="1" mb="0" cb="0"/><line nr="1794" mi="0" ci="3" mb="0" cb="0"/><line nr="1817" mi="0" ci="10" mb="0" cb="2"/><line nr="1818" mi="0" ci="8" mb="0" cb="2"/><line nr="1819" mi="0" ci="4" mb="0" cb="0"/><line nr="1820" mi="0" ci="14" mb="0" cb="0"/><line nr="1821" mi="0" ci="15" mb="0" cb="0"/><line nr="1822" mi="0" ci="5" mb="0" cb="0"/><line nr="1823" mi="0" ci="5" mb="0" cb="2"/><line nr="1824" mi="0" ci="6" mb="0" cb="0"/><line nr="1825" mi="0" ci="6" mb="0" cb="0"/><line nr="1827" mi="0" ci="4" mb="0" cb="2"/><line nr="1828" mi="0" ci="6" mb="0" cb="0"/><line nr="1830" mi="0" ci="1" mb="0" cb="0"/><line nr="1831" mi="0" ci="3" mb="0" cb="0"/><line nr="1854" mi="0" ci="10" mb="0" cb="2"/><line nr="1855" mi="0" ci="8" mb="0" cb="2"/><line nr="1856" mi="0" ci="4" mb="0" cb="0"/><line nr="1857" mi="0" ci="14" mb="0" cb="0"/><line nr="1858" mi="0" ci="15" mb="0" cb="0"/><line nr="1859" mi="0" ci="5" mb="0" cb="2"/><line nr="1860" mi="0" ci="5" mb="0" cb="0"/><line nr="1861" mi="0" ci="6" mb="0" cb="0"/><line nr="1862" mi="0" ci="7" mb="0" cb="0"/><line nr="1864" mi="0" ci="4" mb="0" cb="2"/><line nr="1865" mi="0" ci="6" mb="0" cb="0"/><line nr="1867" mi="0" ci="1" mb="0" cb="0"/><line nr="1868" mi="0" ci="3" mb="0" cb="0"/><line nr="1900" mi="0" ci="10" mb="0" cb="2"/><line nr="1901" mi="0" ci="9" mb="0" cb="2"/><line nr="1902" mi="0" ci="8" mb="0" cb="2"/><line nr="1903" mi="0" ci="8" mb="0" cb="2"/><line nr="1904" mi="0" ci="8" mb="0" cb="2"/><line nr="1905" mi="0" ci="5" mb="0" cb="0"/><line nr="1906" mi="0" ci="7" mb="0" cb="2"/><line nr="1907" mi="0" ci="9" mb="0" cb="0"/><line nr="1909" mi="0" ci="2" mb="0" cb="0"/><line nr="1938" mi="0" ci="10" mb="0" cb="2"/><line nr="1939" mi="0" ci="9" mb="0" cb="2"/><line nr="1940" mi="0" ci="8" mb="0" cb="2"/><line nr="1941" mi="0" ci="8" mb="0" cb="2"/><line nr="1942" mi="0" ci="5" mb="0" cb="0"/><line nr="1943" mi="0" ci="7" mb="0" cb="2"/><line nr="1944" mi="0" ci="8" mb="0" cb="0"/><line nr="1946" mi="0" ci="2" mb="0" cb="0"/><line nr="1975" mi="0" ci="10" mb="0" cb="2"/><line nr="1976" mi="0" ci="9" mb="0" cb="2"/><line nr="1977" mi="0" ci="8" mb="0" cb="2"/><line nr="1978" mi="0" ci="8" mb="0" cb="2"/><line nr="1979" mi="0" ci="5" mb="0" cb="0"/><line nr="1980" mi="0" ci="7" mb="0" cb="2"/><line nr="1981" mi="0" ci="8" mb="0" cb="0"/><line nr="1983" mi="0" ci="2" mb="0" cb="0"/><line nr="2012" mi="0" ci="10" mb="0" cb="2"/><line nr="2013" mi="0" ci="9" mb="0" cb="2"/><line nr="2014" mi="0" ci="8" mb="0" cb="2"/><line nr="2015" mi="0" ci="8" mb="0" cb="2"/><line nr="2016" mi="0" ci="5" mb="0" cb="0"/><line nr="2017" mi="0" ci="7" mb="0" cb="2"/><line nr="2018" mi="0" ci="8" mb="0" cb="0"/><line nr="2020" mi="0" ci="2" mb="0" cb="0"/><line nr="2049" mi="0" ci="10" mb="0" cb="2"/><line nr="2050" mi="0" ci="9" mb="0" cb="2"/><line nr="2051" mi="0" ci="8" mb="0" cb="2"/><line nr="2052" mi="0" ci="8" mb="0" cb="2"/><line nr="2053" mi="0" ci="5" mb="0" cb="0"/><line nr="2054" mi="0" ci="7" mb="0" cb="2"/><line nr="2055" mi="0" ci="8" mb="0" cb="0"/><line nr="2057" mi="0" ci="2" mb="0" cb="0"/><line nr="2086" mi="0" ci="10" mb="0" cb="2"/><line nr="2087" mi="0" ci="9" mb="0" cb="2"/><line nr="2088" mi="0" ci="8" mb="0" cb="2"/><line nr="2089" mi="0" ci="8" mb="0" cb="2"/><line nr="2090" mi="0" ci="5" mb="0" cb="0"/><line nr="2091" mi="0" ci="7" mb="0" cb="2"/><line nr="2092" mi="0" ci="8" mb="0" cb="0"/><line nr="2094" mi="0" ci="2" mb="0" cb="0"/><line nr="2123" mi="0" ci="10" mb="0" cb="2"/><line nr="2124" mi="0" ci="9" mb="0" cb="2"/><line nr="2125" mi="0" ci="8" mb="0" cb="2"/><line nr="2126" mi="0" ci="8" mb="0" cb="2"/><line nr="2127" mi="0" ci="5" mb="0" cb="0"/><line nr="2128" mi="0" ci="7" mb="0" cb="2"/><line nr="2129" mi="0" ci="8" mb="0" cb="0"/><line nr="2131" mi="0" ci="2" mb="0" cb="0"/><line nr="2150" mi="0" ci="10" mb="0" cb="2"/><line nr="2151" mi="0" ci="8" mb="0" cb="2"/><line nr="2152" mi="0" ci="1" mb="0" cb="0"/><line nr="2153" mi="0" ci="2" mb="0" cb="0"/><line nr="2154" mi="0" ci="7" mb="0" cb="2"/><line nr="2155" mi="0" ci="6" mb="0" cb="0"/><line nr="2157" mi="0" ci="3" mb="0" cb="0"/><line nr="2180" mi="0" ci="10" mb="0" cb="2"/><line nr="2181" mi="0" ci="8" mb="0" cb="2"/><line nr="2182" mi="0" ci="8" mb="0" cb="2"/><line nr="2183" mi="0" ci="5" mb="0" cb="0"/><line nr="2184" mi="0" ci="7" mb="0" cb="2"/><line nr="2185" mi="0" ci="7" mb="0" cb="0"/><line nr="2187" mi="0" ci="2" mb="0" cb="0"/><line nr="2211" mi="0" ci="10" mb="0" cb="2"/><line nr="2212" mi="0" ci="8" mb="0" cb="2"/><line nr="2213" mi="0" ci="8" mb="0" cb="2"/><line nr="2214" mi="0" ci="4" mb="0" cb="0"/><line nr="2215" mi="0" ci="13" mb="0" cb="0"/><line nr="2216" mi="0" ci="13" mb="0" cb="0"/><line nr="2217" mi="0" ci="10" mb="0" cb="0"/><line nr="2218" mi="0" ci="3" mb="0" cb="0"/><line nr="2237" mi="0" ci="10" mb="0" cb="2"/><line nr="2238" mi="0" ci="8" mb="0" cb="2"/><line nr="2239" mi="0" ci="4" mb="0" cb="0"/><line nr="2240" mi="0" ci="13" mb="0" cb="0"/><line nr="2241" mi="0" ci="14" mb="0" cb="0"/><line nr="2242" mi="0" ci="5" mb="0" cb="2"/><line nr="2243" mi="0" ci="9" mb="0" cb="0"/><line nr="2245" mi="0" ci="6" mb="0" cb="0"/><line nr="2247" mi="0" ci="1" mb="0" cb="0"/><line nr="2248" mi="0" ci="3" mb="0" cb="0"/><line nr="2267" mi="0" ci="10" mb="0" cb="2"/><line nr="2268" mi="0" ci="8" mb="0" cb="2"/><line nr="2269" mi="0" ci="4" mb="0" cb="0"/><line nr="2270" mi="0" ci="13" mb="0" cb="0"/><line nr="2271" mi="0" ci="14" mb="0" cb="0"/><line nr="2272" mi="0" ci="5" mb="0" cb="2"/><line nr="2273" mi="0" ci="9" mb="0" cb="0"/><line nr="2275" mi="0" ci="6" mb="0" cb="0"/><line nr="2277" mi="0" ci="1" mb="0" cb="0"/><line nr="2278" mi="0" ci="3" mb="0" cb="0"/><line nr="2299" mi="0" ci="10" mb="0" cb="2"/><line nr="2300" mi="0" ci="8" mb="0" cb="2"/><line nr="2301" mi="0" ci="4" mb="0" cb="2"/><line nr="2302" mi="0" ci="5" mb="0" cb="0"/><line nr="2304" mi="0" ci="5" mb="0" cb="0"/><line nr="2323" mi="0" ci="10" mb="0" cb="2"/><line nr="2324" mi="0" ci="8" mb="0" cb="2"/><line nr="2325" mi="0" ci="4" mb="0" cb="0"/><line nr="2326" mi="0" ci="13" mb="0" cb="0"/><line nr="2327" mi="0" ci="14" mb="0" cb="0"/><line nr="2328" mi="0" ci="4" mb="0" cb="2"/><line nr="2329" mi="0" ci="9" mb="0" cb="0"/><line nr="2331" mi="0" ci="6" mb="0" cb="0"/><line nr="2333" mi="0" ci="1" mb="0" cb="0"/><line nr="2334" mi="0" ci="3" mb="0" cb="0"/><line nr="2353" mi="0" ci="10" mb="0" cb="2"/><line nr="2354" mi="0" ci="8" mb="0" cb="2"/><line nr="2355" mi="0" ci="4" mb="0" cb="0"/><line nr="2356" mi="0" ci="13" mb="0" cb="0"/><line nr="2357" mi="0" ci="14" mb="0" cb="0"/><line nr="2358" mi="0" ci="4" mb="0" cb="0"/><line nr="2359" mi="0" ci="5" mb="0" cb="2"/><line nr="2360" mi="0" ci="6" mb="0" cb="0"/><line nr="2361" mi="0" ci="6" mb="0" cb="0"/><line nr="2363" mi="0" ci="4" mb="0" cb="2"/><line nr="2364" mi="0" ci="6" mb="0" cb="0"/><line nr="2366" mi="0" ci="1" mb="0" cb="0"/><line nr="2367" mi="0" ci="3" mb="0" cb="0"/><line nr="2386" mi="0" ci="10" mb="0" cb="2"/><line nr="2387" mi="0" ci="8" mb="0" cb="2"/><line nr="2388" mi="0" ci="4" mb="0" cb="0"/><line nr="2389" mi="0" ci="13" mb="0" cb="0"/><line nr="2390" mi="0" ci="14" mb="0" cb="0"/><line nr="2391" mi="0" ci="5" mb="0" cb="2"/><line nr="2392" mi="0" ci="4" mb="0" cb="0"/><line nr="2393" mi="0" ci="6" mb="0" cb="0"/><line nr="2394" mi="0" ci="7" mb="0" cb="0"/><line nr="2396" mi="0" ci="4" mb="0" cb="2"/><line nr="2397" mi="0" ci="6" mb="0" cb="0"/><line nr="2399" mi="0" ci="1" mb="0" cb="0"/><line nr="2400" mi="0" ci="3" mb="0" cb="0"/><line nr="2429" mi="0" ci="10" mb="0" cb="2"/><line nr="2430" mi="0" ci="8" mb="0" cb="2"/><line nr="2431" mi="0" ci="8" mb="0" cb="2"/><line nr="2432" mi="0" ci="8" mb="0" cb="2"/><line nr="2433" mi="0" ci="5" mb="0" cb="0"/><line nr="2434" mi="0" ci="7" mb="0" cb="2"/><line nr="2435" mi="0" ci="8" mb="0" cb="0"/><line nr="2437" mi="0" ci="2" mb="0" cb="0"/><line nr="2463" mi="0" ci="10" mb="0" cb="2"/><line nr="2464" mi="0" ci="8" mb="0" cb="2"/><line nr="2465" mi="0" ci="8" mb="0" cb="2"/><line nr="2466" mi="0" ci="5" mb="0" cb="0"/><line nr="2467" mi="0" ci="7" mb="0" cb="2"/><line nr="2468" mi="0" ci="7" mb="0" cb="0"/><line nr="2470" mi="0" ci="2" mb="0" cb="0"/><line nr="2496" mi="0" ci="10" mb="0" cb="2"/><line nr="2497" mi="0" ci="8" mb="0" cb="2"/><line nr="2498" mi="0" ci="8" mb="0" cb="2"/><line nr="2499" mi="0" ci="5" mb="0" cb="0"/><line nr="2500" mi="0" ci="7" mb="0" cb="2"/><line nr="2501" mi="0" ci="7" mb="0" cb="0"/><line nr="2503" mi="0" ci="2" mb="0" cb="0"/><line nr="2528" mi="0" ci="10" mb="0" cb="2"/><line nr="2529" mi="0" ci="8" mb="0" cb="2"/><line nr="2530" mi="0" ci="8" mb="0" cb="2"/><line nr="2531" mi="0" ci="5" mb="0" cb="0"/><line nr="2532" mi="0" ci="7" mb="0" cb="2"/><line nr="2533" mi="0" ci="7" mb="0" cb="0"/><line nr="2535" mi="0" ci="2" mb="0" cb="0"/><line nr="2560" mi="0" ci="10" mb="0" cb="2"/><line nr="2561" mi="0" ci="8" mb="0" cb="2"/><line nr="2562" mi="0" ci="8" mb="0" cb="2"/><line nr="2563" mi="0" ci="5" mb="0" cb="0"/><line nr="2564" mi="0" ci="7" mb="0" cb="2"/><line nr="2565" mi="0" ci="7" mb="0" cb="0"/><line nr="2567" mi="0" ci="2" mb="0" cb="0"/><line nr="2592" mi="0" ci="10" mb="0" cb="2"/><line nr="2593" mi="0" ci="8" mb="0" cb="2"/><line nr="2594" mi="0" ci="8" mb="0" cb="2"/><line nr="2595" mi="0" ci="5" mb="0" cb="0"/><line nr="2596" mi="0" ci="7" mb="0" cb="2"/><line nr="2597" mi="0" ci="7" mb="0" cb="0"/><line nr="2599" mi="0" ci="2" mb="0" cb="0"/><line nr="2625" mi="0" ci="10" mb="0" cb="2"/><line nr="2626" mi="0" ci="8" mb="0" cb="2"/><line nr="2627" mi="0" ci="8" mb="0" cb="2"/><line nr="2628" mi="0" ci="5" mb="0" cb="0"/><line nr="2629" mi="0" ci="7" mb="0" cb="2"/><line nr="2630" mi="0" ci="7" mb="0" cb="0"/><line nr="2632" mi="0" ci="2" mb="0" cb="0"/><line nr="2655" mi="0" ci="10" mb="0" cb="2"/><line nr="2656" mi="0" ci="9" mb="0" cb="2"/><line nr="2657" mi="0" ci="8" mb="0" cb="2"/><line nr="2658" mi="0" ci="3" mb="0" cb="0"/><line nr="2659" mi="0" ci="7" mb="0" cb="2"/><line nr="2660" mi="0" ci="7" mb="0" cb="0"/><line nr="2662" mi="0" ci="3" mb="0" cb="0"/><line nr="2689" mi="0" ci="10" mb="0" cb="2"/><line nr="2690" mi="0" ci="9" mb="0" cb="2"/><line nr="2691" mi="0" ci="8" mb="0" cb="2"/><line nr="2692" mi="0" ci="8" mb="0" cb="2"/><line nr="2693" mi="0" ci="5" mb="0" cb="0"/><line nr="2694" mi="0" ci="7" mb="0" cb="2"/><line nr="2695" mi="0" ci="8" mb="0" cb="0"/><line nr="2697" mi="0" ci="2" mb="0" cb="0"/><line nr="2725" mi="0" ci="10" mb="0" cb="2"/><line nr="2726" mi="0" ci="9" mb="0" cb="2"/><line nr="2727" mi="0" ci="8" mb="0" cb="2"/><line nr="2728" mi="0" ci="8" mb="0" cb="2"/><line nr="2729" mi="0" ci="4" mb="0" cb="0"/><line nr="2730" mi="0" ci="14" mb="0" cb="0"/><line nr="2731" mi="0" ci="15" mb="0" cb="0"/><line nr="2732" mi="0" ci="10" mb="0" cb="0"/><line nr="2733" mi="0" ci="3" mb="0" cb="0"/><line nr="2758" mi="0" ci="10" mb="0" cb="2"/><line nr="2759" mi="0" ci="9" mb="0" cb="2"/><line nr="2760" mi="0" ci="8" mb="0" cb="2"/><line nr="2761" mi="0" ci="4" mb="0" cb="0"/><line nr="2762" mi="0" ci="14" mb="0" cb="0"/><line nr="2763" mi="0" ci="15" mb="0" cb="0"/><line nr="2764" mi="0" ci="5" mb="0" cb="2"/><line nr="2765" mi="0" ci="10" mb="0" cb="0"/><line nr="2767" mi="0" ci="6" mb="0" cb="0"/><line nr="2769" mi="0" ci="1" mb="0" cb="0"/><line nr="2770" mi="0" ci="3" mb="0" cb="0"/><line nr="2795" mi="0" ci="10" mb="0" cb="2"/><line nr="2796" mi="0" ci="9" mb="0" cb="2"/><line nr="2797" mi="0" ci="8" mb="0" cb="2"/><line nr="2798" mi="0" ci="4" mb="0" cb="0"/><line nr="2799" mi="0" ci="14" mb="0" cb="0"/><line nr="2800" mi="0" ci="15" mb="0" cb="0"/><line nr="2801" mi="0" ci="5" mb="0" cb="2"/><line nr="2802" mi="0" ci="10" mb="0" cb="0"/><line nr="2804" mi="0" ci="6" mb="0" cb="0"/><line nr="2806" mi="0" ci="1" mb="0" cb="0"/><line nr="2807" mi="0" ci="3" mb="0" cb="0"/><line nr="2833" mi="0" ci="10" mb="0" cb="2"/><line nr="2834" mi="0" ci="9" mb="0" cb="2"/><line nr="2835" mi="0" ci="8" mb="0" cb="2"/><line nr="2836" mi="0" ci="4" mb="0" cb="2"/><line nr="2837" mi="0" ci="6" mb="0" cb="0"/><line nr="2839" mi="0" ci="6" mb="0" cb="0"/><line nr="2863" mi="0" ci="10" mb="0" cb="2"/><line nr="2864" mi="0" ci="9" mb="0" cb="2"/><line nr="2865" mi="0" ci="8" mb="0" cb="2"/><line nr="2866" mi="0" ci="4" mb="0" cb="0"/><line nr="2867" mi="0" ci="14" mb="0" cb="0"/><line nr="2868" mi="0" ci="15" mb="0" cb="0"/><line nr="2869" mi="0" ci="4" mb="0" cb="2"/><line nr="2870" mi="0" ci="10" mb="0" cb="0"/><line nr="2872" mi="0" ci="6" mb="0" cb="0"/><line nr="2874" mi="0" ci="1" mb="0" cb="0"/><line nr="2875" mi="0" ci="3" mb="0" cb="0"/><line nr="2899" mi="0" ci="10" mb="0" cb="2"/><line nr="2900" mi="0" ci="9" mb="0" cb="2"/><line nr="2901" mi="0" ci="8" mb="0" cb="2"/><line nr="2902" mi="0" ci="4" mb="0" cb="0"/><line nr="2903" mi="0" ci="14" mb="0" cb="0"/><line nr="2904" mi="0" ci="15" mb="0" cb="0"/><line nr="2905" mi="0" ci="5" mb="0" cb="0"/><line nr="2906" mi="0" ci="5" mb="0" cb="2"/><line nr="2907" mi="0" ci="6" mb="0" cb="0"/><line nr="2908" mi="0" ci="6" mb="0" cb="0"/><line nr="2910" mi="0" ci="4" mb="0" cb="2"/><line nr="2911" mi="0" ci="6" mb="0" cb="0"/><line nr="2913" mi="0" ci="1" mb="0" cb="0"/><line nr="2914" mi="0" ci="3" mb="0" cb="0"/><line nr="2938" mi="0" ci="10" mb="0" cb="2"/><line nr="2939" mi="0" ci="9" mb="0" cb="2"/><line nr="2940" mi="0" ci="8" mb="0" cb="2"/><line nr="2941" mi="0" ci="4" mb="0" cb="0"/><line nr="2942" mi="0" ci="14" mb="0" cb="0"/><line nr="2943" mi="0" ci="15" mb="0" cb="0"/><line nr="2944" mi="0" ci="5" mb="0" cb="2"/><line nr="2945" mi="0" ci="5" mb="0" cb="0"/><line nr="2946" mi="0" ci="6" mb="0" cb="0"/><line nr="2947" mi="0" ci="7" mb="0" cb="0"/><line nr="2949" mi="0" ci="4" mb="0" cb="2"/><line nr="2950" mi="0" ci="6" mb="0" cb="0"/><line nr="2952" mi="0" ci="1" mb="0" cb="0"/><line nr="2953" mi="0" ci="3" mb="0" cb="0"/><line nr="2986" mi="0" ci="10" mb="0" cb="2"/><line nr="2987" mi="0" ci="9" mb="0" cb="2"/><line nr="2988" mi="0" ci="8" mb="0" cb="2"/><line nr="2989" mi="0" ci="8" mb="0" cb="2"/><line nr="2990" mi="0" ci="8" mb="0" cb="2"/><line nr="2991" mi="0" ci="5" mb="0" cb="0"/><line nr="2992" mi="0" ci="7" mb="0" cb="2"/><line nr="2993" mi="0" ci="9" mb="0" cb="0"/><line nr="2995" mi="0" ci="2" mb="0" cb="0"/><line nr="3025" mi="0" ci="10" mb="0" cb="2"/><line nr="3026" mi="0" ci="9" mb="0" cb="2"/><line nr="3027" mi="0" ci="8" mb="0" cb="2"/><line nr="3028" mi="0" ci="8" mb="0" cb="2"/><line nr="3029" mi="0" ci="5" mb="0" cb="0"/><line nr="3030" mi="0" ci="7" mb="0" cb="2"/><line nr="3031" mi="0" ci="8" mb="0" cb="0"/><line nr="3033" mi="0" ci="2" mb="0" cb="0"/><line nr="3063" mi="0" ci="10" mb="0" cb="2"/><line nr="3064" mi="0" ci="9" mb="0" cb="2"/><line nr="3065" mi="0" ci="8" mb="0" cb="2"/><line nr="3066" mi="0" ci="8" mb="0" cb="2"/><line nr="3067" mi="0" ci="5" mb="0" cb="0"/><line nr="3068" mi="0" ci="7" mb="0" cb="2"/><line nr="3069" mi="0" ci="8" mb="0" cb="0"/><line nr="3071" mi="0" ci="2" mb="0" cb="0"/><line nr="3100" mi="0" ci="10" mb="0" cb="2"/><line nr="3101" mi="0" ci="9" mb="0" cb="2"/><line nr="3102" mi="0" ci="8" mb="0" cb="2"/><line nr="3103" mi="0" ci="8" mb="0" cb="2"/><line nr="3104" mi="0" ci="5" mb="0" cb="0"/><line nr="3105" mi="0" ci="7" mb="0" cb="2"/><line nr="3106" mi="0" ci="8" mb="0" cb="0"/><line nr="3108" mi="0" ci="2" mb="0" cb="0"/><line nr="3137" mi="0" ci="10" mb="0" cb="2"/><line nr="3138" mi="0" ci="9" mb="0" cb="2"/><line nr="3139" mi="0" ci="8" mb="0" cb="2"/><line nr="3140" mi="0" ci="8" mb="0" cb="2"/><line nr="3141" mi="0" ci="5" mb="0" cb="0"/><line nr="3142" mi="0" ci="7" mb="0" cb="2"/><line nr="3143" mi="0" ci="8" mb="0" cb="0"/><line nr="3145" mi="0" ci="2" mb="0" cb="0"/><line nr="3174" mi="0" ci="10" mb="0" cb="2"/><line nr="3175" mi="0" ci="9" mb="0" cb="2"/><line nr="3176" mi="0" ci="8" mb="0" cb="2"/><line nr="3177" mi="0" ci="8" mb="0" cb="2"/><line nr="3178" mi="0" ci="5" mb="0" cb="0"/><line nr="3179" mi="0" ci="7" mb="0" cb="2"/><line nr="3180" mi="0" ci="8" mb="0" cb="0"/><line nr="3182" mi="0" ci="2" mb="0" cb="0"/><line nr="3211" mi="0" ci="10" mb="0" cb="2"/><line nr="3212" mi="0" ci="9" mb="0" cb="2"/><line nr="3213" mi="0" ci="8" mb="0" cb="2"/><line nr="3214" mi="0" ci="8" mb="0" cb="2"/><line nr="3215" mi="0" ci="5" mb="0" cb="0"/><line nr="3216" mi="0" ci="7" mb="0" cb="2"/><line nr="3217" mi="0" ci="8" mb="0" cb="0"/><line nr="3219" mi="0" ci="2" mb="0" cb="0"/><line nr="3224" mi="0" ci="8" mb="0" cb="0"/><line nr="3229" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="5381"/><counter type="BRANCH" missed="6" covered="740"/><counter type="LINE" missed="3" covered="780"/><counter type="COMPLEXITY" missed="6" covered="524"/><counter type="METHOD" missed="0" covered="157"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SquareRootCalculator.java"><line nr="47" mi="0" ci="3" mb="0" cb="0"/><line nr="61" mi="0" ci="2" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="91" mi="0" ci="2" mb="0" cb="0"/><line nr="92" mi="0" ci="3" mb="0" cb="0"/><line nr="93" mi="0" ci="3" mb="0" cb="0"/><line nr="94" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="1" mb="0" cb="0"/><line nr="108" mi="0" ci="2" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="14" mb="0" cb="4"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><line nr="113" mi="0" ci="3" mb="0" cb="0"/><line nr="114" mi="0" ci="3" mb="0" cb="0"/><line nr="115" mi="0" ci="1" mb="0" cb="0"/><line nr="128" mi="0" ci="2" mb="0" cb="0"/><line nr="129" mi="0" ci="8" mb="0" cb="2"/><line nr="130" mi="0" ci="3" mb="0" cb="0"/><line nr="131" mi="0" ci="3" mb="0" cb="0"/><line nr="132" mi="0" ci="3" mb="0" cb="0"/><line nr="133" mi="0" ci="1" mb="0" cb="0"/><line nr="152" mi="0" ci="2" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="154" mi="0" ci="14" mb="0" cb="4"/><line nr="156" mi="0" ci="8" mb="0" cb="2"/><line nr="157" mi="0" ci="3" mb="0" cb="0"/><line nr="158" mi="0" ci="3" mb="0" cb="0"/><line nr="159" mi="0" ci="3" mb="0" cb="0"/><line nr="160" mi="0" ci="1" mb="0" cb="0"/><line nr="176" mi="0" ci="4" mb="0" cb="0"/><line nr="177" mi="0" ci="11" mb="0" cb="2"/><line nr="178" mi="0" ci="7" mb="0" cb="0"/><line nr="195" mi="0" ci="4" mb="0" cb="0"/><line nr="196" mi="1" ci="10" mb="1" cb="1"/><line nr="197" mi="0" ci="9" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="1" ci="10" mb="1" cb="1"/><line nr="219" mi="0" ci="6" mb="0" cb="0"/><line nr="220" mi="0" ci="4" mb="0" cb="0"/><line nr="236" mi="0" ci="4" mb="0" cb="0"/><line nr="237" mi="1" ci="10" mb="1" cb="1"/><line nr="238" mi="0" ci="2" mb="0" cb="0"/><line nr="239" mi="0" ci="12" mb="0" cb="2"/><line nr="240" mi="0" ci="4" mb="0" cb="0"/><line nr="242" mi="0" ci="4" mb="0" cb="0"/><line nr="246" mi="0" ci="7" mb="0" cb="0"/><line nr="247" mi="0" ci="1" mb="0" cb="0"/><line nr="248" mi="0" ci="4" mb="0" cb="0"/><line nr="249" mi="0" ci="5" mb="0" cb="0"/><line nr="250" mi="0" ci="5" mb="0" cb="0"/><line nr="251" mi="0" ci="2" mb="0" cb="0"/><line nr="252" mi="0" ci="9" mb="0" cb="2"/><line nr="253" mi="0" ci="8" mb="0" cb="0"/><line nr="254" mi="0" ci="2" mb="0" cb="0"/><line nr="255" mi="0" ci="5" mb="0" cb="0"/><line nr="256" mi="0" ci="5" mb="0" cb="0"/><line nr="258" mi="0" ci="5" mb="0" cb="0"/><line nr="259" mi="0" ci="7" mb="0" cb="0"/><line nr="260" mi="0" ci="2" mb="0" cb="0"/><line nr="264" mi="0" ci="3" mb="0" cb="0"/><line nr="265" mi="0" ci="5" mb="0" cb="0"/><line nr="266" mi="0" ci="5" mb="0" cb="0"/><line nr="267" mi="0" ci="4" mb="1" cb="1"/><line nr="268" mi="1" ci="13" mb="0" cb="0"/><line nr="269" mi="0" ci="5" mb="0" cb="0"/><line nr="270" mi="0" ci="2" mb="0" cb="0"/><line nr="274" mi="0" ci="4" mb="0" cb="0"/><line nr="275" mi="0" ci="7" mb="0" cb="0"/><line nr="276" mi="0" ci="6" mb="0" cb="2"/><line nr="277" mi="0" ci="10" mb="0" cb="0"/><line nr="279" mi="0" ci="10" mb="0" cb="0"/><line nr="284" mi="0" ci="5" mb="0" cb="0"/><line nr="285" mi="0" ci="2" mb="0" cb="0"/><line nr="286" mi="0" ci="2" mb="0" cb="0"/><line nr="287" mi="0" ci="5" mb="0" cb="0"/><line nr="288" mi="0" ci="5" mb="0" cb="0"/><line nr="289" mi="0" ci="6" mb="0" cb="2"/><line nr="290" mi="0" ci="3" mb="0" cb="0"/><line nr="291" mi="0" ci="7" mb="0" cb="0"/><line nr="292" mi="0" ci="4" mb="0" cb="0"/><line nr="293" mi="0" ci="5" mb="0" cb="0"/><line nr="294" mi="0" ci="6" mb="0" cb="0"/><line nr="296" mi="0" ci="6" mb="0" cb="0"/><line nr="301" mi="0" ci="14" mb="0" cb="0"/><line nr="302" mi="0" ci="2" mb="0" cb="0"/><line nr="306" mi="0" ci="3" mb="0" cb="0"/><line nr="310" mi="0" ci="3" mb="0" cb="0"/><line nr="314" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="436"/><counter type="BRANCH" missed="4" covered="26"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="4" covered="28"/><counter type="METHOD" missed="0" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="15" covered="5817"/><counter type="BRANCH" missed="10" covered="766"/><counter type="LINE" missed="3" covered="868"/><counter type="COMPLEXITY" missed="10" covered="552"/><counter type="METHOD" missed="0" covered="174"/><counter type="CLASS" missed="0" covered="2"/></package><package name="com/github/ltennstedt/finnmath/core/linear"><class name="com/github/ltennstedt/finnmath/core/linear/AbstractVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="54"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="72"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="entries" desc="()Lcom/google/common/collect/ImmutableSet;" line="85"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="96"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="145"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="150"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Lcom/google/common/collect/ImmutableMap;" line="154"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="44"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="514"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;" line="532"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;" line="556"><counter type="INSTRUCTION" missed="15" covered="18"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="2" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;" line="574"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="592"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="593"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="16" covered="104"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="2" covered="17"/><counter type="COMPLEXITY" missed="2" covered="8"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="620"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;" line="636"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;" line="658"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="675"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="675"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Ljava/lang/Integer;)V" line="660"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Ljava/lang/Integer;)V" line="660"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="102"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractVectorBuilder"><method name="&lt;init&gt;" desc="(I)V" line="43"><counter type="INSTRUCTION" missed="1" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;)Ljava/lang/Object;" line="69"><counter type="INSTRUCTION" missed="1" covered="25"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="76"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getMap" desc="()Ljava/util/Map;" line="80"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSize" desc="()I" line="84"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="61"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="3" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="45"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="53"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/Table;" line="57"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="505"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;" line="523"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;" line="547"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;" line="565"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="583"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="584"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="119"/><counter type="BRANCH" missed="3" covered="5"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="3" covered="7"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="616"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;" line="632"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;" line="654"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="671"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="671"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/math/BigInteger;Ljava/lang/Integer;)V" line="656"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;Ljava/lang/Integer;)V" line="656"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="102"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="619"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;" line="635"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;" line="657"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="674"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="674"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/lang/Integer;)V" line="659"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/lang/Integer;)V" line="659"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="102"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="59"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="79"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Ljava/math/BigDecimal;" line="101"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="122"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="137"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="148"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Ljava/math/BigDecimal;" line="171"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="185"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="198"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="217"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="239"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="265"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Ljava/math/BigDecimal;" line="288"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Ljava/math/BigDecimal;" line="309"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="336"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="367"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="402"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="419"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Ljava/math/BigDecimal;" line="442"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="455"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equalByComparingTo" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Z" line="467"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;" line="484"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="490"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="495"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="124"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="83"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="63"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="28" covered="598"/><counter type="BRANCH" missed="4" covered="56"/><counter type="LINE" missed="5" covered="84"/><counter type="COMPLEXITY" missed="3" covered="55"/><counter type="METHOD" missed="1" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="49"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="69"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="100"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="130"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="157"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="173"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="197"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="213"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="224"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="245"><counter type="INSTRUCTION" missed="0" covered="96"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="269"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="290"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="308"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;" line="334"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="362"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="381"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigInteger;" line="400"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="417"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="436"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="458"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="484"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="499"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="514"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="534"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="555"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="575"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;" line="589"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="596"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="601"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="343"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="309"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Lcom/google/common/collect/Table$Cell;)V" line="200"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="162"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="164"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="135"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="136"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="108"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix$SimpleComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="76"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1293"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="196"/><counter type="COMPLEXITY" missed="1" covered="89"/><counter type="METHOD" missed="0" covered="38"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="68"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="99"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="129"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="156"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigInteger;" line="170"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="194"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="210"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigInteger;" line="221"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigInteger;" line="242"><counter type="INSTRUCTION" missed="0" covered="96"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Ljava/math/BigInteger;" line="266"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigInteger;" line="287"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="305"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="331"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigInteger;" line="358"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigInteger;" line="377"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigInteger;" line="396"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="413"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="432"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="454"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="480"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="495"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="510"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="530"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="551"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="571"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;" line="586"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="593"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="598"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="339"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="306"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/math/BigInteger;Lcom/google/common/collect/Table$Cell;)V" line="197"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="160"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="161"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="134"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="135"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/google/common/collect/Table$Cell;)V" line="107"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix$BigIntegerMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;Lcom/google/common/collect/Table$Cell;)V" line="75"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1294"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="195"/><counter type="COMPLEXITY" missed="1" covered="89"/><counter type="METHOD" missed="0" covered="38"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder"><method name="&lt;init&gt;" desc="(II)V" line="625"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;" line="652"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;" line="674"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="691"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$2" desc="(Lcom/google/common/collect/Table$Cell;)V" line="691"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$1" desc="(Ljava/math/BigDecimal;Ljava/lang/Integer;)V" line="676"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$putAll$0" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;Ljava/lang/Integer;)V" line="676"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="102"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="7"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="62"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="84"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="104"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="119"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="130"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Ljava/math/BigDecimal;" line="153"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="166"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="183"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="202"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="224"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="250"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="271"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Ljava/math/BigDecimal;" line="296"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Ljava/math/BigDecimal;" line="317"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="344"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="375"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="410"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="427"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Ljava/math/BigDecimal;" line="450"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="463"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;" line="475"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="481"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="486"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="106"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="88"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="66"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="617"/><counter type="BRANCH" missed="0" covered="58"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="0" covered="56"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="61"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="83"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="103"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="118"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigInteger;" line="129"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Ljava/math/BigInteger;" line="152"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="166"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="179"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="198"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="220"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="246"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Ljava/math/BigInteger;" line="267"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Ljava/math/BigInteger;" line="292"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Ljava/math/BigDecimal;" line="313"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="340"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="371"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="406"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigInteger;" line="423"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;)Ljava/math/BigInteger;" line="446"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="459"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;" line="471"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="477"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="482"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="105"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="87"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;Ljava/lang/Integer;Ljava/math/BigInteger;)V" line="65"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="599"/><counter type="BRANCH" missed="0" covered="56"/><counter type="LINE" missed="0" covered="84"/><counter type="COMPLEXITY" missed="0" covered="55"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="46"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="66"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="97"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="127"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;" line="154"><counter type="INSTRUCTION" missed="19" covered="19"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="3" covered="3"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Ljava/math/BigDecimal;" line="168"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="192"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="208"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Ljava/math/BigDecimal;" line="219"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Ljava/math/BigDecimal;" line="240"><counter type="INSTRUCTION" missed="0" covered="96"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Ljava/math/BigDecimal;" line="264"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Ljava/math/BigDecimal;" line="285"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="303"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="329"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="356"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="375"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigDecimal;" line="394"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="410"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="432"><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="457"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="486"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="505"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="520"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="540"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="561"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="581"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;" line="595"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="602"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="607"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="337"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="304"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/math/BigDecimal;Lcom/google/common/collect/Table$Cell;)V" line="195"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="158"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector$BigDecimalVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalVector;Ljava/lang/Integer;Ljava/math/BigDecimal;)V" line="159"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="132"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="133"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="105"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix$BigDecimalMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;Lcom/google/common/collect/Table$Cell;)V" line="73"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="51" covered="1317"/><counter type="BRANCH" missed="4" covered="106"/><counter type="LINE" missed="6" covered="204"/><counter type="COMPLEXITY" missed="5" covered="88"/><counter type="METHOD" missed="2" covered="36"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="501"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;" line="519"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;" line="543"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Ljava/math/BigInteger;)Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector$BigIntegerVectorBuilder;" line="561"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerVector;" line="579"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="580"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="120"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="1" covered="9"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableMap;)V" line="46"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="63"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="85"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="105"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="120"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="131"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="taxicabDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Ljava/math/BigDecimal;" line="154"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="167"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="184"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="203"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="225"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="251"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="dotProduct" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="272"><counter type="INSTRUCTION" missed="0" covered="50"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistancePow2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Ljava/math/BigInteger;" line="297"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Ljava/math/BigDecimal;" line="318"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="345"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="376"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="euclideanDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="411"><counter type="INSTRUCTION" missed="0" covered="57"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="428"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDistance" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;)Ljava/math/BigDecimal;" line="451"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()I" line="464"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(I)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;" line="476"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="482"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="487"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$2" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="107"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="89"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="67"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="617"/><counter type="BRANCH" missed="0" covered="58"/><counter type="LINE" missed="0" covered="88"/><counter type="COMPLEXITY" missed="0" covered="56"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;)V" line="506"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;" line="524"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="put" desc="(Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;" line="548"><counter type="INSTRUCTION" missed="1" covered="32"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="putAll" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector$SimpleComplexNumberVectorBuilder;" line="566"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Lcom/github/ltennstedt/finnmath/core/linear/SimpleComplexNumberVector;" line="584"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$build$0" desc="(Ljava/lang/Integer;)V" line="585"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="119"/><counter type="BRANCH" missed="3" covered="5"/><counter type="LINE" missed="0" covered="19"/><counter type="COMPLEXITY" missed="3" covered="7"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/AbstractMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="59"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="square" desc="()Z" line="112"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="triangular" desc="()Z" line="124"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="diagonal" desc="()Z" line="140"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="symmetric" desc="()Z" line="156"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="skewSymmetric" desc="()Z" line="169"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="180"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnIndexes" desc="()Lcom/google/common/collect/ImmutableSet;" line="191"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="element" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Object;" line="214"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="cells" desc="()Lcom/google/common/collect/ImmutableSet;" line="231"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="row" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="248"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="column" desc="(Ljava/lang/Integer;)Lcom/google/common/collect/ImmutableMap;" line="268"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rows" desc="()Lcom/google/common/collect/ImmutableMap;" line="282"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columns" desc="()Lcom/google/common/collect/ImmutableMap;" line="293"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="elements" desc="()Lcom/google/common/collect/ImmutableCollection;" line="304"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="size" desc="()J" line="314"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rowSize" desc="()I" line="325"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="columnSize" desc="()I" line="336"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="341"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTable" desc="()Lcom/google/common/collect/ImmutableTable;" line="345"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="205"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="1" covered="28"/><counter type="METHOD" missed="0" covered="20"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix"><method name="&lt;init&gt;" desc="(Lcom/google/common/collect/ImmutableTable;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="68"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="99"><counter type="INSTRUCTION" missed="0" covered="56"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="129"><counter type="INSTRUCTION" missed="0" covered="41"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyVector" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;" line="156"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiplyRowWithColumn" desc="(Ljava/util/Map;Ljava/util/Map;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="172"><counter type="INSTRUCTION" missed="1" covered="49"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="scalarMultiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="196"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="212"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="trace" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="223"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="determinant" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="244"><counter type="INSTRUCTION" missed="0" covered="96"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="leibnizFormula" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="268"><counter type="INSTRUCTION" missed="0" covered="78"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="14"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ruleOfSarrus" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="289"><counter type="INSTRUCTION" missed="0" covered="174"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="transpose" desc="()Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="307"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minor" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;" line="333"><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsColumnSumNorm" desc="()Ljava/math/BigDecimal;" line="361"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxAbsRowSumNorm" desc="()Ljava/math/BigDecimal;" line="380"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNormPow2" desc="()Ljava/math/BigDecimal;" line="399"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="()Ljava/math/BigDecimal;" line="416"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;" line="435"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="457"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="frobeniusNorm" desc="(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="483"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="498"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="upperTriangular" desc="()Z" line="513"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lowerTriangular" desc="()Z" line="533"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="identity" desc="()Z" line="554"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="574"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="builder" desc="(II)Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;" line="588"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="595"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="600"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minor$8" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="342"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$transpose$7" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/google/common/collect/Table$Cell;)V" line="308"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$scalarMultiply$6" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/google/common/collect/Table$Cell;)V" line="199"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$5" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Ljava/util/Map;)V" line="161"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiplyVector$4" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector$RealComplexNumberVectorBuilder;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberVector;Ljava/lang/Integer;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)V" line="163"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$3" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/util/Map;)V" line="134"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$multiply$2" desc="(Ljava/util/Map;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Map;)V" line="135"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$subtract$1" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="107"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$add$0" desc="(Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix$RealComplexNumberMatrixBuilder;Lcom/github/ltennstedt/finnmath/core/linear/RealComplexNumberMatrix;Lcom/google/common/collect/Table$Cell;)V" line="75"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="1" covered="1293"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="196"/><counter type="COMPLEXITY" missed="1" covered="89"/><counter type="METHOD" missed="0" covered="38"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="RealComplexNumberMatrix.java"><line nr="48" mi="0" ci="3" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="14" mb="0" cb="2"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="14" mb="0" cb="2"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="6" mb="0" cb="0"/><line nr="74" mi="0" ci="7" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="14" mb="0" cb="0"/><line nr="78" mi="0" ci="1" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="14" mb="0" cb="2"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="14" mb="0" cb="2"/><line nr="103" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="1" mb="0" cb="0"/><line nr="105" mi="0" ci="6" mb="0" cb="0"/><line nr="106" mi="0" ci="7" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="14" mb="0" cb="0"/><line nr="110" mi="0" ci="1" mb="0" cb="0"/><line nr="111" mi="0" ci="3" mb="0" cb="0"/><line nr="129" mi="0" ci="4" mb="0" cb="0"/><line nr="130" mi="0" ci="14" mb="0" cb="2"/><line nr="131" mi="0" ci="3" mb="0" cb="0"/><line nr="132" mi="0" ci="1" mb="0" cb="0"/><line nr="133" mi="0" ci="8" mb="0" cb="0"/><line nr="134" mi="0" ci="17" mb="0" cb="0"/><line nr="135" mi="0" ci="5" mb="0" cb="0"/><line nr="136" mi="0" ci="6" mb="0" cb="0"/><line nr="137" mi="0" ci="1" mb="0" cb="0"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="0" ci="14" mb="0" cb="2"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="2" mb="0" cb="0"/><line nr="160" mi="0" ci="4" mb="0" cb="0"/><line nr="161" mi="0" ci="14" mb="0" cb="0"/><line nr="163" mi="0" ci="11" mb="0" cb="2"/><line nr="164" mi="0" ci="12" mb="0" cb="0"/><line nr="165" mi="0" ci="1" mb="0" cb="0"/><line nr="166" mi="0" ci="3" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="1" ci="12" mb="1" cb="1"/><line nr="175" mi="0" ci="1" mb="0" cb="0"/><line nr="176" mi="0" ci="2" mb="0" cb="0"/><line nr="177" mi="0" ci="11" mb="0" cb="2"/><line nr="178" mi="0" ci="12" mb="0" cb="0"/><line nr="179" mi="0" ci="1" mb="0" cb="0"/><line nr="180" mi="0" ci="2" mb="0" cb="0"/><line nr="196" mi="0" ci="4" mb="0" cb="0"/><line nr="197" mi="0" ci="10" mb="0" cb="0"/><line nr="198" mi="0" ci="6" mb="0" cb="0"/><line nr="199" mi="0" ci="16" mb="0" cb="0"/><line nr="200" mi="0" ci="3" mb="0" cb="0"/><line nr="212" mi="0" ci="5" mb="0" cb="0"/><line nr="223" mi="0" ci="10" mb="0" cb="0"/><line nr="224" mi="0" ci="2" mb="0" cb="0"/><line nr="225" mi="0" ci="2" mb="0" cb="0"/><line nr="226" mi="0" ci="12" mb="0" cb="2"/><line nr="227" mi="0" ci="9" mb="0" cb="0"/><line nr="228" mi="0" ci="1" mb="0" cb="0"/><line nr="229" mi="0" ci="2" mb="0" cb="0"/><line nr="244" mi="0" ci="5" mb="0" cb="0"/><line nr="245" mi="0" ci="9" mb="0" cb="0"/><line nr="246" mi="0" ci="3" mb="0" cb="2"/><line nr="247" mi="0" ci="2" mb="0" cb="0"/><line nr="248" mi="0" ci="12" mb="0" cb="2"/><line nr="249" mi="0" ci="8" mb="0" cb="2"/><line nr="250" mi="0" ci="6" mb="0" cb="0"/><line nr="252" mi="0" ci="1" mb="0" cb="0"/><line nr="253" mi="0" ci="2" mb="0" cb="0"/><line nr="255" mi="0" ci="3" mb="0" cb="2"/><line nr="256" mi="0" ci="3" mb="0" cb="0"/><line nr="258" mi="0" ci="3" mb="0" cb="2"/><line nr="259" mi="0" ci="3" mb="0" cb="0"/><line nr="263" mi="0" ci="36" mb="0" cb="0"/><line nr="268" mi="0" ci="2" mb="0" cb="0"/><line nr="269" mi="0" ci="13" mb="0" cb="2"/><line nr="270" mi="0" ci="2" mb="0" cb="0"/><line nr="271" mi="0" ci="2" mb="0" cb="0"/><line nr="272" mi="0" ci="5" mb="0" cb="0"/><line nr="273" mi="0" ci="7" mb="0" cb="2"/><line nr="274" mi="0" ci="5" mb="0" cb="0"/><line nr="275" mi="0" ci="9" mb="0" cb="2"/><line nr="276" mi="0" ci="8" mb="0" cb="2"/><line nr="277" mi="0" ci="1" mb="0" cb="0"/><line nr="280" mi="0" ci="12" mb="0" cb="0"/><line nr="282" mi="0" ci="9" mb="0" cb="0"/><line nr="283" mi="0" ci="1" mb="0" cb="0"/><line nr="284" mi="0" ci="2" mb="0" cb="0"/><line nr="289" mi="0" ci="27" mb="0" cb="0"/><line nr="290" mi="0" ci="27" mb="0" cb="0"/><line nr="291" mi="0" ci="27" mb="0" cb="0"/><line nr="292" mi="0" ci="27" mb="0" cb="0"/><line nr="293" mi="0" ci="27" mb="0" cb="0"/><line nr="294" mi="0" ci="27" mb="0" cb="0"/><line nr="295" mi="0" ci="12" mb="0" cb="0"/><line nr="307" mi="0" ci="10" mb="0" cb="0"/><line nr="308" mi="0" ci="19" mb="0" cb="0"/><line nr="309" mi="0" ci="3" mb="0" cb="0"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="4" mb="0" cb="0"/><line nr="335" mi="0" ci="8" mb="0" cb="0"/><line nr="336" mi="0" ci="3" mb="0" cb="0"/><line nr="337" mi="0" ci="8" mb="0" cb="0"/><line nr="338" mi="0" ci="3" mb="0" cb="0"/><line nr="339" mi="0" ci="2" mb="0" cb="0"/><line nr="340" mi="0" ci="12" mb="0" cb="0"/><line nr="341" mi="0" ci="8" mb="0" cb="0"/><line nr="342" mi="0" ci="4" mb="0" cb="0"/><line nr="343" mi="0" ci="4" mb="0" cb="0"/><line nr="344" mi="0" ci="8" mb="0" cb="4"/><line nr="345" mi="0" ci="13" mb="0" cb="2"/><line nr="346" mi="0" ci="13" mb="0" cb="2"/><line nr="347" mi="0" ci="8" mb="0" cb="0"/><line nr="349" mi="0" ci="1" mb="0" cb="0"/><line nr="350" mi="0" ci="3" mb="0" cb="0"/><line nr="361" mi="0" ci="2" mb="0" cb="0"/><line nr="362" mi="0" ci="14" mb="0" cb="2"/><line nr="363" mi="0" ci="2" mb="0" cb="0"/><line nr="364" mi="0" ci="11" mb="0" cb="2"/><line nr="365" mi="0" ci="5" mb="0" cb="0"/><line nr="366" mi="0" ci="1" mb="0" cb="0"/><line nr="367" mi="0" ci="4" mb="0" cb="0"/><line nr="368" mi="0" ci="1" mb="0" cb="0"/><line nr="369" mi="0" ci="2" mb="0" cb="0"/><line nr="380" mi="0" ci="2" mb="0" cb="0"/><line nr="381" mi="0" ci="14" mb="0" cb="2"/><line nr="382" mi="0" ci="2" mb="0" cb="0"/><line nr="383" mi="0" ci="11" mb="0" cb="2"/><line nr="384" mi="0" ci="5" mb="0" cb="0"/><line nr="385" mi="0" ci="1" mb="0" cb="0"/><line nr="386" mi="0" ci="4" mb="0" cb="0"/><line nr="387" mi="0" ci="1" mb="0" cb="0"/><line nr="388" mi="0" ci="2" mb="0" cb="0"/><line nr="399" mi="0" ci="2" mb="0" cb="0"/><line nr="400" mi="0" ci="12" mb="0" cb="2"/><line nr="401" mi="0" ci="5" mb="0" cb="0"/><line nr="402" mi="0" ci="1" mb="0" cb="0"/><line nr="403" mi="0" ci="2" mb="0" cb="0"/><line nr="416" mi="0" ci="7" mb="0" cb="0"/><line nr="435" mi="0" ci="4" mb="0" cb="0"/><line nr="436" mi="0" ci="14" mb="0" cb="4"/><line nr="438" mi="0" ci="8" mb="0" cb="0"/><line nr="457" mi="0" ci="8" mb="0" cb="2"/><line nr="458" mi="0" ci="9" mb="0" cb="0"/><line nr="483" mi="0" ci="4" mb="0" cb="0"/><line nr="484" mi="0" ci="14" mb="0" cb="4"/><line nr="486" mi="0" ci="8" mb="0" cb="2"/><line nr="487" mi="0" ci="10" mb="0" cb="0"/><line nr="498" mi="0" ci="2" mb="0" cb="0"/><line nr="499" mi="0" ci="12" mb="0" cb="2"/><line nr="500" mi="0" ci="5" mb="0" cb="0"/><line nr="501" mi="0" ci="1" mb="0" cb="0"/><line nr="502" mi="0" ci="2" mb="0" cb="0"/><line nr="513" mi="0" ci="3" mb="0" cb="2"/><line nr="514" mi="0" ci="12" mb="0" cb="2"/><line nr="515" mi="0" ci="9" mb="0" cb="2"/><line nr="516" mi="0" ci="5" mb="0" cb="2"/><line nr="517" mi="0" ci="2" mb="0" cb="0"/><line nr="519" mi="0" ci="1" mb="0" cb="0"/><line nr="520" mi="0" ci="2" mb="0" cb="0"/><line nr="522" mi="0" ci="2" mb="0" cb="0"/><line nr="533" mi="0" ci="3" mb="0" cb="2"/><line nr="534" mi="0" ci="12" mb="0" cb="2"/><line nr="535" mi="0" ci="9" mb="0" cb="2"/><line nr="536" mi="0" ci="5" mb="0" cb="2"/><line nr="537" mi="0" ci="2" mb="0" cb="0"/><line nr="539" mi="0" ci="1" mb="0" cb="0"/><line nr="540" mi="0" ci="2" mb="0" cb="0"/><line nr="542" mi="0" ci="2" mb="0" cb="0"/><line nr="554" mi="0" ci="3" mb="0" cb="2"/><line nr="555" mi="0" ci="12" mb="0" cb="2"/><line nr="556" mi="0" ci="9" mb="0" cb="2"/><line nr="557" mi="0" ci="2" mb="0" cb="0"/><line nr="559" mi="0" ci="1" mb="0" cb="0"/><line nr="560" mi="0" ci="2" mb="0" cb="0"/><line nr="562" mi="0" ci="2" mb="0" cb="0"/><line nr="574" mi="0" ci="15" mb="0" cb="4"/><line nr="588" mi="0" ci="8" mb="0" cb="2"/><line nr="589" mi="0" ci="8" mb="0" cb="2"/><line nr="590" mi="0" ci="7" mb="0" cb="0"/><line nr="595" mi="0" ci="9" mb="0" cb="0"/><line nr="600" mi="0" ci="3" mb="0" cb="2"/><line nr="601" mi="0" ci="2" mb="0" cb="0"/><line nr="603" mi="0" ci="3" mb="0" cb="2"/><line nr="604" mi="0" ci="2" mb="0" cb="0"/><line nr="606" mi="0" ci="3" mb="0" cb="0"/><line nr="607" mi="0" ci="6" mb="0" cb="0"/><line nr="619" mi="0" ci="4" mb="0" cb="0"/><line nr="620" mi="0" ci="1" mb="0" cb="0"/><line nr="635" mi="0" ci="4" mb="0" cb="0"/><line nr="636" mi="0" ci="4" mb="0" cb="0"/><line nr="637" mi="0" ci="4" mb="0" cb="0"/><line nr="638" mi="0" ci="9" mb="0" cb="0"/><line nr="639" mi="0" ci="3" mb="0" cb="0"/><line nr="640" mi="0" ci="9" mb="0" cb="0"/><line nr="641" mi="0" ci="3" mb="0" cb="0"/><line nr="642" mi="0" ci="7" mb="0" cb="0"/><line nr="643" mi="0" ci="2" mb="0" cb="0"/><line nr="657" mi="0" ci="4" mb="0" cb="0"/><line nr="658" mi="0" ci="7" mb="0" cb="0"/><line nr="659" mi="0" ci="18" mb="0" cb="0"/><line nr="660" mi="0" ci="2" mb="0" cb="0"/><line nr="674" mi="0" ci="13" mb="0" cb="0"/><line nr="675" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1395"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="213"/><counter type="COMPLEXITY" missed="1" covered="96"/><counter type="METHOD" missed="0" covered="45"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="SimpleComplexNumberMatrix.java"><line nr="49" mi="0" ci="3" mb="0" cb="0"/><line nr="50" mi="0" ci="1" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="14" mb="0" cb="2"/><line nr="71" mi="0" ci="4" mb="0" cb="0"/><line nr="72" mi="0" ci="14" mb="0" cb="2"/><line nr="73" mi="0" ci="4" mb="0" cb="0"/><line nr="74" mi="0" ci="6" mb="0" cb="0"/><line nr="75" mi="0" ci="7" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="78" mi="0" ci="14" mb="0" cb="0"/><line nr="79" mi="0" ci="1" mb="0" cb="0"/><line nr="80" mi="0" ci="3" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="101" mi="0" ci="14" mb="0" cb="2"/><line nr="102" mi="0" ci="4" mb="0" cb="0"/><line nr="103" mi="0" ci="14" mb="0" cb="2"/><line nr="104" mi="0" ci="3" mb="0" cb="0"/><line nr="105" mi="0" ci="1" mb="0" cb="0"/><line nr="106" mi="0" ci="6" mb="0" cb="0"/><line nr="107" mi="0" ci="7" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="14" mb="0" cb="0"/><line nr="111" mi="0" ci="1" mb="0" cb="0"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><line nr="130" mi="0" ci="4" mb="0" cb="0"/><line nr="131" mi="0" ci="14" mb="0" cb="2"/><line nr="132" mi="0" ci="3" mb="0" cb="0"/><line nr="133" mi="0" ci="1" mb="0" cb="0"/><line nr="134" mi="0" ci="8" mb="0" cb="0"/><line nr="135" mi="0" ci="17" mb="0" cb="0"/><line nr="136" mi="0" ci="5" mb="0" cb="0"/><line nr="137" mi="0" ci="6" mb="0" cb="0"/><line nr="138" mi="0" ci="1" mb="0" cb="0"/><line nr="139" mi="0" ci="3" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="0" ci="14" mb="0" cb="2"/><line nr="159" mi="0" ci="4" mb="0" cb="0"/><line nr="160" mi="0" ci="2" mb="0" cb="0"/><line nr="161" mi="0" ci="4" mb="0" cb="0"/><line nr="162" mi="0" ci="14" mb="0" cb="0"/><line nr="164" mi="0" ci="11" mb="0" cb="2"/><line nr="165" mi="0" ci="12" mb="0" cb="0"/><line nr="166" mi="0" ci="1" mb="0" cb="0"/><line nr="167" mi="0" ci="3" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="1" ci="12" mb="1" cb="1"/><line nr="176" mi="0" ci="1" mb="0" cb="0"/><line nr="177" mi="0" ci="2" mb="0" cb="0"/><line nr="178" mi="0" ci="11" mb="0" cb="2"/><line nr="179" mi="0" ci="12" mb="0" cb="0"/><line nr="180" mi="0" ci="1" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="0"/><line nr="197" mi="0" ci="4" mb="0" cb="0"/><line nr="198" mi="0" ci="10" mb="0" cb="0"/><line nr="199" mi="0" ci="6" mb="0" cb="0"/><line nr="200" mi="0" ci="16" mb="0" cb="0"/><line nr="201" mi="0" ci="3" mb="0" cb="0"/><line nr="213" mi="0" ci="5" mb="0" cb="0"/><line nr="224" mi="0" ci="10" mb="0" cb="0"/><line nr="225" mi="0" ci="2" mb="0" cb="0"/><line nr="226" mi="0" ci="2" mb="0" cb="0"/><line nr="227" mi="0" ci="12" mb="0" cb="2"/><line nr="228" mi="0" ci="9" mb="0" cb="0"/><line nr="229" mi="0" ci="1" mb="0" cb="0"/><line nr="230" mi="0" ci="2" mb="0" cb="0"/><line nr="245" mi="0" ci="5" mb="0" cb="0"/><line nr="246" mi="0" ci="9" mb="0" cb="0"/><line nr="247" mi="0" ci="3" mb="0" cb="2"/><line nr="248" mi="0" ci="2" mb="0" cb="0"/><line nr="249" mi="0" ci="12" mb="0" cb="2"/><line nr="250" mi="0" ci="8" mb="0" cb="2"/><line nr="251" mi="0" ci="6" mb="0" cb="0"/><line nr="253" mi="0" ci="1" mb="0" cb="0"/><line nr="254" mi="0" ci="2" mb="0" cb="0"/><line nr="256" mi="0" ci="3" mb="0" cb="2"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="259" mi="0" ci="3" mb="0" cb="2"/><line nr="260" mi="0" ci="3" mb="0" cb="0"/><line nr="264" mi="0" ci="36" mb="0" cb="0"/><line nr="269" mi="0" ci="2" mb="0" cb="0"/><line nr="270" mi="0" ci="13" mb="0" cb="2"/><line nr="271" mi="0" ci="2" mb="0" cb="0"/><line nr="272" mi="0" ci="2" mb="0" cb="0"/><line nr="273" mi="0" ci="5" mb="0" cb="0"/><line nr="274" mi="0" ci="7" mb="0" cb="2"/><line nr="275" mi="0" ci="5" mb="0" cb="0"/><line nr="276" mi="0" ci="9" mb="0" cb="2"/><line nr="277" mi="0" ci="8" mb="0" cb="2"/><line nr="278" mi="0" ci="1" mb="0" cb="0"/><line nr="281" mi="0" ci="12" mb="0" cb="0"/><line nr="283" mi="0" ci="9" mb="0" cb="0"/><line nr="284" mi="0" ci="1" mb="0" cb="0"/><line nr="285" mi="0" ci="2" mb="0" cb="0"/><line nr="290" mi="0" ci="27" mb="0" cb="0"/><line nr="291" mi="0" ci="27" mb="0" cb="0"/><line nr="292" mi="0" ci="27" mb="0" cb="0"/><line nr="293" mi="0" ci="27" mb="0" cb="0"/><line nr="294" mi="0" ci="27" mb="0" cb="0"/><line nr="295" mi="0" ci="27" mb="0" cb="0"/><line nr="296" mi="0" ci="12" mb="0" cb="0"/><line nr="308" mi="0" ci="10" mb="0" cb="0"/><line nr="309" mi="0" ci="19" mb="0" cb="0"/><line nr="310" mi="0" ci="3" mb="0" cb="0"/><line nr="334" mi="0" ci="4" mb="0" cb="0"/><line nr="335" mi="0" ci="4" mb="0" cb="0"/><line nr="336" mi="0" ci="8" mb="0" cb="0"/><line nr="337" mi="0" ci="3" mb="0" cb="0"/><line nr="338" mi="0" ci="8" mb="0" cb="0"/><line nr="339" mi="0" ci="3" mb="0" cb="0"/><line nr="340" mi="0" ci="2" mb="0" cb="0"/><line nr="341" mi="0" ci="12" mb="0" cb="0"/><line nr="342" mi="0" ci="8" mb="0" cb="0"/><line nr="343" mi="0" ci="4" mb="0" cb="0"/><line nr="344" mi="0" ci="4" mb="0" cb="0"/><line nr="345" mi="0" ci="8" mb="0" cb="4"/><line nr="346" mi="0" ci="13" mb="0" cb="2"/><line nr="347" mi="0" ci="13" mb="0" cb="2"/><line nr="348" mi="0" ci="8" mb="0" cb="0"/><line nr="350" mi="0" ci="1" mb="0" cb="0"/><line nr="351" mi="0" ci="3" mb="0" cb="0"/><line nr="362" mi="0" ci="2" mb="0" cb="0"/><line nr="363" mi="0" ci="14" mb="0" cb="2"/><line nr="364" mi="0" ci="2" mb="0" cb="0"/><line nr="365" mi="0" ci="11" mb="0" cb="2"/><line nr="366" mi="0" ci="5" mb="0" cb="0"/><line nr="367" mi="0" ci="1" mb="0" cb="0"/><line nr="368" mi="0" ci="4" mb="0" cb="0"/><line nr="369" mi="0" ci="1" mb="0" cb="0"/><line nr="370" mi="0" ci="2" mb="0" cb="0"/><line nr="381" mi="0" ci="2" mb="0" cb="0"/><line nr="382" mi="0" ci="14" mb="0" cb="2"/><line nr="383" mi="0" ci="2" mb="0" cb="0"/><line nr="384" mi="0" ci="11" mb="0" cb="2"/><line nr="385" mi="0" ci="5" mb="0" cb="0"/><line nr="386" mi="0" ci="1" mb="0" cb="0"/><line nr="387" mi="0" ci="4" mb="0" cb="0"/><line nr="388" mi="0" ci="1" mb="0" cb="0"/><line nr="389" mi="0" ci="2" mb="0" cb="0"/><line nr="400" mi="0" ci="2" mb="0" cb="0"/><line nr="401" mi="0" ci="12" mb="0" cb="2"/><line nr="402" mi="0" ci="5" mb="0" cb="0"/><line nr="403" mi="0" ci="1" mb="0" cb="0"/><line nr="404" mi="0" ci="2" mb="0" cb="0"/><line nr="417" mi="0" ci="7" mb="0" cb="0"/><line nr="436" mi="0" ci="4" mb="0" cb="0"/><line nr="437" mi="0" ci="14" mb="0" cb="4"/><line nr="439" mi="0" ci="8" mb="0" cb="0"/><line nr="458" mi="0" ci="8" mb="0" cb="2"/><line nr="459" mi="0" ci="9" mb="0" cb="0"/><line nr="484" mi="0" ci="4" mb="0" cb="0"/><line nr="485" mi="0" ci="14" mb="0" cb="4"/><line nr="487" mi="0" ci="8" mb="0" cb="2"/><line nr="488" mi="0" ci="10" mb="0" cb="0"/><line nr="499" mi="0" ci="2" mb="0" cb="0"/><line nr="500" mi="0" ci="12" mb="0" cb="2"/><line nr="501" mi="0" ci="5" mb="0" cb="0"/><line nr="502" mi="0" ci="1" mb="0" cb="0"/><line nr="503" mi="0" ci="2" mb="0" cb="0"/><line nr="514" mi="0" ci="3" mb="0" cb="2"/><line nr="515" mi="0" ci="12" mb="0" cb="2"/><line nr="516" mi="0" ci="9" mb="0" cb="2"/><line nr="517" mi="0" ci="5" mb="0" cb="2"/><line nr="518" mi="0" ci="2" mb="0" cb="0"/><line nr="520" mi="0" ci="1" mb="0" cb="0"/><line nr="521" mi="0" ci="2" mb="0" cb="0"/><line nr="523" mi="0" ci="2" mb="0" cb="0"/><line nr="534" mi="0" ci="3" mb="0" cb="2"/><line nr="535" mi="0" ci="12" mb="0" cb="2"/><line nr="536" mi="0" ci="9" mb="0" cb="2"/><line nr="537" mi="0" ci="5" mb="0" cb="2"/><line nr="538" mi="0" ci="2" mb="0" cb="0"/><line nr="540" mi="0" ci="1" mb="0" cb="0"/><line nr="541" mi="0" ci="2" mb="0" cb="0"/><line nr="543" mi="0" ci="2" mb="0" cb="0"/><line nr="555" mi="0" ci="3" mb="0" cb="2"/><line nr="556" mi="0" ci="12" mb="0" cb="2"/><line nr="557" mi="0" ci="9" mb="0" cb="2"/><line nr="558" mi="0" ci="2" mb="0" cb="0"/><line nr="560" mi="0" ci="1" mb="0" cb="0"/><line nr="561" mi="0" ci="2" mb="0" cb="0"/><line nr="563" mi="0" ci="2" mb="0" cb="0"/><line nr="575" mi="0" ci="15" mb="0" cb="4"/><line nr="589" mi="0" ci="8" mb="0" cb="2"/><line nr="590" mi="0" ci="8" mb="0" cb="2"/><line nr="591" mi="0" ci="7" mb="0" cb="0"/><line nr="596" mi="0" ci="9" mb="0" cb="0"/><line nr="601" mi="0" ci="3" mb="0" cb="2"/><line nr="602" mi="0" ci="2" mb="0" cb="0"/><line nr="604" mi="0" ci="3" mb="0" cb="2"/><line nr="605" mi="0" ci="2" mb="0" cb="0"/><line nr="607" mi="0" ci="3" mb="0" cb="0"/><line nr="608" mi="0" ci="6" mb="0" cb="0"/><line nr="620" mi="0" ci="4" mb="0" cb="0"/><line nr="621" mi="0" ci="1" mb="0" cb="0"/><line nr="636" mi="0" ci="4" mb="0" cb="0"/><line nr="637" mi="0" ci="4" mb="0" cb="0"/><line nr="638" mi="0" ci="4" mb="0" cb="0"/><line nr="639" mi="0" ci="9" mb="0" cb="0"/><line nr="640" mi="0" ci="3" mb="0" cb="0"/><line nr="641" mi="0" ci="9" mb="0" cb="0"/><line nr="642" mi="0" ci="3" mb="0" cb="0"/><line nr="643" mi="0" ci="7" mb="0" cb="0"/><line nr="644" mi="0" ci="2" mb="0" cb="0"/><line nr="658" mi="0" ci="4" mb="0" cb="0"/><line nr="659" mi="0" ci="7" mb="0" cb="0"/><line nr="660" mi="0" ci="18" mb="0" cb="0"/><line nr="661" mi="0" ci="2" mb="0" cb="0"/><line nr="675" mi="0" ci="13" mb="0" cb="0"/><line nr="676" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1395"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="213"/><counter type="COMPLEXITY" missed="1" covered="96"/><counter type="METHOD" missed="0" covered="45"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractVectorBuilder.java"><line nr="43" mi="0" ci="5" mb="0" cb="0"/><line nr="50" mi="0" ci="2" mb="0" cb="0"/><line nr="51" mi="1" ci="7" mb="1" cb="1"/><line nr="52" mi="0" ci="3" mb="0" cb="0"/><line nr="53" mi="0" ci="1" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="1" ci="16" mb="2" cb="2"/><line nr="71" mi="0" ci="5" mb="0" cb="0"/><line nr="76" mi="0" ci="12" mb="0" cb="0"/><line nr="80" mi="0" ci="3" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="61"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="3" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigDecimalVector.java"><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="0" ci="4" mb="0" cb="0"/><line nr="60" mi="0" ci="15" mb="0" cb="2"/><line nr="61" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="5" mb="0" cb="0"/><line nr="63" mi="0" ci="16" mb="0" cb="0"/><line nr="64" mi="0" ci="3" mb="0" cb="0"/><line nr="79" mi="0" ci="4" mb="0" cb="0"/><line nr="80" mi="0" ci="15" mb="0" cb="2"/><line nr="81" mi="0" ci="1" mb="0" cb="0"/><line nr="82" mi="0" ci="5" mb="0" cb="0"/><line nr="83" mi="0" ci="16" mb="0" cb="0"/><line nr="84" mi="0" ci="3" mb="0" cb="0"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="16" mb="0" cb="2"/><line nr="103" mi="0" ci="2" mb="0" cb="0"/><line nr="104" mi="0" ci="12" mb="0" cb="2"/><line nr="105" mi="0" ci="13" mb="0" cb="0"/><line nr="106" mi="0" ci="1" mb="0" cb="0"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="122" mi="0" ci="4" mb="0" cb="0"/><line nr="123" mi="0" ci="5" mb="0" cb="0"/><line nr="124" mi="0" ci="14" mb="0" cb="0"/><line nr="125" mi="0" ci="3" mb="0" cb="0"/><line nr="137" mi="0" ci="5" mb="0" cb="0"/><line nr="148" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="0" ci="12" mb="0" cb="2"/><line nr="150" mi="0" ci="5" mb="0" cb="0"/><line nr="151" mi="0" ci="1" mb="0" cb="0"/><line nr="152" mi="0" ci="2" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="0" cb="0"/><line nr="172" mi="0" ci="16" mb="0" cb="2"/><line nr="173" mi="0" ci="5" mb="0" cb="0"/><line nr="185" mi="0" ci="4" mb="0" cb="0"/><line nr="198" mi="0" ci="7" mb="0" cb="0"/><line nr="217" mi="0" ci="4" mb="0" cb="0"/><line nr="218" mi="0" ci="14" mb="0" cb="4"/><line nr="220" mi="0" ci="8" mb="0" cb="0"/><line nr="239" mi="0" ci="8" mb="0" cb="2"/><line nr="240" mi="0" ci="9" mb="0" cb="0"/><line nr="265" mi="0" ci="4" mb="0" cb="0"/><line nr="266" mi="0" ci="14" mb="0" cb="4"/><line nr="268" mi="0" ci="8" mb="0" cb="2"/><line nr="269" mi="0" ci="10" mb="0" cb="0"/><line nr="288" mi="0" ci="4" mb="0" cb="0"/><line nr="289" mi="0" ci="16" mb="0" cb="2"/><line nr="290" mi="0" ci="5" mb="0" cb="0"/><line nr="309" mi="0" ci="4" mb="0" cb="0"/><line nr="310" mi="0" ci="16" mb="0" cb="2"/><line nr="311" mi="0" ci="8" mb="0" cb="0"/><line nr="336" mi="0" ci="4" mb="0" cb="0"/><line nr="337" mi="0" ci="16" mb="0" cb="2"/><line nr="338" mi="0" ci="4" mb="0" cb="0"/><line nr="339" mi="0" ci="14" mb="0" cb="4"/><line nr="341" mi="0" ci="9" mb="0" cb="0"/><line nr="367" mi="0" ci="4" mb="0" cb="0"/><line nr="368" mi="0" ci="16" mb="0" cb="2"/><line nr="369" mi="0" ci="8" mb="0" cb="2"/><line nr="370" mi="0" ci="10" mb="0" cb="0"/><line nr="402" mi="0" ci="4" mb="0" cb="0"/><line nr="403" mi="0" ci="16" mb="0" cb="2"/><line nr="404" mi="0" ci="4" mb="0" cb="0"/><line nr="405" mi="0" ci="14" mb="0" cb="4"/><line nr="407" mi="0" ci="8" mb="0" cb="2"/><line nr="408" mi="0" ci="11" mb="0" cb="0"/><line nr="419" mi="0" ci="2" mb="0" cb="0"/><line nr="420" mi="0" ci="12" mb="0" cb="2"/><line nr="421" mi="0" ci="5" mb="0" cb="0"/><line nr="422" mi="0" ci="1" mb="0" cb="0"/><line nr="423" mi="0" ci="2" mb="0" cb="0"/><line nr="442" mi="0" ci="4" mb="0" cb="0"/><line nr="443" mi="0" ci="16" mb="0" cb="2"/><line nr="444" mi="0" ci="5" mb="0" cb="0"/><line nr="455" mi="0" ci="4" mb="0" cb="0"/><line nr="467" mi="12" ci="0" mb="2" cb="0"/><line nr="468" mi="11" ci="0" mb="2" cb="0"/><line nr="469" mi="2" ci="0" mb="0" cb="0"/><line nr="471" mi="1" ci="0" mb="0" cb="0"/><line nr="472" mi="2" ci="0" mb="0" cb="0"/><line nr="484" mi="0" ci="8" mb="0" cb="2"/><line nr="485" mi="0" ci="6" mb="0" cb="0"/><line nr="490" mi="0" ci="9" mb="0" cb="0"/><line nr="495" mi="0" ci="3" mb="0" cb="2"/><line nr="496" mi="0" ci="2" mb="0" cb="0"/><line nr="498" mi="0" ci="3" mb="0" cb="2"/><line nr="499" mi="0" ci="2" mb="0" cb="0"/><line nr="501" mi="0" ci="3" mb="0" cb="0"/><line nr="502" mi="0" ci="6" mb="0" cb="0"/><line nr="514" mi="0" ci="3" mb="0" cb="0"/><line nr="515" mi="0" ci="1" mb="0" cb="0"/><line nr="532" mi="0" ci="4" mb="0" cb="0"/><line nr="533" mi="0" ci="6" mb="0" cb="0"/><line nr="534" mi="1" ci="13" mb="1" cb="1"/><line nr="535" mi="0" ci="7" mb="0" cb="0"/><line nr="536" mi="0" ci="2" mb="0" cb="0"/><line nr="556" mi="0" ci="4" mb="0" cb="0"/><line nr="557" mi="0" ci="4" mb="0" cb="0"/><line nr="558" mi="7" ci="10" mb="1" cb="3"/><line nr="559" mi="6" ci="0" mb="0" cb="0"/><line nr="560" mi="2" ci="0" mb="0" cb="0"/><line nr="574" mi="0" ci="4" mb="0" cb="0"/><line nr="575" mi="0" ci="8" mb="0" cb="2"/><line nr="576" mi="0" ci="7" mb="0" cb="0"/><line nr="578" mi="0" ci="2" mb="0" cb="0"/><line nr="592" mi="0" ci="10" mb="0" cb="0"/><line nr="593" mi="0" ci="11" mb="0" cb="0"/><line nr="594" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="44" covered="702"/><counter type="BRANCH" missed="6" covered="62"/><counter type="LINE" missed="7" covered="101"/><counter type="COMPLEXITY" missed="5" covered="63"/><counter type="METHOD" missed="1" covered="33"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigIntegerMatrix.java"><line nr="48" mi="0" ci="3" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="14" mb="0" cb="2"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="14" mb="0" cb="2"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="6" mb="0" cb="0"/><line nr="74" mi="0" ci="7" mb="0" cb="0"/><line nr="75" mi="0" ci="4" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="14" mb="0" cb="0"/><line nr="78" mi="0" ci="1" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="14" mb="0" cb="2"/><line nr="101" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="14" mb="0" cb="2"/><line nr="103" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="1" mb="0" cb="0"/><line nr="105" mi="0" ci="6" mb="0" cb="0"/><line nr="106" mi="0" ci="7" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="14" mb="0" cb="0"/><line nr="110" mi="0" ci="1" mb="0" cb="0"/><line nr="111" mi="0" ci="3" mb="0" cb="0"/><line nr="129" mi="0" ci="4" mb="0" cb="0"/><line nr="130" mi="0" ci="14" mb="0" cb="2"/><line nr="131" mi="0" ci="3" mb="0" cb="0"/><line nr="132" mi="0" ci="1" mb="0" cb="0"/><line nr="133" mi="0" ci="8" mb="0" cb="0"/><line nr="134" mi="0" ci="17" mb="0" cb="0"/><line nr="135" mi="0" ci="5" mb="0" cb="0"/><line nr="136" mi="0" ci="6" mb="0" cb="0"/><line nr="137" mi="0" ci="1" mb="0" cb="0"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="0" ci="14" mb="0" cb="2"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="0" ci="6" mb="0" cb="0"/><line nr="160" mi="0" ci="14" mb="0" cb="0"/><line nr="161" mi="0" ci="11" mb="0" cb="2"/><line nr="162" mi="0" ci="12" mb="0" cb="0"/><line nr="163" mi="0" ci="1" mb="0" cb="0"/><line nr="164" mi="0" ci="3" mb="0" cb="0"/><line nr="170" mi="0" ci="4" mb="0" cb="0"/><line nr="171" mi="0" ci="4" mb="0" cb="0"/><line nr="172" mi="1" ci="12" mb="1" cb="1"/><line nr="173" mi="0" ci="1" mb="0" cb="0"/><line nr="174" mi="0" ci="2" mb="0" cb="0"/><line nr="175" mi="0" ci="11" mb="0" cb="2"/><line nr="176" mi="0" ci="12" mb="0" cb="0"/><line nr="177" mi="0" ci="1" mb="0" cb="0"/><line nr="178" mi="0" ci="2" mb="0" cb="0"/><line nr="194" mi="0" ci="4" mb="0" cb="0"/><line nr="195" mi="0" ci="10" mb="0" cb="0"/><line nr="196" mi="0" ci="6" mb="0" cb="0"/><line nr="197" mi="0" ci="16" mb="0" cb="0"/><line nr="198" mi="0" ci="3" mb="0" cb="0"/><line nr="210" mi="0" ci="5" mb="0" cb="0"/><line nr="221" mi="0" ci="10" mb="0" cb="0"/><line nr="222" mi="0" ci="2" mb="0" cb="0"/><line nr="223" mi="0" ci="2" mb="0" cb="0"/><line nr="224" mi="0" ci="12" mb="0" cb="2"/><line nr="225" mi="0" ci="9" mb="0" cb="0"/><line nr="226" mi="0" ci="1" mb="0" cb="0"/><line nr="227" mi="0" ci="2" mb="0" cb="0"/><line nr="242" mi="0" ci="5" mb="0" cb="0"/><line nr="243" mi="0" ci="9" mb="0" cb="0"/><line nr="244" mi="0" ci="3" mb="0" cb="2"/><line nr="245" mi="0" ci="2" mb="0" cb="0"/><line nr="246" mi="0" ci="12" mb="0" cb="2"/><line nr="247" mi="0" ci="8" mb="0" cb="2"/><line nr="248" mi="0" ci="6" mb="0" cb="0"/><line nr="250" mi="0" ci="1" mb="0" cb="0"/><line nr="251" mi="0" ci="2" mb="0" cb="0"/><line nr="253" mi="0" ci="3" mb="0" cb="2"/><line nr="254" mi="0" ci="3" mb="0" cb="0"/><line nr="256" mi="0" ci="3" mb="0" cb="2"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="261" mi="0" ci="36" mb="0" cb="0"/><line nr="266" mi="0" ci="2" mb="0" cb="0"/><line nr="267" mi="0" ci="13" mb="0" cb="2"/><line nr="268" mi="0" ci="2" mb="0" cb="0"/><line nr="269" mi="0" ci="2" mb="0" cb="0"/><line nr="270" mi="0" ci="5" mb="0" cb="0"/><line nr="271" mi="0" ci="7" mb="0" cb="2"/><line nr="272" mi="0" ci="5" mb="0" cb="0"/><line nr="273" mi="0" ci="9" mb="0" cb="2"/><line nr="274" mi="0" ci="8" mb="0" cb="2"/><line nr="275" mi="0" ci="1" mb="0" cb="0"/><line nr="278" mi="0" ci="12" mb="0" cb="0"/><line nr="280" mi="0" ci="9" mb="0" cb="0"/><line nr="281" mi="0" ci="1" mb="0" cb="0"/><line nr="282" mi="0" ci="2" mb="0" cb="0"/><line nr="287" mi="0" ci="27" mb="0" cb="0"/><line nr="288" mi="0" ci="27" mb="0" cb="0"/><line nr="289" mi="0" ci="27" mb="0" cb="0"/><line nr="290" mi="0" ci="27" mb="0" cb="0"/><line nr="291" mi="0" ci="27" mb="0" cb="0"/><line nr="292" mi="0" ci="27" mb="0" cb="0"/><line nr="293" mi="0" ci="12" mb="0" cb="0"/><line nr="305" mi="0" ci="10" mb="0" cb="0"/><line nr="306" mi="0" ci="19" mb="0" cb="0"/><line nr="307" mi="0" ci="3" mb="0" cb="0"/><line nr="331" mi="0" ci="4" mb="0" cb="0"/><line nr="332" mi="0" ci="4" mb="0" cb="0"/><line nr="333" mi="0" ci="8" mb="0" cb="0"/><line nr="334" mi="0" ci="3" mb="0" cb="0"/><line nr="335" mi="0" ci="8" mb="0" cb="0"/><line nr="336" mi="0" ci="3" mb="0" cb="0"/><line nr="337" mi="0" ci="14" mb="0" cb="0"/><line nr="338" mi="0" ci="8" mb="0" cb="0"/><line nr="339" mi="0" ci="4" mb="0" cb="0"/><line nr="340" mi="0" ci="4" mb="0" cb="0"/><line nr="341" mi="0" ci="8" mb="0" cb="4"/><line nr="342" mi="0" ci="13" mb="0" cb="2"/><line nr="343" mi="0" ci="13" mb="0" cb="2"/><line nr="344" mi="0" ci="8" mb="0" cb="0"/><line nr="346" mi="0" ci="1" mb="0" cb="0"/><line nr="347" mi="0" ci="3" mb="0" cb="0"/><line nr="358" mi="0" ci="2" mb="0" cb="0"/><line nr="359" mi="0" ci="14" mb="0" cb="2"/><line nr="360" mi="0" ci="2" mb="0" cb="0"/><line nr="361" mi="0" ci="11" mb="0" cb="2"/><line nr="362" mi="0" ci="5" mb="0" cb="0"/><line nr="363" mi="0" ci="1" mb="0" cb="0"/><line nr="364" mi="0" ci="4" mb="0" cb="0"/><line nr="365" mi="0" ci="1" mb="0" cb="0"/><line nr="366" mi="0" ci="2" mb="0" cb="0"/><line nr="377" mi="0" ci="2" mb="0" cb="0"/><line nr="378" mi="0" ci="14" mb="0" cb="2"/><line nr="379" mi="0" ci="2" mb="0" cb="0"/><line nr="380" mi="0" ci="11" mb="0" cb="2"/><line nr="381" mi="0" ci="5" mb="0" cb="0"/><line nr="382" mi="0" ci="1" mb="0" cb="0"/><line nr="383" mi="0" ci="4" mb="0" cb="0"/><line nr="384" mi="0" ci="1" mb="0" cb="0"/><line nr="385" mi="0" ci="2" mb="0" cb="0"/><line nr="396" mi="0" ci="2" mb="0" cb="0"/><line nr="397" mi="0" ci="12" mb="0" cb="2"/><line nr="398" mi="0" ci="6" mb="0" cb="0"/><line nr="399" mi="0" ci="1" mb="0" cb="0"/><line nr="400" mi="0" ci="2" mb="0" cb="0"/><line nr="413" mi="0" ci="7" mb="0" cb="0"/><line nr="432" mi="0" ci="4" mb="0" cb="0"/><line nr="433" mi="0" ci="14" mb="0" cb="4"/><line nr="435" mi="0" ci="8" mb="0" cb="0"/><line nr="454" mi="0" ci="8" mb="0" cb="2"/><line nr="455" mi="0" ci="9" mb="0" cb="0"/><line nr="480" mi="0" ci="4" mb="0" cb="0"/><line nr="481" mi="0" ci="14" mb="0" cb="4"/><line nr="483" mi="0" ci="8" mb="0" cb="2"/><line nr="484" mi="0" ci="10" mb="0" cb="0"/><line nr="495" mi="0" ci="2" mb="0" cb="0"/><line nr="496" mi="0" ci="12" mb="0" cb="2"/><line nr="497" mi="0" ci="5" mb="0" cb="0"/><line nr="498" mi="0" ci="1" mb="0" cb="0"/><line nr="499" mi="0" ci="2" mb="0" cb="0"/><line nr="510" mi="0" ci="3" mb="0" cb="2"/><line nr="511" mi="0" ci="12" mb="0" cb="2"/><line nr="512" mi="0" ci="9" mb="0" cb="2"/><line nr="513" mi="0" ci="5" mb="0" cb="2"/><line nr="514" mi="0" ci="2" mb="0" cb="0"/><line nr="516" mi="0" ci="1" mb="0" cb="0"/><line nr="517" mi="0" ci="2" mb="0" cb="0"/><line nr="519" mi="0" ci="2" mb="0" cb="0"/><line nr="530" mi="0" ci="3" mb="0" cb="2"/><line nr="531" mi="0" ci="12" mb="0" cb="2"/><line nr="532" mi="0" ci="9" mb="0" cb="2"/><line nr="533" mi="0" ci="5" mb="0" cb="2"/><line nr="534" mi="0" ci="2" mb="0" cb="0"/><line nr="536" mi="0" ci="1" mb="0" cb="0"/><line nr="537" mi="0" ci="2" mb="0" cb="0"/><line nr="539" mi="0" ci="2" mb="0" cb="0"/><line nr="551" mi="0" ci="3" mb="0" cb="2"/><line nr="552" mi="0" ci="12" mb="0" cb="2"/><line nr="553" mi="0" ci="9" mb="0" cb="2"/><line nr="554" mi="0" ci="2" mb="0" cb="0"/><line nr="556" mi="0" ci="1" mb="0" cb="0"/><line nr="557" mi="0" ci="2" mb="0" cb="0"/><line nr="559" mi="0" ci="2" mb="0" cb="0"/><line nr="571" mi="0" ci="8" mb="0" cb="2"/><line nr="572" mi="0" ci="7" mb="0" cb="2"/><line nr="586" mi="0" ci="8" mb="0" cb="2"/><line nr="587" mi="0" ci="8" mb="0" cb="2"/><line nr="588" mi="0" ci="7" mb="0" cb="0"/><line nr="593" mi="0" ci="9" mb="0" cb="0"/><line nr="598" mi="0" ci="3" mb="0" cb="2"/><line nr="599" mi="0" ci="2" mb="0" cb="0"/><line nr="601" mi="0" ci="3" mb="0" cb="2"/><line nr="602" mi="0" ci="2" mb="0" cb="0"/><line nr="604" mi="0" ci="3" mb="0" cb="0"/><line nr="605" mi="0" ci="6" mb="0" cb="0"/><line nr="616" mi="0" ci="4" mb="0" cb="0"/><line nr="617" mi="0" ci="1" mb="0" cb="0"/><line nr="632" mi="0" ci="4" mb="0" cb="0"/><line nr="633" mi="0" ci="4" mb="0" cb="0"/><line nr="634" mi="0" ci="4" mb="0" cb="0"/><line nr="635" mi="0" ci="9" mb="0" cb="0"/><line nr="636" mi="0" ci="3" mb="0" cb="0"/><line nr="637" mi="0" ci="9" mb="0" cb="0"/><line nr="638" mi="0" ci="3" mb="0" cb="0"/><line nr="639" mi="0" ci="7" mb="0" cb="0"/><line nr="640" mi="0" ci="2" mb="0" cb="0"/><line nr="654" mi="0" ci="4" mb="0" cb="0"/><line nr="655" mi="0" ci="7" mb="0" cb="0"/><line nr="656" mi="0" ci="18" mb="0" cb="0"/><line nr="657" mi="0" ci="2" mb="0" cb="0"/><line nr="671" mi="0" ci="13" mb="0" cb="0"/><line nr="672" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="1396"/><counter type="BRANCH" missed="1" covered="103"/><counter type="LINE" missed="0" covered="212"/><counter type="COMPLEXITY" missed="1" covered="96"/><counter type="METHOD" missed="0" covered="45"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractMatrix.java"><line nr="59" mi="0" ci="2" mb="0" cb="0"/><line nr="60" mi="0" ci="3" mb="0" cb="0"/><line nr="61" mi="0" ci="1" mb="0" cb="0"/><line nr="112" mi="0" ci="13" mb="0" cb="2"/><line nr="124" mi="0" ci="10" mb="0" cb="4"/><line nr="140" mi="0" ci="10" mb="1" cb="3"/><line nr="156" mi="0" ci="12" mb="0" cb="4"/><line nr="169" mi="0" ci="13" mb="0" cb="4"/><line nr="180" mi="0" ci="4" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="214" mi="0" ci="4" mb="0" cb="0"/><line nr="215" mi="0" ci="4" mb="0" cb="0"/><line nr="216" mi="0" ci="9" mb="0" cb="0"/><line nr="217" mi="0" ci="3" mb="0" cb="0"/><line nr="218" mi="0" ci="9" mb="0" cb="0"/><line nr="219" mi="0" ci="3" mb="0" cb="0"/><line nr="220" mi="0" ci="6" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="248" mi="0" ci="4" mb="0" cb="0"/><line nr="249" mi="0" ci="9" mb="0" cb="0"/><line nr="250" mi="0" ci="3" mb="0" cb="0"/><line nr="251" mi="0" ci="5" mb="0" cb="0"/><line nr="268" mi="0" ci="4" mb="0" cb="0"/><line nr="269" mi="0" ci="9" mb="0" cb="0"/><line nr="270" mi="0" ci="3" mb="0" cb="0"/><line nr="271" mi="0" ci="5" mb="0" cb="0"/><line nr="282" mi="0" ci="4" mb="0" cb="0"/><line nr="293" mi="0" ci="4" mb="0" cb="0"/><line nr="304" mi="0" ci="4" mb="0" cb="0"/><line nr="314" mi="0" ci="16" mb="0" cb="0"/><line nr="325" mi="0" ci="5" mb="0" cb="0"/><line nr="336" mi="0" ci="5" mb="0" cb="0"/><line nr="341" mi="0" ci="8" mb="0" cb="0"/><line nr="345" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="205"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="1" covered="28"/><counter type="METHOD" missed="0" covered="20"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractVector.java"><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="3" mb="0" cb="0"/><line nr="56" mi="0" ci="1" mb="0" cb="0"/><line nr="72" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="10" mb="0" cb="0"/><line nr="74" mi="0" ci="5" mb="0" cb="0"/><line nr="85" mi="0" ci="4" mb="0" cb="0"/><line nr="96" mi="0" ci="4" mb="0" cb="0"/><line nr="145" mi="4" ci="0" mb="0" cb="0"/><line nr="150" mi="0" ci="8" mb="0" cb="0"/><line nr="154" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="44"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumberVector.java"><line nr="46" mi="0" ci="3" mb="0" cb="0"/><line nr="47" mi="0" ci="1" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="64" mi="0" ci="15" mb="0" cb="2"/><line nr="65" mi="0" ci="1" mb="0" cb="0"/><line nr="66" mi="0" ci="5" mb="0" cb="0"/><line nr="67" mi="0" ci="16" mb="0" cb="0"/><line nr="68" mi="0" ci="3" mb="0" cb="0"/><line nr="85" mi="0" ci="4" mb="0" cb="0"/><line nr="86" mi="0" ci="15" mb="0" cb="2"/><line nr="87" mi="0" ci="1" mb="0" cb="0"/><line nr="88" mi="0" ci="5" mb="0" cb="0"/><line nr="89" mi="0" ci="16" mb="0" cb="0"/><line nr="90" mi="0" ci="3" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="5" mb="0" cb="0"/><line nr="107" mi="0" ci="14" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="120" mi="0" ci="5" mb="0" cb="0"/><line nr="131" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="12" mb="0" cb="2"/><line nr="133" mi="0" ci="5" mb="0" cb="0"/><line nr="134" mi="0" ci="1" mb="0" cb="0"/><line nr="135" mi="0" ci="2" mb="0" cb="0"/><line nr="154" mi="0" ci="4" mb="0" cb="0"/><line nr="155" mi="0" ci="16" mb="0" cb="2"/><line nr="156" mi="0" ci="5" mb="0" cb="0"/><line nr="167" mi="0" ci="2" mb="0" cb="0"/><line nr="168" mi="0" ci="12" mb="0" cb="2"/><line nr="169" mi="0" ci="5" mb="0" cb="0"/><line nr="170" mi="0" ci="1" mb="0" cb="0"/><line nr="171" mi="0" ci="2" mb="0" cb="0"/><line nr="184" mi="0" ci="7" mb="0" cb="0"/><line nr="203" mi="0" ci="4" mb="0" cb="0"/><line nr="204" mi="0" ci="14" mb="0" cb="4"/><line nr="206" mi="0" ci="8" mb="0" cb="0"/><line nr="225" mi="0" ci="8" mb="0" cb="2"/><line nr="226" mi="0" ci="9" mb="0" cb="0"/><line nr="251" mi="0" ci="4" mb="0" cb="0"/><line nr="252" mi="0" ci="14" mb="0" cb="4"/><line nr="254" mi="0" ci="8" mb="0" cb="2"/><line nr="255" mi="0" ci="10" mb="0" cb="0"/><line nr="272" mi="0" ci="4" mb="0" cb="0"/><line nr="273" mi="0" ci="16" mb="0" cb="2"/><line nr="274" mi="0" ci="2" mb="0" cb="0"/><line nr="275" mi="0" ci="12" mb="0" cb="2"/><line nr="276" mi="0" ci="13" mb="0" cb="0"/><line nr="277" mi="0" ci="1" mb="0" cb="0"/><line nr="278" mi="0" ci="2" mb="0" cb="0"/><line nr="297" mi="0" ci="4" mb="0" cb="0"/><line nr="298" mi="0" ci="16" mb="0" cb="2"/><line nr="299" mi="0" ci="5" mb="0" cb="0"/><line nr="318" mi="0" ci="4" mb="0" cb="0"/><line nr="319" mi="0" ci="16" mb="0" cb="2"/><line nr="320" mi="0" ci="8" mb="0" cb="0"/><line nr="345" mi="0" ci="4" mb="0" cb="0"/><line nr="346" mi="0" ci="16" mb="0" cb="2"/><line nr="347" mi="0" ci="4" mb="0" cb="0"/><line nr="348" mi="0" ci="14" mb="0" cb="4"/><line nr="350" mi="0" ci="9" mb="0" cb="0"/><line nr="376" mi="0" ci="4" mb="0" cb="0"/><line nr="377" mi="0" ci="16" mb="0" cb="2"/><line nr="378" mi="0" ci="8" mb="0" cb="2"/><line nr="379" mi="0" ci="10" mb="0" cb="0"/><line nr="411" mi="0" ci="4" mb="0" cb="0"/><line nr="412" mi="0" ci="16" mb="0" cb="2"/><line nr="413" mi="0" ci="4" mb="0" cb="0"/><line nr="414" mi="0" ci="14" mb="0" cb="4"/><line nr="416" mi="0" ci="8" mb="0" cb="2"/><line nr="417" mi="0" ci="11" mb="0" cb="0"/><line nr="428" mi="0" ci="2" mb="0" cb="0"/><line nr="429" mi="0" ci="12" mb="0" cb="2"/><line nr="430" mi="0" ci="5" mb="0" cb="0"/><line nr="431" mi="0" ci="1" mb="0" cb="0"/><line nr="432" mi="0" ci="2" mb="0" cb="0"/><line nr="451" mi="0" ci="4" mb="0" cb="0"/><line nr="452" mi="0" ci="16" mb="0" cb="2"/><line nr="453" mi="0" ci="5" mb="0" cb="0"/><line nr="464" mi="0" ci="4" mb="0" cb="0"/><line nr="476" mi="0" ci="8" mb="0" cb="2"/><line nr="477" mi="0" ci="7" mb="0" cb="0"/><line nr="482" mi="0" ci="9" mb="0" cb="0"/><line nr="487" mi="0" ci="3" mb="0" cb="2"/><line nr="488" mi="0" ci="2" mb="0" cb="0"/><line nr="490" mi="0" ci="3" mb="0" cb="2"/><line nr="491" mi="0" ci="2" mb="0" cb="0"/><line nr="493" mi="0" ci="3" mb="0" cb="0"/><line nr="494" mi="0" ci="6" mb="0" cb="0"/><line nr="506" mi="0" ci="4" mb="0" cb="0"/><line nr="507" mi="0" ci="1" mb="0" cb="0"/><line nr="524" mi="0" ci="4" mb="0" cb="0"/><line nr="525" mi="0" ci="6" mb="0" cb="0"/><line nr="526" mi="1" ci="13" mb="1" cb="1"/><line nr="527" mi="0" ci="7" mb="0" cb="0"/><line nr="528" mi="0" ci="2" mb="0" cb="0"/><line nr="548" mi="0" ci="4" mb="0" cb="0"/><line nr="549" mi="0" ci="4" mb="0" cb="0"/><line nr="550" mi="1" ci="16" mb="2" cb="2"/><line nr="551" mi="0" ci="6" mb="0" cb="0"/><line nr="552" mi="0" ci="2" mb="0" cb="0"/><line nr="566" mi="0" ci="4" mb="0" cb="0"/><line nr="567" mi="0" ci="8" mb="0" cb="2"/><line nr="568" mi="0" ci="7" mb="0" cb="0"/><line nr="570" mi="0" ci="2" mb="0" cb="0"/><line nr="584" mi="0" ci="10" mb="0" cb="0"/><line nr="585" mi="0" ci="11" mb="0" cb="0"/><line nr="586" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="736"/><counter type="BRANCH" missed="3" covered="63"/><counter type="LINE" missed="0" covered="107"/><counter type="COMPLEXITY" missed="3" covered="63"/><counter type="METHOD" missed="0" covered="33"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="AbstractMatrixBuilder.java"><line nr="45" mi="0" ci="2" mb="0" cb="0"/><line nr="46" mi="0" ci="8" mb="0" cb="0"/><line nr="47" mi="0" ci="8" mb="0" cb="0"/><line nr="48" mi="0" ci="5" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="53" mi="0" ci="8" mb="0" cb="0"/><line nr="57" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="35"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigDecimalMatrix.java"><line nr="46" mi="0" ci="3" mb="0" cb="0"/><line nr="47" mi="0" ci="1" mb="0" cb="0"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="14" mb="0" cb="2"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="14" mb="0" cb="2"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="71" mi="0" ci="6" mb="0" cb="0"/><line nr="72" mi="0" ci="7" mb="0" cb="0"/><line nr="73" mi="0" ci="4" mb="0" cb="0"/><line nr="74" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="0" ci="14" mb="0" cb="0"/><line nr="76" mi="0" ci="1" mb="0" cb="0"/><line nr="77" mi="0" ci="3" mb="0" cb="0"/><line nr="97" mi="0" ci="4" mb="0" cb="0"/><line nr="98" mi="0" ci="14" mb="0" cb="2"/><line nr="99" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="14" mb="0" cb="2"/><line nr="101" mi="0" ci="3" mb="0" cb="0"/><line nr="102" mi="0" ci="1" mb="0" cb="0"/><line nr="103" mi="0" ci="6" mb="0" cb="0"/><line nr="104" mi="0" ci="7" mb="0" cb="0"/><line nr="105" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="14" mb="0" cb="0"/><line nr="108" mi="0" ci="1" mb="0" cb="0"/><line nr="109" mi="0" ci="3" mb="0" cb="0"/><line nr="127" mi="0" ci="4" mb="0" cb="0"/><line nr="128" mi="0" ci="14" mb="0" cb="2"/><line nr="129" mi="0" ci="3" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><line nr="131" mi="0" ci="8" mb="0" cb="0"/><line nr="132" mi="0" ci="17" mb="0" cb="0"/><line nr="133" mi="0" ci="5" mb="0" cb="0"/><line nr="134" mi="0" ci="6" mb="0" cb="0"/><line nr="135" mi="0" ci="1" mb="0" cb="0"/><line nr="136" mi="0" ci="3" mb="0" cb="0"/><line nr="154" mi="0" ci="4" mb="0" cb="0"/><line nr="155" mi="3" ci="11" mb="1" cb="1"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="6" ci="0" mb="0" cb="0"/><line nr="158" mi="14" ci="0" mb="0" cb="0"/><line nr="159" mi="11" ci="0" mb="2" cb="0"/><line nr="160" mi="12" ci="0" mb="0" cb="0"/><line nr="161" mi="1" ci="0" mb="0" cb="0"/><line nr="162" mi="3" ci="0" mb="0" cb="0"/><line nr="168" mi="0" ci="4" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="1" ci="12" mb="1" cb="1"/><line nr="171" mi="0" ci="1" mb="0" cb="0"/><line nr="172" mi="0" ci="2" mb="0" cb="0"/><line nr="173" mi="0" ci="11" mb="0" cb="2"/><line nr="174" mi="0" ci="12" mb="0" cb="0"/><line nr="175" mi="0" ci="1" mb="0" cb="0"/><line nr="176" mi="0" ci="2" mb="0" cb="0"/><line nr="192" mi="0" ci="4" mb="0" cb="0"/><line nr="193" mi="0" ci="10" mb="0" cb="0"/><line nr="194" mi="0" ci="6" mb="0" cb="0"/><line nr="195" mi="0" ci="16" mb="0" cb="0"/><line nr="196" mi="0" ci="3" mb="0" cb="0"/><line nr="208" mi="0" ci="5" mb="0" cb="0"/><line nr="219" mi="0" ci="10" mb="0" cb="0"/><line nr="220" mi="0" ci="2" mb="0" cb="0"/><line nr="221" mi="0" ci="2" mb="0" cb="0"/><line nr="222" mi="0" ci="12" mb="0" cb="2"/><line nr="223" mi="0" ci="9" mb="0" cb="0"/><line nr="224" mi="0" ci="1" mb="0" cb="0"/><line nr="225" mi="0" ci="2" mb="0" cb="0"/><line nr="240" mi="0" ci="5" mb="0" cb="0"/><line nr="241" mi="0" ci="9" mb="0" cb="0"/><line nr="242" mi="0" ci="3" mb="0" cb="2"/><line nr="243" mi="0" ci="2" mb="0" cb="0"/><line nr="244" mi="0" ci="12" mb="0" cb="2"/><line nr="245" mi="0" ci="8" mb="0" cb="2"/><line nr="246" mi="0" ci="6" mb="0" cb="0"/><line nr="248" mi="0" ci="1" mb="0" cb="0"/><line nr="249" mi="0" ci="2" mb="0" cb="0"/><line nr="251" mi="0" ci="3" mb="0" cb="2"/><line nr="252" mi="0" ci="3" mb="0" cb="0"/><line nr="254" mi="0" ci="3" mb="0" cb="2"/><line nr="255" mi="0" ci="3" mb="0" cb="0"/><line nr="259" mi="0" ci="36" mb="0" cb="0"/><line nr="264" mi="0" ci="2" mb="0" cb="0"/><line nr="265" mi="0" ci="13" mb="0" cb="2"/><line nr="266" mi="0" ci="2" mb="0" cb="0"/><line nr="267" mi="0" ci="2" mb="0" cb="0"/><line nr="268" mi="0" ci="5" mb="0" cb="0"/><line nr="269" mi="0" ci="7" mb="0" cb="2"/><line nr="270" mi="0" ci="5" mb="0" cb="0"/><line nr="271" mi="0" ci="9" mb="0" cb="2"/><line nr="272" mi="0" ci="8" mb="0" cb="2"/><line nr="273" mi="0" ci="1" mb="0" cb="0"/><line nr="276" mi="0" ci="12" mb="0" cb="0"/><line nr="278" mi="0" ci="9" mb="0" cb="0"/><line nr="279" mi="0" ci="1" mb="0" cb="0"/><line nr="280" mi="0" ci="2" mb="0" cb="0"/><line nr="285" mi="0" ci="27" mb="0" cb="0"/><line nr="286" mi="0" ci="27" mb="0" cb="0"/><line nr="287" mi="0" ci="27" mb="0" cb="0"/><line nr="288" mi="0" ci="27" mb="0" cb="0"/><line nr="289" mi="0" ci="27" mb="0" cb="0"/><line nr="290" mi="0" ci="27" mb="0" cb="0"/><line nr="291" mi="0" ci="12" mb="0" cb="0"/><line nr="303" mi="0" ci="10" mb="0" cb="0"/><line nr="304" mi="0" ci="19" mb="0" cb="0"/><line nr="305" mi="0" ci="3" mb="0" cb="0"/><line nr="329" mi="0" ci="4" mb="0" cb="0"/><line nr="330" mi="0" ci="4" mb="0" cb="0"/><line nr="331" mi="0" ci="8" mb="0" cb="0"/><line nr="332" mi="0" ci="3" mb="0" cb="0"/><line nr="333" mi="0" ci="8" mb="0" cb="0"/><line nr="334" mi="0" ci="3" mb="0" cb="0"/><line nr="335" mi="0" ci="14" mb="0" cb="0"/><line nr="336" mi="0" ci="8" mb="0" cb="0"/><line nr="337" mi="0" ci="4" mb="0" cb="0"/><line nr="338" mi="0" ci="4" mb="0" cb="0"/><line nr="339" mi="0" ci="8" mb="0" cb="4"/><line nr="340" mi="0" ci="13" mb="0" cb="2"/><line nr="341" mi="0" ci="13" mb="0" cb="2"/><line nr="342" mi="0" ci="8" mb="0" cb="0"/><line nr="344" mi="0" ci="1" mb="0" cb="0"/><line nr="345" mi="0" ci="3" mb="0" cb="0"/><line nr="356" mi="0" ci="2" mb="0" cb="0"/><line nr="357" mi="0" ci="14" mb="0" cb="2"/><line nr="358" mi="0" ci="2" mb="0" cb="0"/><line nr="359" mi="0" ci="11" mb="0" cb="2"/><line nr="360" mi="0" ci="5" mb="0" cb="0"/><line nr="361" mi="0" ci="1" mb="0" cb="0"/><line nr="362" mi="0" ci="4" mb="0" cb="0"/><line nr="363" mi="0" ci="1" mb="0" cb="0"/><line nr="364" mi="0" ci="2" mb="0" cb="0"/><line nr="375" mi="0" ci="2" mb="0" cb="0"/><line nr="376" mi="0" ci="14" mb="0" cb="2"/><line nr="377" mi="0" ci="2" mb="0" cb="0"/><line nr="378" mi="0" ci="11" mb="0" cb="2"/><line nr="379" mi="0" ci="5" mb="0" cb="0"/><line nr="380" mi="0" ci="1" mb="0" cb="0"/><line nr="381" mi="0" ci="4" mb="0" cb="0"/><line nr="382" mi="0" ci="1" mb="0" cb="0"/><line nr="383" mi="0" ci="2" mb="0" cb="0"/><line nr="394" mi="0" ci="2" mb="0" cb="0"/><line nr="395" mi="0" ci="12" mb="0" cb="2"/><line nr="396" mi="0" ci="6" mb="0" cb="0"/><line nr="397" mi="0" ci="1" mb="0" cb="0"/><line nr="398" mi="0" ci="2" mb="0" cb="0"/><line nr="410" mi="0" ci="2" mb="0" cb="0"/><line nr="411" mi="0" ci="12" mb="0" cb="2"/><line nr="412" mi="0" ci="6" mb="0" cb="0"/><line nr="413" mi="0" ci="1" mb="0" cb="0"/><line nr="414" mi="0" ci="6" mb="0" cb="0"/><line nr="432" mi="0" ci="4" mb="0" cb="0"/><line nr="433" mi="0" ci="14" mb="0" cb="4"/><line nr="435" mi="0" ci="2" mb="0" cb="0"/><line nr="436" mi="0" ci="12" mb="0" cb="2"/><line nr="437" mi="0" ci="6" mb="0" cb="0"/><line nr="438" mi="0" ci="1" mb="0" cb="0"/><line nr="439" mi="0" ci="7" mb="0" cb="0"/><line nr="457" mi="0" ci="8" mb="0" cb="2"/><line nr="458" mi="0" ci="2" mb="0" cb="0"/><line nr="459" mi="0" ci="12" mb="0" cb="2"/><line nr="460" mi="0" ci="6" mb="0" cb="0"/><line nr="461" mi="0" ci="1" mb="0" cb="0"/><line nr="462" mi="0" ci="8" mb="0" cb="0"/><line nr="486" mi="0" ci="4" mb="0" cb="0"/><line nr="487" mi="0" ci="14" mb="0" cb="4"/><line nr="489" mi="0" ci="8" mb="0" cb="2"/><line nr="490" mi="0" ci="2" mb="0" cb="0"/><line nr="491" mi="0" ci="12" mb="0" cb="2"/><line nr="492" mi="0" ci="6" mb="0" cb="0"/><line nr="493" mi="0" ci="1" mb="0" cb="0"/><line nr="494" mi="0" ci="9" mb="0" cb="0"/><line nr="505" mi="0" ci="2" mb="0" cb="0"/><line nr="506" mi="0" ci="12" mb="0" cb="2"/><line nr="507" mi="0" ci="5" mb="0" cb="0"/><line nr="508" mi="0" ci="1" mb="0" cb="0"/><line nr="509" mi="0" ci="2" mb="0" cb="0"/><line nr="520" mi="0" ci="3" mb="0" cb="2"/><line nr="521" mi="0" ci="12" mb="0" cb="2"/><line nr="522" mi="0" ci="9" mb="0" cb="2"/><line nr="523" mi="0" ci="5" mb="0" cb="2"/><line nr="524" mi="0" ci="2" mb="0" cb="0"/><line nr="526" mi="0" ci="1" mb="0" cb="0"/><line nr="527" mi="0" ci="2" mb="0" cb="0"/><line nr="529" mi="0" ci="2" mb="0" cb="0"/><line nr="540" mi="0" ci="3" mb="0" cb="2"/><line nr="541" mi="0" ci="12" mb="0" cb="2"/><line nr="542" mi="0" ci="9" mb="0" cb="2"/><line nr="543" mi="0" ci="5" mb="0" cb="2"/><line nr="544" mi="0" ci="2" mb="0" cb="0"/><line nr="546" mi="0" ci="1" mb="0" cb="0"/><line nr="547" mi="0" ci="2" mb="0" cb="0"/><line nr="549" mi="0" ci="2" mb="0" cb="0"/><line nr="561" mi="0" ci="3" mb="0" cb="2"/><line nr="562" mi="0" ci="12" mb="0" cb="2"/><line nr="563" mi="0" ci="9" mb="0" cb="2"/><line nr="564" mi="0" ci="2" mb="0" cb="0"/><line nr="566" mi="0" ci="1" mb="0" cb="0"/><line nr="567" mi="0" ci="2" mb="0" cb="0"/><line nr="569" mi="0" ci="2" mb="0" cb="0"/><line nr="581" mi="0" ci="9" mb="0" cb="2"/><line nr="595" mi="0" ci="8" mb="0" cb="2"/><line nr="596" mi="0" ci="8" mb="0" cb="2"/><line nr="597" mi="0" ci="6" mb="0" cb="0"/><line nr="602" mi="0" ci="9" mb="0" cb="0"/><line nr="607" mi="0" ci="3" mb="0" cb="2"/><line nr="608" mi="0" ci="2" mb="0" cb="0"/><line nr="610" mi="0" ci="3" mb="0" cb="2"/><line nr="611" mi="0" ci="2" mb="0" cb="0"/><line nr="613" mi="0" ci="3" mb="0" cb="0"/><line nr="614" mi="0" ci="6" mb="0" cb="0"/><line nr="625" mi="0" ci="4" mb="0" cb="0"/><line nr="626" mi="0" ci="1" mb="0" cb="0"/><line nr="652" mi="0" ci="4" mb="0" cb="0"/><line nr="653" mi="0" ci="4" mb="0" cb="0"/><line nr="654" mi="0" ci="4" mb="0" cb="0"/><line nr="655" mi="0" ci="9" mb="0" cb="0"/><line nr="656" mi="0" ci="3" mb="0" cb="0"/><line nr="657" mi="0" ci="9" mb="0" cb="0"/><line nr="658" mi="0" ci="3" mb="0" cb="0"/><line nr="659" mi="0" ci="7" mb="0" cb="0"/><line nr="660" mi="0" ci="2" mb="0" cb="0"/><line nr="674" mi="0" ci="4" mb="0" cb="0"/><line nr="675" mi="0" ci="7" mb="0" cb="0"/><line nr="676" mi="0" ci="18" mb="0" cb="0"/><line nr="677" mi="0" ci="2" mb="0" cb="0"/><line nr="691" mi="0" ci="13" mb="0" cb="0"/><line nr="692" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="51" covered="1419"/><counter type="BRANCH" missed="4" covered="106"/><counter type="LINE" missed="6" covered="221"/><counter type="COMPLEXITY" missed="5" covered="95"/><counter type="METHOD" missed="2" covered="43"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="RealComplexNumberVector.java"><line nr="45" mi="0" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="4" mb="0" cb="0"/><line nr="63" mi="0" ci="15" mb="0" cb="2"/><line nr="64" mi="0" ci="1" mb="0" cb="0"/><line nr="65" mi="0" ci="5" mb="0" cb="0"/><line nr="66" mi="0" ci="16" mb="0" cb="0"/><line nr="67" mi="0" ci="3" mb="0" cb="0"/><line nr="84" mi="0" ci="4" mb="0" cb="0"/><line nr="85" mi="0" ci="15" mb="0" cb="2"/><line nr="86" mi="0" ci="1" mb="0" cb="0"/><line nr="87" mi="0" ci="5" mb="0" cb="0"/><line nr="88" mi="0" ci="16" mb="0" cb="0"/><line nr="89" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="5" mb="0" cb="0"/><line nr="106" mi="0" ci="14" mb="0" cb="0"/><line nr="107" mi="0" ci="3" mb="0" cb="0"/><line nr="119" mi="0" ci="5" mb="0" cb="0"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="131" mi="0" ci="12" mb="0" cb="2"/><line nr="132" mi="0" ci="5" mb="0" cb="0"/><line nr="133" mi="0" ci="1" mb="0" cb="0"/><line nr="134" mi="0" ci="2" mb="0" cb="0"/><line nr="153" mi="0" ci="4" mb="0" cb="0"/><line nr="154" mi="0" ci="16" mb="0" cb="2"/><line nr="155" mi="0" ci="5" mb="0" cb="0"/><line nr="166" mi="0" ci="2" mb="0" cb="0"/><line nr="167" mi="0" ci="12" mb="0" cb="2"/><line nr="168" mi="0" ci="5" mb="0" cb="0"/><line nr="169" mi="0" ci="1" mb="0" cb="0"/><line nr="170" mi="0" ci="2" mb="0" cb="0"/><line nr="183" mi="0" ci="7" mb="0" cb="0"/><line nr="202" mi="0" ci="4" mb="0" cb="0"/><line nr="203" mi="0" ci="14" mb="0" cb="4"/><line nr="205" mi="0" ci="8" mb="0" cb="0"/><line nr="224" mi="0" ci="8" mb="0" cb="2"/><line nr="225" mi="0" ci="9" mb="0" cb="0"/><line nr="250" mi="0" ci="4" mb="0" cb="0"/><line nr="251" mi="0" ci="14" mb="0" cb="4"/><line nr="253" mi="0" ci="8" mb="0" cb="2"/><line nr="254" mi="0" ci="10" mb="0" cb="0"/><line nr="271" mi="0" ci="4" mb="0" cb="0"/><line nr="272" mi="0" ci="16" mb="0" cb="2"/><line nr="273" mi="0" ci="2" mb="0" cb="0"/><line nr="274" mi="0" ci="12" mb="0" cb="2"/><line nr="275" mi="0" ci="13" mb="0" cb="0"/><line nr="276" mi="0" ci="1" mb="0" cb="0"/><line nr="277" mi="0" ci="2" mb="0" cb="0"/><line nr="296" mi="0" ci="4" mb="0" cb="0"/><line nr="297" mi="0" ci="16" mb="0" cb="2"/><line nr="298" mi="0" ci="5" mb="0" cb="0"/><line nr="317" mi="0" ci="4" mb="0" cb="0"/><line nr="318" mi="0" ci="16" mb="0" cb="2"/><line nr="319" mi="0" ci="8" mb="0" cb="0"/><line nr="344" mi="0" ci="4" mb="0" cb="0"/><line nr="345" mi="0" ci="16" mb="0" cb="2"/><line nr="346" mi="0" ci="4" mb="0" cb="0"/><line nr="347" mi="0" ci="14" mb="0" cb="4"/><line nr="349" mi="0" ci="9" mb="0" cb="0"/><line nr="375" mi="0" ci="4" mb="0" cb="0"/><line nr="376" mi="0" ci="16" mb="0" cb="2"/><line nr="377" mi="0" ci="8" mb="0" cb="2"/><line nr="378" mi="0" ci="10" mb="0" cb="0"/><line nr="410" mi="0" ci="4" mb="0" cb="0"/><line nr="411" mi="0" ci="16" mb="0" cb="2"/><line nr="412" mi="0" ci="4" mb="0" cb="0"/><line nr="413" mi="0" ci="14" mb="0" cb="4"/><line nr="415" mi="0" ci="8" mb="0" cb="2"/><line nr="416" mi="0" ci="11" mb="0" cb="0"/><line nr="427" mi="0" ci="2" mb="0" cb="0"/><line nr="428" mi="0" ci="12" mb="0" cb="2"/><line nr="429" mi="0" ci="5" mb="0" cb="0"/><line nr="430" mi="0" ci="1" mb="0" cb="0"/><line nr="431" mi="0" ci="2" mb="0" cb="0"/><line nr="450" mi="0" ci="4" mb="0" cb="0"/><line nr="451" mi="0" ci="16" mb="0" cb="2"/><line nr="452" mi="0" ci="5" mb="0" cb="0"/><line nr="463" mi="0" ci="4" mb="0" cb="0"/><line nr="475" mi="0" ci="8" mb="0" cb="2"/><line nr="476" mi="0" ci="7" mb="0" cb="0"/><line nr="481" mi="0" ci="9" mb="0" cb="0"/><line nr="486" mi="0" ci="3" mb="0" cb="2"/><line nr="487" mi="0" ci="2" mb="0" cb="0"/><line nr="489" mi="0" ci="3" mb="0" cb="2"/><line nr="490" mi="0" ci="2" mb="0" cb="0"/><line nr="492" mi="0" ci="3" mb="0" cb="0"/><line nr="493" mi="0" ci="6" mb="0" cb="0"/><line nr="505" mi="0" ci="4" mb="0" cb="0"/><line nr="506" mi="0" ci="1" mb="0" cb="0"/><line nr="523" mi="0" ci="4" mb="0" cb="0"/><line nr="524" mi="0" ci="6" mb="0" cb="0"/><line nr="525" mi="1" ci="13" mb="1" cb="1"/><line nr="526" mi="0" ci="7" mb="0" cb="0"/><line nr="527" mi="0" ci="2" mb="0" cb="0"/><line nr="547" mi="0" ci="4" mb="0" cb="0"/><line nr="548" mi="0" ci="4" mb="0" cb="0"/><line nr="549" mi="1" ci="16" mb="2" cb="2"/><line nr="550" mi="0" ci="6" mb="0" cb="0"/><line nr="551" mi="0" ci="2" mb="0" cb="0"/><line nr="565" mi="0" ci="4" mb="0" cb="0"/><line nr="566" mi="0" ci="8" mb="0" cb="2"/><line nr="567" mi="0" ci="7" mb="0" cb="0"/><line nr="569" mi="0" ci="2" mb="0" cb="0"/><line nr="583" mi="0" ci="10" mb="0" cb="0"/><line nr="584" mi="0" ci="11" mb="0" cb="0"/><line nr="585" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="736"/><counter type="BRANCH" missed="3" covered="63"/><counter type="LINE" missed="0" covered="107"/><counter type="COMPLEXITY" missed="3" covered="63"/><counter type="METHOD" missed="0" covered="33"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigIntegerVector.java"><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="61" mi="0" ci="4" mb="0" cb="0"/><line nr="62" mi="0" ci="15" mb="0" cb="2"/><line nr="63" mi="0" ci="1" mb="0" cb="0"/><line nr="64" mi="0" ci="5" mb="0" cb="0"/><line nr="65" mi="0" ci="16" mb="0" cb="0"/><line nr="66" mi="0" ci="3" mb="0" cb="0"/><line nr="83" mi="0" ci="4" mb="0" cb="0"/><line nr="84" mi="0" ci="15" mb="0" cb="2"/><line nr="85" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="0" ci="5" mb="0" cb="0"/><line nr="87" mi="0" ci="16" mb="0" cb="0"/><line nr="88" mi="0" ci="3" mb="0" cb="0"/><line nr="103" mi="0" ci="4" mb="0" cb="0"/><line nr="104" mi="0" ci="5" mb="0" cb="0"/><line nr="105" mi="0" ci="14" mb="0" cb="0"/><line nr="106" mi="0" ci="3" mb="0" cb="0"/><line nr="118" mi="0" ci="5" mb="0" cb="0"/><line nr="129" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="12" mb="0" cb="2"/><line nr="131" mi="0" ci="5" mb="0" cb="0"/><line nr="132" mi="0" ci="1" mb="0" cb="0"/><line nr="133" mi="0" ci="2" mb="0" cb="0"/><line nr="152" mi="0" ci="4" mb="0" cb="0"/><line nr="153" mi="0" ci="16" mb="0" cb="2"/><line nr="154" mi="0" ci="5" mb="0" cb="0"/><line nr="166" mi="0" ci="4" mb="0" cb="0"/><line nr="179" mi="0" ci="7" mb="0" cb="0"/><line nr="198" mi="0" ci="4" mb="0" cb="0"/><line nr="199" mi="0" ci="14" mb="0" cb="4"/><line nr="201" mi="0" ci="8" mb="0" cb="0"/><line nr="220" mi="0" ci="8" mb="0" cb="2"/><line nr="221" mi="0" ci="9" mb="0" cb="0"/><line nr="246" mi="0" ci="4" mb="0" cb="0"/><line nr="247" mi="0" ci="14" mb="0" cb="4"/><line nr="249" mi="0" ci="8" mb="0" cb="2"/><line nr="250" mi="0" ci="10" mb="0" cb="0"/><line nr="267" mi="0" ci="4" mb="0" cb="0"/><line nr="268" mi="0" ci="16" mb="0" cb="2"/><line nr="269" mi="0" ci="2" mb="0" cb="0"/><line nr="270" mi="0" ci="12" mb="0" cb="2"/><line nr="271" mi="0" ci="13" mb="0" cb="0"/><line nr="272" mi="0" ci="1" mb="0" cb="0"/><line nr="273" mi="0" ci="2" mb="0" cb="0"/><line nr="292" mi="0" ci="4" mb="0" cb="0"/><line nr="293" mi="0" ci="16" mb="0" cb="2"/><line nr="294" mi="0" ci="5" mb="0" cb="0"/><line nr="313" mi="0" ci="4" mb="0" cb="0"/><line nr="314" mi="0" ci="16" mb="0" cb="2"/><line nr="315" mi="0" ci="8" mb="0" cb="0"/><line nr="340" mi="0" ci="4" mb="0" cb="0"/><line nr="341" mi="0" ci="16" mb="0" cb="2"/><line nr="342" mi="0" ci="4" mb="0" cb="0"/><line nr="343" mi="0" ci="14" mb="0" cb="4"/><line nr="345" mi="0" ci="9" mb="0" cb="0"/><line nr="371" mi="0" ci="4" mb="0" cb="0"/><line nr="372" mi="0" ci="16" mb="0" cb="2"/><line nr="373" mi="0" ci="8" mb="0" cb="2"/><line nr="374" mi="0" ci="10" mb="0" cb="0"/><line nr="406" mi="0" ci="4" mb="0" cb="0"/><line nr="407" mi="0" ci="16" mb="0" cb="2"/><line nr="408" mi="0" ci="4" mb="0" cb="0"/><line nr="409" mi="0" ci="14" mb="0" cb="4"/><line nr="411" mi="0" ci="8" mb="0" cb="2"/><line nr="412" mi="0" ci="11" mb="0" cb="0"/><line nr="423" mi="0" ci="2" mb="0" cb="0"/><line nr="424" mi="0" ci="12" mb="0" cb="2"/><line nr="425" mi="0" ci="5" mb="0" cb="0"/><line nr="426" mi="0" ci="1" mb="0" cb="0"/><line nr="427" mi="0" ci="2" mb="0" cb="0"/><line nr="446" mi="0" ci="4" mb="0" cb="0"/><line nr="447" mi="0" ci="16" mb="0" cb="2"/><line nr="448" mi="0" ci="5" mb="0" cb="0"/><line nr="459" mi="0" ci="4" mb="0" cb="0"/><line nr="471" mi="0" ci="8" mb="0" cb="2"/><line nr="472" mi="0" ci="7" mb="0" cb="0"/><line nr="477" mi="0" ci="9" mb="0" cb="0"/><line nr="482" mi="0" ci="3" mb="0" cb="2"/><line nr="483" mi="0" ci="2" mb="0" cb="0"/><line nr="485" mi="0" ci="3" mb="0" cb="2"/><line nr="486" mi="0" ci="2" mb="0" cb="0"/><line nr="488" mi="0" ci="3" mb="0" cb="0"/><line nr="489" mi="0" ci="6" mb="0" cb="0"/><line nr="501" mi="0" ci="4" mb="0" cb="0"/><line nr="502" mi="0" ci="1" mb="0" cb="0"/><line nr="519" mi="0" ci="4" mb="0" cb="0"/><line nr="520" mi="0" ci="6" mb="0" cb="0"/><line nr="521" mi="1" ci="13" mb="1" cb="1"/><line nr="522" mi="0" ci="7" mb="0" cb="0"/><line nr="523" mi="0" ci="2" mb="0" cb="0"/><line nr="543" mi="0" ci="4" mb="0" cb="0"/><line nr="544" mi="0" ci="4" mb="0" cb="0"/><line nr="545" mi="0" ci="17" mb="0" cb="4"/><line nr="546" mi="0" ci="6" mb="0" cb="0"/><line nr="547" mi="0" ci="2" mb="0" cb="0"/><line nr="561" mi="0" ci="4" mb="0" cb="0"/><line nr="562" mi="0" ci="8" mb="0" cb="2"/><line nr="563" mi="0" ci="7" mb="0" cb="0"/><line nr="565" mi="0" ci="2" mb="0" cb="0"/><line nr="579" mi="0" ci="10" mb="0" cb="0"/><line nr="580" mi="0" ci="11" mb="0" cb="0"/><line nr="581" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1" covered="719"/><counter type="BRANCH" missed="1" covered="63"/><counter type="LINE" missed="0" covered="103"/><counter type="COMPLEXITY" missed="1" covered="64"/><counter type="METHOD" missed="0" covered="33"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="109" covered="8843"/><counter type="BRANCH" missed="24" covered="686"/><counter type="LINE" missed="14" covered="1339"/><counter type="COMPLEXITY" missed="25" covered="678"/><counter type="METHOD" missed="4" covered="344"/><counter type="CLASS" missed="0" covered="20"/></package><package name="com/github/ltennstedt/finnmath/core/number"><class name="com/github/ltennstedt/finnmath/core/number/RealComplexNumber$RealComplexNumberComparator"><method name="&lt;init&gt;" desc="()V" line="567"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compare" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)I" line="572"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/PolarForm"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="75"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="87"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="101"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="116"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="135"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumber" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="151"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="complexNumer" desc="(Lch/obermuhlner/math/big/BigFloat$Context;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="156"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="163"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="168"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="180"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getRadial" desc="()Ljava/math/BigDecimal;" line="184"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getAngular" desc="()Ljava/math/BigDecimal;" line="188"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="168"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="0" covered="18"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/RealComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="85"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)V" line="98"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="114"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="130"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="147"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="169"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="193"><counter type="INSTRUCTION" missed="0" covered="69"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="219"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="236"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="251"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="263"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="275"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigDecimal;" line="286"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="297"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="311"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(I)Ljava/math/BigDecimal;" line="330"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/RoundingMode;)Ljava/math/BigDecimal;" line="350"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="374"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="395"><counter type="INSTRUCTION" missed="6" covered="86"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="1" covered="11"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="()Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="423"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="442"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="462"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="486"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="508"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEqualToByComparingParts" desc="(Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;)Z" line="526"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigDecimalMatrix;" line="539"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="545"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="550"><counter type="INSTRUCTION" missed="2" covered="29"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="48"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="8" covered="708"/><counter type="BRANCH" missed="3" covered="55"/><counter type="LINE" missed="2" covered="92"/><counter type="COMPLEXITY" missed="3" covered="55"/><counter type="METHOD" missed="0" covered="29"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/Fraction"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="88"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="intValue" desc="()I" line="104"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="longValue" desc="()J" line="116"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="floatValue" desc="()F" line="128"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="doubleValue" desc="()D" line="140"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="159"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="182"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="205"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="231"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="252"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="273"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="290"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="302"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="318"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)I" line="333"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="353"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThanOrEqualTo" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="373"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThan" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="387"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThan" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="402"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="420"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="438"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="normalize" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="456"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="()Lcom/github/ltennstedt/finnmath/core/number/Fraction;" line="479"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="signum" desc="()I" line="491"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equivalent" desc="(Lcom/github/ltennstedt/finnmath/core/number/Fraction;)Z" line="506"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="512"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="517"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="529"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNumerator" desc="()Ljava/math/BigInteger;" line="533"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getDenominator" desc="()Ljava/math/BigInteger;" line="537"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="43"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="495"/><counter type="BRANCH" missed="0" covered="42"/><counter type="LINE" missed="0" covered="83"/><counter type="COMPLEXITY" missed="0" covered="52"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/SimpleComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="77"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="92"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="subtract" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="108"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="125"><counter type="INSTRUCTION" missed="0" covered="42"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="147"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="divide" desc="(Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="172"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="pow" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="191"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="negate" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="208"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invert" desc="()Lcom/github/ltennstedt/finnmath/core/number/RealComplexNumber;" line="223"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="invertible" desc="()Z" line="235"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="247"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="absPow2" desc="()Ljava/math/BigInteger;" line="258"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="conjugate" desc="()Lcom/github/ltennstedt/finnmath/core/number/SimpleComplexNumber;" line="269"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="283"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(I)Ljava/math/BigDecimal;" line="302"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/RoundingMode;)Ljava/math/BigDecimal;" line="322"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;" line="346"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="argument" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="367"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="()Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="383"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(I)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="402"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="422"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(ILjava/math/RoundingMode;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="446"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="polarForm" desc="(Ljava/math/MathContext;)Lcom/github/ltennstedt/finnmath/core/number/PolarForm;" line="467"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matrix" desc="()Lcom/github/ltennstedt/finnmath/core/linear/BigIntegerMatrix;" line="481"><counter type="INSTRUCTION" missed="0" covered="38"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="487"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="492"><counter type="INSTRUCTION" missed="0" covered="31"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="47"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="551"/><counter type="BRANCH" missed="0" covered="44"/><counter type="LINE" missed="0" covered="73"/><counter type="COMPLEXITY" missed="0" covered="49"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/AbstractComplexNumber"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/Object;)V" line="60"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="95"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getReal" desc="()Ljava/lang/Object;" line="99"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getImaginary" desc="()Ljava/lang/Object;" line="103"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="44"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/ltennstedt/finnmath/core/number/ScientificNotation"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;I)V" line="62"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="asString" desc="()Ljava/lang/String;" line="74"><counter type="INSTRUCTION" missed="0" covered="62"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="91"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="96"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="108"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getCoefficient" desc="()Ljava/math/BigDecimal;" line="112"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getExponent" desc="()I" line="116"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="135"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="PolarForm.java"><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="76" mi="0" ci="6" mb="0" cb="0"/><line nr="77" mi="0" ci="6" mb="0" cb="0"/><line nr="78" mi="0" ci="1" mb="0" cb="0"/><line nr="87" mi="0" ci="5" mb="0" cb="0"/><line nr="101" mi="0" ci="9" mb="0" cb="2"/><line nr="102" mi="0" ci="8" mb="0" cb="0"/><line nr="116" mi="0" ci="4" mb="0" cb="0"/><line nr="117" mi="0" ci="9" mb="0" cb="0"/><line nr="135" mi="0" ci="9" mb="0" cb="2"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="9" mb="0" cb="0"/><line nr="151" mi="0" ci="4" mb="0" cb="0"/><line nr="152" mi="0" ci="5" mb="0" cb="0"/><line nr="156" mi="0" ci="10" mb="0" cb="0"/><line nr="157" mi="0" ci="10" mb="0" cb="0"/><line nr="158" mi="0" ci="6" mb="0" cb="0"/><line nr="163" mi="0" ci="14" mb="0" cb="0"/><line nr="168" mi="0" ci="3" mb="0" cb="2"/><line nr="169" mi="0" ci="2" mb="0" cb="0"/><line nr="171" mi="0" ci="3" mb="0" cb="2"/><line nr="172" mi="0" ci="2" mb="0" cb="0"/><line nr="174" mi="0" ci="3" mb="0" cb="0"/><line nr="175" mi="0" ci="16" mb="0" cb="4"/><line nr="180" mi="0" ci="12" mb="0" cb="0"/><line nr="184" mi="0" ci="3" mb="0" cb="0"/><line nr="188" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="168"/><counter type="BRANCH" missed="0" covered="12"/><counter type="LINE" missed="0" covered="27"/><counter type="COMPLEXITY" missed="0" covered="18"/><counter type="METHOD" missed="0" covered="12"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="RealComplexNumber.java"><line nr="48" mi="0" ci="6" mb="0" cb="0"/><line nr="55" mi="0" ci="6" mb="0" cb="0"/><line nr="62" mi="0" ci="6" mb="0" cb="0"/><line nr="69" mi="0" ci="6" mb="0" cb="0"/><line nr="85" mi="0" ci="4" mb="0" cb="0"/><line nr="86" mi="0" ci="1" mb="0" cb="0"/><line nr="98" mi="0" ci="14" mb="0" cb="0"/><line nr="99" mi="0" ci="3" mb="0" cb="0"/><line nr="100" mi="0" ci="1" mb="0" cb="0"/><line nr="114" mi="0" ci="4" mb="0" cb="0"/><line nr="115" mi="0" ci="18" mb="0" cb="0"/><line nr="130" mi="0" ci="4" mb="0" cb="0"/><line nr="131" mi="0" ci="14" mb="0" cb="0"/><line nr="132" mi="0" ci="4" mb="0" cb="0"/><line nr="147" mi="0" ci="4" mb="0" cb="0"/><line nr="148" mi="0" ci="16" mb="0" cb="0"/><line nr="149" mi="0" ci="16" mb="0" cb="0"/><line nr="150" mi="0" ci="6" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="5" mb="0" cb="0"/><line nr="171" mi="0" ci="5" mb="0" cb="0"/><line nr="193" mi="0" ci="4" mb="0" cb="0"/><line nr="194" mi="0" ci="5" mb="0" cb="0"/><line nr="195" mi="0" ci="4" mb="0" cb="0"/><line nr="196" mi="0" ci="12" mb="0" cb="0"/><line nr="197" mi="0" ci="17" mb="0" cb="0"/><line nr="198" mi="0" ci="2" mb="0" cb="0"/><line nr="199" mi="0" ci="4" mb="0" cb="0"/><line nr="200" mi="0" ci="13" mb="0" cb="0"/><line nr="201" mi="0" ci="2" mb="0" cb="0"/><line nr="202" mi="0" ci="6" mb="0" cb="0"/><line nr="219" mi="0" ci="9" mb="0" cb="2"/><line nr="220" mi="0" ci="3" mb="0" cb="2"/><line nr="221" mi="0" ci="8" mb="0" cb="0"/><line nr="222" mi="0" ci="3" mb="0" cb="2"/><line nr="223" mi="0" ci="2" mb="0" cb="0"/><line nr="225" mi="0" ci="2" mb="0" cb="0"/><line nr="236" mi="0" ci="12" mb="0" cb="0"/><line nr="251" mi="0" ci="5" mb="0" cb="0"/><line nr="252" mi="0" ci="4" mb="0" cb="0"/><line nr="263" mi="0" ci="8" mb="0" cb="2"/><line nr="275" mi="0" ci="7" mb="0" cb="0"/><line nr="286" mi="0" ci="12" mb="0" cb="0"/><line nr="297" mi="0" ci="11" mb="0" cb="0"/><line nr="311" mi="0" ci="10" mb="0" cb="2"/><line nr="312" mi="0" ci="7" mb="0" cb="0"/><line nr="330" mi="0" ci="10" mb="0" cb="2"/><line nr="331" mi="0" ci="9" mb="0" cb="2"/><line nr="332" mi="0" ci="7" mb="0" cb="0"/><line nr="350" mi="0" ci="10" mb="0" cb="2"/><line nr="351" mi="0" ci="4" mb="0" cb="0"/><line nr="352" mi="0" ci="8" mb="0" cb="0"/><line nr="374" mi="0" ci="10" mb="0" cb="2"/><line nr="375" mi="0" ci="9" mb="0" cb="2"/><line nr="376" mi="0" ci="4" mb="0" cb="0"/><line nr="377" mi="0" ci="8" mb="0" cb="0"/><line nr="395" mi="0" ci="18" mb="0" cb="4"/><line nr="397" mi="0" ci="4" mb="0" cb="0"/><line nr="398" mi="0" ci="3" mb="0" cb="0"/><line nr="399" mi="0" ci="6" mb="0" cb="2"/><line nr="400" mi="0" ci="12" mb="0" cb="0"/><line nr="401" mi="0" ci="6" mb="0" cb="2"/><line nr="402" mi="0" ci="3" mb="0" cb="0"/><line nr="404" mi="0" ci="3" mb="0" cb="0"/><line nr="405" mi="0" ci="13" mb="1" cb="1"/><line nr="406" mi="4" ci="0" mb="0" cb="0"/><line nr="408" mi="0" ci="9" mb="0" cb="0"/><line nr="409" mi="2" ci="9" mb="1" cb="1"/><line nr="423" mi="0" ci="10" mb="0" cb="2"/><line nr="424" mi="0" ci="7" mb="0" cb="0"/><line nr="442" mi="0" ci="10" mb="0" cb="2"/><line nr="443" mi="0" ci="9" mb="0" cb="2"/><line nr="444" mi="0" ci="7" mb="0" cb="0"/><line nr="462" mi="0" ci="10" mb="0" cb="2"/><line nr="463" mi="0" ci="4" mb="0" cb="0"/><line nr="464" mi="0" ci="8" mb="0" cb="0"/><line nr="486" mi="0" ci="10" mb="0" cb="2"/><line nr="487" mi="0" ci="9" mb="0" cb="2"/><line nr="488" mi="0" ci="4" mb="0" cb="0"/><line nr="489" mi="0" ci="8" mb="0" cb="0"/><line nr="508" mi="0" ci="10" mb="0" cb="2"/><line nr="509" mi="0" ci="4" mb="0" cb="0"/><line nr="510" mi="0" ci="9" mb="0" cb="0"/><line nr="526" mi="0" ci="4" mb="0" cb="0"/><line nr="527" mi="0" ci="20" mb="0" cb="4"/><line nr="539" mi="0" ci="30" mb="0" cb="0"/><line nr="540" mi="0" ci="8" mb="0" cb="0"/><line nr="545" mi="0" ci="14" mb="0" cb="0"/><line nr="550" mi="0" ci="3" mb="0" cb="2"/><line nr="551" mi="0" ci="2" mb="0" cb="0"/><line nr="553" mi="0" ci="3" mb="1" cb="1"/><line nr="554" mi="2" ci="0" mb="0" cb="0"/><line nr="556" mi="0" ci="3" mb="0" cb="0"/><line nr="557" mi="0" ci="18" mb="0" cb="4"/><line nr="567" mi="0" ci="2" mb="0" cb="0"/><line nr="568" mi="0" ci="1" mb="0" cb="0"/><line nr="572" mi="0" ci="2" mb="0" cb="2"/><line nr="573" mi="0" ci="2" mb="0" cb="0"/><line nr="575" mi="0" ci="2" mb="0" cb="2"/><line nr="576" mi="0" ci="2" mb="0" cb="0"/><line nr="578" mi="0" ci="4" mb="0" cb="2"/><line nr="579" mi="0" ci="2" mb="0" cb="0"/><line nr="581" mi="0" ci="8" mb="0" cb="2"/><counter type="INSTRUCTION" missed="8" covered="733"/><counter type="BRANCH" missed="3" covered="63"/><counter type="LINE" missed="2" covered="101"/><counter type="COMPLEXITY" missed="3" covered="61"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="ScientificNotation.java"><line nr="62" mi="0" ci="2" mb="0" cb="0"/><line nr="63" mi="0" ci="6" mb="0" cb="0"/><line nr="64" mi="0" ci="3" mb="0" cb="0"/><line nr="65" mi="0" ci="1" mb="0" cb="0"/><line nr="74" mi="0" ci="5" mb="0" cb="2"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="0" ci="3" mb="0" cb="2"/><line nr="78" mi="0" ci="16" mb="0" cb="0"/><line nr="80" mi="0" ci="3" mb="0" cb="2"/><line nr="81" mi="0" ci="4" mb="0" cb="0"/><line nr="83" mi="0" ci="4" mb="0" cb="2"/><line nr="84" mi="0" ci="11" mb="0" cb="0"/><line nr="86" mi="0" ci="14" mb="0" cb="0"/><line nr="91" mi="0" ci="15" mb="0" cb="0"/><line nr="96" mi="0" ci="3" mb="0" cb="2"/><line nr="97" mi="0" ci="2" mb="0" cb="0"/><line nr="99" mi="0" ci="3" mb="0" cb="2"/><line nr="100" mi="0" ci="2" mb="0" cb="0"/><line nr="102" mi="0" ci="3" mb="0" cb="0"/><line nr="103" mi="0" ci="15" mb="0" cb="4"/><line nr="108" mi="0" ci="12" mb="0" cb="0"/><line nr="112" mi="0" ci="3" mb="0" cb="0"/><line nr="116" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="135"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="15"/><counter type="METHOD" missed="0" covered="7"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Fraction.java"><line nr="43" mi="0" ci="6" mb="0" cb="0"/><line nr="50" mi="0" ci="7" mb="0" cb="0"/><line nr="88" mi="0" ci="2" mb="0" cb="0"/><line nr="89" mi="0" ci="6" mb="0" cb="0"/><line nr="90" mi="0" ci="6" mb="0" cb="0"/><line nr="91" mi="0" ci="10" mb="0" cb="2"/><line nr="93" mi="0" ci="1" mb="0" cb="0"/><line nr="104" mi="0" ci="14" mb="0" cb="0"/><line nr="116" mi="0" ci="14" mb="0" cb="0"/><line nr="128" mi="0" ci="14" mb="0" cb="0"/><line nr="140" mi="0" ci="14" mb="0" cb="0"/><line nr="159" mi="0" ci="4" mb="0" cb="0"/><line nr="160" mi="0" ci="1" mb="0" cb="0"/><line nr="161" mi="0" ci="11" mb="0" cb="0"/><line nr="162" mi="0" ci="6" mb="0" cb="0"/><line nr="163" mi="0" ci="6" mb="0" cb="0"/><line nr="182" mi="0" ci="4" mb="0" cb="0"/><line nr="183" mi="0" ci="8" mb="0" cb="0"/><line nr="184" mi="0" ci="4" mb="0" cb="0"/><line nr="185" mi="0" ci="6" mb="0" cb="0"/><line nr="186" mi="0" ci="6" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="206" mi="0" ci="6" mb="0" cb="0"/><line nr="207" mi="0" ci="6" mb="0" cb="0"/><line nr="208" mi="0" ci="6" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="5" mb="0" cb="0"/><line nr="233" mi="0" ci="5" mb="0" cb="0"/><line nr="252" mi="0" ci="9" mb="0" cb="2"/><line nr="253" mi="0" ci="3" mb="0" cb="2"/><line nr="254" mi="0" ci="8" mb="0" cb="0"/><line nr="255" mi="0" ci="3" mb="0" cb="2"/><line nr="256" mi="0" ci="2" mb="0" cb="0"/><line nr="258" mi="0" ci="2" mb="0" cb="0"/><line nr="273" mi="0" ci="9" mb="0" cb="0"/><line nr="290" mi="0" ci="5" mb="0" cb="0"/><line nr="291" mi="0" ci="8" mb="0" cb="0"/><line nr="302" mi="0" ci="9" mb="0" cb="2"/><line nr="318" mi="0" ci="10" mb="0" cb="0"/><line nr="333" mi="0" ci="4" mb="0" cb="0"/><line nr="334" mi="0" ci="4" mb="0" cb="2"/><line nr="335" mi="0" ci="2" mb="0" cb="0"/><line nr="337" mi="0" ci="4" mb="0" cb="2"/><line nr="338" mi="0" ci="2" mb="0" cb="0"/><line nr="340" mi="0" ci="2" mb="0" cb="0"/><line nr="353" mi="0" ci="4" mb="0" cb="0"/><line nr="354" mi="0" ci="3" mb="0" cb="0"/><line nr="355" mi="0" ci="3" mb="0" cb="0"/><line nr="356" mi="0" ci="6" mb="0" cb="0"/><line nr="357" mi="0" ci="6" mb="0" cb="0"/><line nr="358" mi="0" ci="9" mb="0" cb="2"/><line nr="373" mi="0" ci="4" mb="0" cb="0"/><line nr="374" mi="0" ci="12" mb="0" cb="4"/><line nr="387" mi="0" ci="4" mb="0" cb="0"/><line nr="388" mi="0" ci="8" mb="0" cb="2"/><line nr="402" mi="0" ci="4" mb="0" cb="0"/><line nr="403" mi="0" ci="8" mb="0" cb="2"/><line nr="420" mi="0" ci="4" mb="0" cb="0"/><line nr="421" mi="0" ci="8" mb="0" cb="2"/><line nr="438" mi="0" ci="4" mb="0" cb="0"/><line nr="439" mi="0" ci="8" mb="0" cb="2"/><line nr="456" mi="0" ci="3" mb="0" cb="2"/><line nr="457" mi="0" ci="11" mb="0" cb="0"/><line nr="459" mi="0" ci="3" mb="0" cb="2"/><line nr="460" mi="0" ci="2" mb="0" cb="0"/><line nr="462" mi="0" ci="5" mb="0" cb="2"/><line nr="463" mi="0" ci="3" mb="0" cb="0"/><line nr="465" mi="0" ci="2" mb="0" cb="0"/><line nr="479" mi="0" ci="6" mb="0" cb="0"/><line nr="480" mi="0" ci="12" mb="0" cb="0"/><line nr="491" mi="0" ci="8" mb="0" cb="0"/><line nr="506" mi="0" ci="4" mb="0" cb="0"/><line nr="507" mi="0" ci="8" mb="0" cb="0"/><line nr="512" mi="0" ci="14" mb="0" cb="0"/><line nr="517" mi="0" ci="3" mb="0" cb="2"/><line nr="518" mi="0" ci="2" mb="0" cb="0"/><line nr="520" mi="0" ci="3" mb="0" cb="2"/><line nr="521" mi="0" ci="2" mb="0" cb="0"/><line nr="523" mi="0" ci="3" mb="0" cb="0"/><line nr="524" mi="0" ci="16" mb="0" cb="4"/><line nr="529" mi="0" ci="12" mb="0" cb="0"/><line nr="533" mi="0" ci="3" mb="0" cb="0"/><line nr="537" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="495"/><counter type="BRANCH" missed="0" covered="42"/><counter type="LINE" missed="0" covered="83"/><counter type="COMPLEXITY" missed="0" covered="52"/><counter type="METHOD" missed="0" covered="31"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SimpleComplexNumber.java"><line nr="47" mi="0" ci="6" mb="0" cb="0"/><line nr="54" mi="0" ci="6" mb="0" cb="0"/><line nr="61" mi="0" ci="7" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="78" mi="0" ci="1" mb="0" cb="0"/><line nr="92" mi="0" ci="4" mb="0" cb="0"/><line nr="93" mi="0" ci="18" mb="0" cb="0"/><line nr="108" mi="0" ci="4" mb="0" cb="0"/><line nr="109" mi="0" ci="14" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="4" mb="0" cb="0"/><line nr="126" mi="0" ci="16" mb="0" cb="0"/><line nr="127" mi="0" ci="16" mb="0" cb="0"/><line nr="128" mi="0" ci="6" mb="0" cb="0"/><line nr="147" mi="0" ci="4" mb="0" cb="0"/><line nr="148" mi="0" ci="5" mb="0" cb="0"/><line nr="149" mi="0" ci="5" mb="0" cb="0"/><line nr="172" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="0" ci="5" mb="0" cb="0"/><line nr="174" mi="0" ci="4" mb="0" cb="0"/><line nr="175" mi="0" ci="11" mb="0" cb="0"/><line nr="191" mi="0" ci="9" mb="0" cb="2"/><line nr="192" mi="0" ci="3" mb="0" cb="2"/><line nr="193" mi="0" ci="8" mb="0" cb="0"/><line nr="194" mi="0" ci="3" mb="0" cb="2"/><line nr="195" mi="0" ci="2" mb="0" cb="0"/><line nr="197" mi="0" ci="2" mb="0" cb="0"/><line nr="208" mi="0" ci="12" mb="0" cb="0"/><line nr="223" mi="0" ci="5" mb="0" cb="0"/><line nr="224" mi="0" ci="4" mb="0" cb="0"/><line nr="235" mi="0" ci="8" mb="0" cb="2"/><line nr="247" mi="0" ci="7" mb="0" cb="0"/><line nr="258" mi="0" ci="12" mb="0" cb="0"/><line nr="269" mi="0" ci="11" mb="0" cb="0"/><line nr="283" mi="0" ci="10" mb="0" cb="2"/><line nr="284" mi="0" ci="7" mb="0" cb="0"/><line nr="302" mi="0" ci="10" mb="0" cb="2"/><line nr="303" mi="0" ci="9" mb="0" cb="2"/><line nr="304" mi="0" ci="7" mb="0" cb="0"/><line nr="322" mi="0" ci="10" mb="0" cb="2"/><line nr="323" mi="0" ci="4" mb="0" cb="0"/><line nr="324" mi="0" ci="8" mb="0" cb="0"/><line nr="346" mi="0" ci="10" mb="0" cb="2"/><line nr="347" mi="0" ci="9" mb="0" cb="2"/><line nr="348" mi="0" ci="4" mb="0" cb="0"/><line nr="349" mi="0" ci="8" mb="0" cb="0"/><line nr="367" mi="0" ci="10" mb="0" cb="2"/><line nr="368" mi="0" ci="4" mb="0" cb="0"/><line nr="369" mi="0" ci="7" mb="0" cb="0"/><line nr="383" mi="0" ci="10" mb="0" cb="2"/><line nr="384" mi="0" ci="7" mb="0" cb="0"/><line nr="402" mi="0" ci="10" mb="0" cb="2"/><line nr="403" mi="0" ci="9" mb="0" cb="2"/><line nr="404" mi="0" ci="7" mb="0" cb="0"/><line nr="422" mi="0" ci="10" mb="0" cb="2"/><line nr="423" mi="0" ci="4" mb="0" cb="0"/><line nr="424" mi="0" ci="8" mb="0" cb="0"/><line nr="446" mi="0" ci="10" mb="0" cb="2"/><line nr="447" mi="0" ci="9" mb="0" cb="2"/><line nr="448" mi="0" ci="4" mb="0" cb="0"/><line nr="449" mi="0" ci="8" mb="0" cb="0"/><line nr="467" mi="0" ci="10" mb="0" cb="2"/><line nr="468" mi="0" ci="4" mb="0" cb="0"/><line nr="469" mi="0" ci="7" mb="0" cb="0"/><line nr="481" mi="0" ci="30" mb="0" cb="0"/><line nr="482" mi="0" ci="8" mb="0" cb="0"/><line nr="487" mi="0" ci="14" mb="0" cb="0"/><line nr="492" mi="0" ci="3" mb="0" cb="2"/><line nr="493" mi="0" ci="2" mb="0" cb="0"/><line nr="495" mi="0" ci="3" mb="0" cb="2"/><line nr="496" mi="0" ci="2" mb="0" cb="0"/><line nr="498" mi="0" ci="3" mb="0" cb="0"/><line nr="499" mi="0" ci="18" mb="0" cb="4"/><counter type="INSTRUCTION" missed="0" covered="551"/><counter type="BRANCH" missed="0" covered="44"/><counter type="LINE" missed="0" covered="73"/><counter type="COMPLEXITY" missed="0" covered="49"/><counter type="METHOD" missed="0" covered="27"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="AbstractComplexNumber.java"><line nr="44" mi="0" ci="3" mb="0" cb="0"/><line nr="60" mi="0" ci="2" mb="0" cb="0"/><line nr="61" mi="0" ci="5" mb="0" cb="0"/><line nr="62" mi="0" ci="5" mb="0" cb="0"/><line nr="63" mi="0" ci="1" mb="0" cb="0"/><line nr="95" mi="0" ci="12" mb="0" cb="0"/><line nr="99" mi="0" ci="3" mb="0" cb="0"/><line nr="103" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="8" covered="2116"/><counter type="BRANCH" missed="3" covered="177"/><counter type="LINE" missed="2" covered="315"/><counter type="COMPLEXITY" missed="3" covered="200"/><counter type="METHOD" missed="0" covered="113"/><counter type="CLASS" missed="0" covered="7"/></package><counter type="INSTRUCTION" missed="132" covered="16776"/><counter type="BRANCH" missed="37" covered="1629"/><counter type="LINE" missed="19" covered="2522"/><counter type="COMPLEXITY" missed="38" covered="1430"/><counter type="METHOD" missed="4" covered="631"/><counter type="CLASS" missed="0" covered="29"/></report>